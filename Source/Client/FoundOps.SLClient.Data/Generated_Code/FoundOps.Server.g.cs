//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.488
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoundOps.Common.NET
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Address' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Common.NET")]
    [KnownType(typeof(GeocoderResult))]
    public partial class Address : Entity
    {
        
        private string _addressLineOne;
        
        private string _city;
        
        private int _key;
        
        private string _latitude;
        
        private string _longitude;
        
        private string _name;
        
        private string _state;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLineOneChanging(string value);
        partial void OnAddressLineOneChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnKeyChanging(int value);
        partial void OnKeyChanged();
        partial void OnLatitudeChanging(string value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(string value);
        partial void OnLongitudeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Address"/> class.
        /// </summary>
        public Address()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineOne' value.
        /// </summary>
        [DataMember()]
        public string AddressLineOne
        {
            get
            {
                return this._addressLineOne;
            }
            set
            {
                if ((this._addressLineOne != value))
                {
                    this.OnAddressLineOneChanging(value);
                    this.RaiseDataMemberChanging("AddressLineOne");
                    this.ValidateProperty("AddressLineOne", value);
                    this._addressLineOne = value;
                    this.RaiseDataMemberChanged("AddressLineOne");
                    this.OnAddressLineOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Key' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public int Key
        {
            get
            {
                return this._key;
            }
            set
            {
                if ((this._key != value))
                {
                    this.OnKeyChanging(value);
                    this.ValidateProperty("Key", value);
                    this._key = value;
                    this.RaisePropertyChanged("Key");
                    this.OnKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public string Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public string Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._key;
        }
    }
    
    /// <summary>
    /// The 'GeocoderResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Common.NET")]
    public sealed partial class GeocoderResult : Address
    {
        
        private string _addressLineTwo;
        
        private string _precision;
        
        private string _radius;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLineTwoChanging(string value);
        partial void OnAddressLineTwoChanged();
        partial void OnPrecisionChanging(string value);
        partial void OnPrecisionChanged();
        partial void OnRadiusChanging(string value);
        partial void OnRadiusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GeocoderResult"/> class.
        /// </summary>
        public GeocoderResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineTwo' value.
        /// </summary>
        [DataMember()]
        public string AddressLineTwo
        {
            get
            {
                return this._addressLineTwo;
            }
            set
            {
                if ((this._addressLineTwo != value))
                {
                    this.OnAddressLineTwoChanging(value);
                    this.RaiseDataMemberChanging("AddressLineTwo");
                    this.ValidateProperty("AddressLineTwo", value);
                    this._addressLineTwo = value;
                    this.RaiseDataMemberChanged("AddressLineTwo");
                    this.OnAddressLineTwoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Precision' value.
        /// </summary>
        [DataMember()]
        public string Precision
        {
            get
            {
                return this._precision;
            }
            set
            {
                if ((this._precision != value))
                {
                    this.OnPrecisionChanging(value);
                    this.RaiseDataMemberChanging("Precision");
                    this.ValidateProperty("Precision", value);
                    this._precision = value;
                    this.RaiseDataMemberChanged("Precision");
                    this.OnPrecisionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Radius' value.
        /// </summary>
        [DataMember()]
        public string Radius
        {
            get
            {
                return this._radius;
            }
            set
            {
                if ((this._radius != value))
                {
                    this.OnRadiusChanging(value);
                    this.RaiseDataMemberChanging("Radius");
                    this.ValidateProperty("Radius", value);
                    this._radius = value;
                    this.RaiseDataMemberChanged("Radius");
                    this.OnRadiusChanged();
                }
            }
        }
    }
}
namespace FoundOps.Core.Models.Account.Extensions
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'WebContextUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.Account.Extensions")]
    public sealed partial class WebContextUser : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WebContextUser"/> class.
        /// </summary>
        public WebContextUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
namespace FoundOps.Core.Models.CoreEntities
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Block' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Block : Entity
    {
        
        private string _fileName;
        
        private bool _hideFromNavigation;
        
        private Guid _id;
        
        private string _link;
        
        private bool _loginNotRequired;
        
        private string _name;
        
        private string _navigateUri;
        
        private EntityCollection<RoleBlock> _roleBlockToRoleSet;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnHideFromNavigationChanging(bool value);
        partial void OnHideFromNavigationChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLinkChanging(string value);
        partial void OnLinkChanged();
        partial void OnLoginNotRequiredChanging(bool value);
        partial void OnLoginNotRequiredChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNavigateUriChanging(string value);
        partial void OnNavigateUriChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Block"/> class.
        /// </summary>
        public Block()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HideFromNavigation' value.
        /// </summary>
        [DataMember()]
        public bool HideFromNavigation
        {
            get
            {
                return this._hideFromNavigation;
            }
            set
            {
                if ((this._hideFromNavigation != value))
                {
                    this.OnHideFromNavigationChanging(value);
                    this.RaiseDataMemberChanging("HideFromNavigation");
                    this.ValidateProperty("HideFromNavigation", value);
                    this._hideFromNavigation = value;
                    this.RaiseDataMemberChanged("HideFromNavigation");
                    this.OnHideFromNavigationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Link' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Link
        {
            get
            {
                return this._link;
            }
            set
            {
                if ((this._link != value))
                {
                    this.OnLinkChanging(value);
                    this.RaiseDataMemberChanging("Link");
                    this.ValidateProperty("Link", value);
                    this._link = value;
                    this.RaiseDataMemberChanged("Link");
                    this.OnLinkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoginNotRequired' value.
        /// </summary>
        [DataMember()]
        public bool LoginNotRequired
        {
            get
            {
                return this._loginNotRequired;
            }
            set
            {
                if ((this._loginNotRequired != value))
                {
                    this.OnLoginNotRequiredChanging(value);
                    this.RaiseDataMemberChanging("LoginNotRequired");
                    this.ValidateProperty("LoginNotRequired", value);
                    this._loginNotRequired = value;
                    this.RaiseDataMemberChanged("LoginNotRequired");
                    this.OnLoginNotRequiredChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NavigateUri' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string NavigateUri
        {
            get
            {
                return this._navigateUri;
            }
            set
            {
                if ((this._navigateUri != value))
                {
                    this.OnNavigateUriChanging(value);
                    this.RaiseDataMemberChanging("NavigateUri");
                    this.ValidateProperty("NavigateUri", value);
                    this._navigateUri = value;
                    this.RaiseDataMemberChanged("NavigateUri");
                    this.OnNavigateUriChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleBlock"/> entity instances.
        /// </summary>
        [Association("RoleBlockToBlockSet", "Id", "BlockId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RoleBlock> RoleBlockToRoleSet
        {
            get
            {
                if ((this._roleBlockToRoleSet == null))
                {
                    this._roleBlockToRoleSet = new EntityCollection<RoleBlock>(this, "RoleBlockToRoleSet", this.FilterRoleBlockToRoleSet, this.AttachRoleBlockToRoleSet, this.DetachRoleBlockToRoleSet);
                }
                return this._roleBlockToRoleSet;
            }
        }
        
        private void AttachRoleBlockToRoleSet(RoleBlock entity)
        {
            entity.Block = this;
        }
        
        private void DetachRoleBlockToRoleSet(RoleBlock entity)
        {
            entity.Block = null;
        }
        
        private bool FilterRoleBlockToRoleSet(RoleBlock entity)
        {
            return (entity.BlockId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Business' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public partial class Business : Party
    {
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Business"/> class.
        /// </summary>
        public Business()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'BusinessAccount' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class BusinessAccount : Business
    {
        
        private EntityCollection<Client> _clients;
        
        private EntityCollection<Employee> _employees;
        
        private EntityCollection<Invoice> _invoices;
        
        private string _quickBooksAccessToken;
        
        private string _quickBooksAccessTokenSecret;
        
        private bool _quickBooksEnabled;
        
        private string _quickBooksSessionXml;
        
        private EntityCollection<Region> _regions;
        
        private string _routeManifestSettings;
        
        private EntityCollection<Route> _routes;
        
        private EntityCollection<RouteTask> _routeTasks;
        
        private EntityCollection<SalesTerm> _salesTerms;
        
        private EntityCollection<Service> _servicesToProvide;
        
        private EntityCollection<ServiceTemplate> _serviceTemplates;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnQuickBooksAccessTokenChanging(string value);
        partial void OnQuickBooksAccessTokenChanged();
        partial void OnQuickBooksAccessTokenSecretChanging(string value);
        partial void OnQuickBooksAccessTokenSecretChanged();
        partial void OnQuickBooksEnabledChanging(bool value);
        partial void OnQuickBooksEnabledChanged();
        partial void OnQuickBooksSessionXmlChanging(string value);
        partial void OnQuickBooksSessionXmlChanged();
        partial void OnRouteManifestSettingsChanging(string value);
        partial void OnRouteManifestSettingsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccount"/> class.
        /// </summary>
        public BusinessAccount()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Client"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Client", "Id", "VendorId")]
        [XmlIgnore()]
        public EntityCollection<Client> Clients
        {
            get
            {
                if ((this._clients == null))
                {
                    this._clients = new EntityCollection<Client>(this, "Clients", this.FilterClients, this.AttachClients, this.DetachClients);
                }
                return this._clients;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Employee", "Id", "EmployerId")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Invoice"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Invoice", "Id", "BusinessAccountId")]
        [XmlIgnore()]
        public EntityCollection<Invoice> Invoices
        {
            get
            {
                if ((this._invoices == null))
                {
                    this._invoices = new EntityCollection<Invoice>(this, "Invoices", this.FilterInvoices, this.AttachInvoices, this.DetachInvoices);
                }
                return this._invoices;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksAccessToken' value.
        /// </summary>
        [DataMember()]
        public string QuickBooksAccessToken
        {
            get
            {
                return this._quickBooksAccessToken;
            }
            set
            {
                if ((this._quickBooksAccessToken != value))
                {
                    this.OnQuickBooksAccessTokenChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksAccessToken");
                    this.ValidateProperty("QuickBooksAccessToken", value);
                    this._quickBooksAccessToken = value;
                    this.RaiseDataMemberChanged("QuickBooksAccessToken");
                    this.OnQuickBooksAccessTokenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksAccessTokenSecret' value.
        /// </summary>
        [DataMember()]
        public string QuickBooksAccessTokenSecret
        {
            get
            {
                return this._quickBooksAccessTokenSecret;
            }
            set
            {
                if ((this._quickBooksAccessTokenSecret != value))
                {
                    this.OnQuickBooksAccessTokenSecretChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksAccessTokenSecret");
                    this.ValidateProperty("QuickBooksAccessTokenSecret", value);
                    this._quickBooksAccessTokenSecret = value;
                    this.RaiseDataMemberChanged("QuickBooksAccessTokenSecret");
                    this.OnQuickBooksAccessTokenSecretChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksEnabled' value.
        /// </summary>
        [DataMember()]
        public bool QuickBooksEnabled
        {
            get
            {
                return this._quickBooksEnabled;
            }
            set
            {
                if ((this._quickBooksEnabled != value))
                {
                    this.OnQuickBooksEnabledChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksEnabled");
                    this.ValidateProperty("QuickBooksEnabled", value);
                    this._quickBooksEnabled = value;
                    this.RaiseDataMemberChanged("QuickBooksEnabled");
                    this.OnQuickBooksEnabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksSessionXml' value.
        /// </summary>
        [DataMember()]
        public string QuickBooksSessionXml
        {
            get
            {
                return this._quickBooksSessionXml;
            }
            set
            {
                if ((this._quickBooksSessionXml != value))
                {
                    this.OnQuickBooksSessionXmlChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksSessionXml");
                    this.ValidateProperty("QuickBooksSessionXml", value);
                    this._quickBooksSessionXml = value;
                    this.RaiseDataMemberChanged("QuickBooksSessionXml");
                    this.OnQuickBooksSessionXmlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Region"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Region", "Id", "BusinessAccountId")]
        [XmlIgnore()]
        public EntityCollection<Region> Regions
        {
            get
            {
                if ((this._regions == null))
                {
                    this._regions = new EntityCollection<Region>(this, "Regions", this.FilterRegions, this.AttachRegions, this.DetachRegions);
                }
                return this._regions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteManifestSettings' value.
        /// </summary>
        [DataMember()]
        public string RouteManifestSettings
        {
            get
            {
                return this._routeManifestSettings;
            }
            set
            {
                if ((this._routeManifestSettings != value))
                {
                    this.OnRouteManifestSettingsChanging(value);
                    this.RaiseDataMemberChanging("RouteManifestSettings");
                    this.ValidateProperty("RouteManifestSettings", value);
                    this._routeManifestSettings = value;
                    this.RaiseDataMemberChanged("RouteManifestSettings");
                    this.OnRouteManifestSettingsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Route"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Route", "Id", "OwnerBusinessAccountId")]
        [XmlIgnore()]
        public EntityCollection<Route> Routes
        {
            get
            {
                if ((this._routes == null))
                {
                    this._routes = new EntityCollection<Route>(this, "Routes", this.FilterRoutes, this.AttachRoutes, this.DetachRoutes);
                }
                return this._routes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteTask"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_RouteTask", "Id", "BusinessAccountId")]
        [XmlIgnore()]
        public EntityCollection<RouteTask> RouteTasks
        {
            get
            {
                if ((this._routeTasks == null))
                {
                    this._routeTasks = new EntityCollection<RouteTask>(this, "RouteTasks", this.FilterRouteTasks, this.AttachRouteTasks, this.DetachRouteTasks);
                }
                return this._routeTasks;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesTerm"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_SalesTerm", "Id", "BusinessAccountId")]
        [XmlIgnore()]
        public EntityCollection<SalesTerm> SalesTerms
        {
            get
            {
                if ((this._salesTerms == null))
                {
                    this._salesTerms = new EntityCollection<SalesTerm>(this, "SalesTerms", this.FilterSalesTerms, this.AttachSalesTerms, this.DetachSalesTerms);
                }
                return this._salesTerms;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Service"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_Service", "Id", "ServiceProviderId")]
        [XmlIgnore()]
        public EntityCollection<Service> ServicesToProvide
        {
            get
            {
                if ((this._servicesToProvide == null))
                {
                    this._servicesToProvide = new EntityCollection<Service>(this, "ServicesToProvide", this.FilterServicesToProvide, this.AttachServicesToProvide, this.DetachServicesToProvide);
                }
                return this._servicesToProvide;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ServiceTemplate"/> entity instances.
        /// </summary>
        [Association("BusinessAccount_ServiceTemplate", "Id", "OwnerServiceProviderId")]
        [XmlIgnore()]
        public EntityCollection<ServiceTemplate> ServiceTemplates
        {
            get
            {
                if ((this._serviceTemplates == null))
                {
                    this._serviceTemplates = new EntityCollection<ServiceTemplate>(this, "ServiceTemplates", this.FilterServiceTemplates, this.AttachServiceTemplates, this.DetachServiceTemplates);
                }
                return this._serviceTemplates;
            }
        }
        
        private void AttachClients(Client entity)
        {
            entity.Vendor = this;
        }
        
        private void DetachClients(Client entity)
        {
            entity.Vendor = null;
        }
        
        private bool FilterClients(Client entity)
        {
            return (entity.VendorId == this.Id);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Employer = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Employer = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.EmployerId == this.Id);
        }
        
        private void AttachInvoices(Invoice entity)
        {
            entity.BusinessAccount = this;
        }
        
        private void DetachInvoices(Invoice entity)
        {
            entity.BusinessAccount = null;
        }
        
        private bool FilterInvoices(Invoice entity)
        {
            return (entity.BusinessAccountId == this.Id);
        }
        
        private void AttachRegions(Region entity)
        {
            entity.BusinessAccount = this;
        }
        
        private void DetachRegions(Region entity)
        {
            entity.BusinessAccount = null;
        }
        
        private bool FilterRegions(Region entity)
        {
            return (entity.BusinessAccountId == this.Id);
        }
        
        private void AttachRoutes(Route entity)
        {
            entity.OwnerBusinessAccount = this;
        }
        
        private void DetachRoutes(Route entity)
        {
            entity.OwnerBusinessAccount = null;
        }
        
        private bool FilterRoutes(Route entity)
        {
            return (entity.OwnerBusinessAccountId == this.Id);
        }
        
        private void AttachRouteTasks(RouteTask entity)
        {
            entity.OwnerBusinessAccount = this;
        }
        
        private void DetachRouteTasks(RouteTask entity)
        {
            entity.OwnerBusinessAccount = null;
        }
        
        private bool FilterRouteTasks(RouteTask entity)
        {
            return (entity.BusinessAccountId == this.Id);
        }
        
        private void AttachSalesTerms(SalesTerm entity)
        {
            entity.BusinessAccount = this;
        }
        
        private void DetachSalesTerms(SalesTerm entity)
        {
            entity.BusinessAccount = null;
        }
        
        private bool FilterSalesTerms(SalesTerm entity)
        {
            return (entity.BusinessAccountId == this.Id);
        }
        
        private void AttachServicesToProvide(Service entity)
        {
            entity.ServiceProvider = this;
        }
        
        private void DetachServicesToProvide(Service entity)
        {
            entity.ServiceProvider = null;
        }
        
        private bool FilterServicesToProvide(Service entity)
        {
            return (entity.ServiceProviderId == this.Id);
        }
        
        private void AttachServiceTemplates(ServiceTemplate entity)
        {
            entity.OwnerServiceProvider = this;
        }
        
        private void DetachServiceTemplates(ServiceTemplate entity)
        {
            entity.OwnerServiceProvider = null;
        }
        
        private bool FilterServiceTemplates(ServiceTemplate entity)
        {
            return (entity.OwnerServiceProviderId == this.Id);
        }
    }
    
    /// <summary>
    /// The 'Client' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Client : Entity
    {
        
        private EntityCollection<ClientTitle> _clientTitles;
        
        private DateTime _dateAdded;
        
        private EntityRef<SalesTerm> _defaultSalesTerm;
        
        private Guid _id;
        
        private EntityCollection<Invoice> _invoices;
        
        private EntityRef<Party> _linkedParty;
        
        private Nullable<Guid> _linkedPartyId;
        
        private EntityRef<Party> _ownedParty;
        
        private EntityCollection<RecurringService> _recurringServices;
        
        private EntityCollection<RouteDestination> _routeDestinations;
        
        private EntityCollection<RouteTask> _routeTasks;
        
        private string _salesperson;
        
        private Guid _salesTermId;
        
        private EntityCollection<Service> _servicesToRecieve;
        
        private EntityCollection<ServiceTemplate> _serviceTemplates;
        
        private EntityRef<BusinessAccount> _vendor;
        
        private Guid _vendorId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateAddedChanging(DateTime value);
        partial void OnDateAddedChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLinkedPartyIdChanging(Nullable<Guid> value);
        partial void OnLinkedPartyIdChanged();
        partial void OnSalespersonChanging(string value);
        partial void OnSalespersonChanged();
        partial void OnSalesTermIdChanging(Guid value);
        partial void OnSalesTermIdChanged();
        partial void OnVendorIdChanging(Guid value);
        partial void OnVendorIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Client"/> class.
        /// </summary>
        public Client()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ClientTitle"/> entity instances.
        /// </summary>
        [Association("Client_ClientTitle", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<ClientTitle> ClientTitles
        {
            get
            {
                if ((this._clientTitles == null))
                {
                    this._clientTitles = new EntityCollection<ClientTitle>(this, "ClientTitles", this.FilterClientTitles, this.AttachClientTitles, this.DetachClientTitles);
                }
                return this._clientTitles;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateAdded' value.
        /// </summary>
        [DataMember()]
        public DateTime DateAdded
        {
            get
            {
                return this._dateAdded;
            }
            set
            {
                if ((this._dateAdded != value))
                {
                    this.OnDateAddedChanging(value);
                    this.RaiseDataMemberChanging("DateAdded");
                    this.ValidateProperty("DateAdded", value);
                    this._dateAdded = value;
                    this.RaiseDataMemberChanged("DateAdded");
                    this.OnDateAddedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SalesTerm"/> entity.
        /// </summary>
        [Association("SalesTerm_Client", "SalesTermId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SalesTerm DefaultSalesTerm
        {
            get
            {
                if ((this._defaultSalesTerm == null))
                {
                    this._defaultSalesTerm = new EntityRef<SalesTerm>(this, "DefaultSalesTerm", this.FilterDefaultSalesTerm);
                }
                return this._defaultSalesTerm.Entity;
            }
            set
            {
                SalesTerm previous = this.DefaultSalesTerm;
                if ((previous != value))
                {
                    this.ValidateProperty("DefaultSalesTerm", value);
                    if ((previous != null))
                    {
                        this._defaultSalesTerm.Entity = null;
                        previous.Clients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesTermId = value.Id;
                    }
                    else
                    {
                        this.SalesTermId = default(Guid);
                    }
                    this._defaultSalesTerm.Entity = value;
                    if ((value != null))
                    {
                        value.Clients.Add(this);
                    }
                    this.RaisePropertyChanged("DefaultSalesTerm");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Invoice"/> entity instances.
        /// </summary>
        [Association("Client_Invoice", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<Invoice> Invoices
        {
            get
            {
                if ((this._invoices == null))
                {
                    this._invoices = new EntityCollection<Invoice>(this, "Invoices", this.FilterInvoices, this.AttachInvoices, this.DetachInvoices);
                }
                return this._invoices;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Client1", "LinkedPartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party LinkedParty
        {
            get
            {
                if ((this._linkedParty == null))
                {
                    this._linkedParty = new EntityRef<Party>(this, "LinkedParty", this.FilterLinkedParty);
                }
                return this._linkedParty.Entity;
            }
            set
            {
                Party previous = this.LinkedParty;
                if ((previous != value))
                {
                    this.ValidateProperty("LinkedParty", value);
                    if ((previous != null))
                    {
                        this._linkedParty.Entity = null;
                        previous.OfClients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LinkedPartyId = value.Id;
                    }
                    else
                    {
                        this.LinkedPartyId = default(Nullable<Guid>);
                    }
                    this._linkedParty.Entity = value;
                    if ((value != null))
                    {
                        value.OfClients.Add(this);
                    }
                    this.RaisePropertyChanged("LinkedParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LinkedPartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LinkedPartyId
        {
            get
            {
                return this._linkedPartyId;
            }
            set
            {
                if ((this._linkedPartyId != value))
                {
                    this.OnLinkedPartyIdChanging(value);
                    this.RaiseDataMemberChanging("LinkedPartyId");
                    this.ValidateProperty("LinkedPartyId", value);
                    this._linkedPartyId = value;
                    this.RaiseDataMemberChanged("LinkedPartyId");
                    this.OnLinkedPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Client", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnedParty
        {
            get
            {
                if ((this._ownedParty == null))
                {
                    this._ownedParty = new EntityRef<Party>(this, "OwnedParty", this.FilterOwnedParty);
                }
                return this._ownedParty.Entity;
            }
            set
            {
                Party previous = this.OwnedParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnedParty", value);
                    if ((previous != null))
                    {
                        this._ownedParty.Entity = null;
                        previous.ClientOwner = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._ownedParty.Entity = value;
                    if ((value != null))
                    {
                        value.ClientOwner = this;
                    }
                    this.RaisePropertyChanged("OwnedParty");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RecurringService"/> entity instances.
        /// </summary>
        [Association("Client_RecurringService", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<RecurringService> RecurringServices
        {
            get
            {
                if ((this._recurringServices == null))
                {
                    this._recurringServices = new EntityCollection<RecurringService>(this, "RecurringServices", this.FilterRecurringServices, this.AttachRecurringServices, this.DetachRecurringServices);
                }
                return this._recurringServices;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteDestination"/> entity instances.
        /// </summary>
        [Association("Client_RouteDestination", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<RouteDestination> RouteDestinations
        {
            get
            {
                if ((this._routeDestinations == null))
                {
                    this._routeDestinations = new EntityCollection<RouteDestination>(this, "RouteDestinations", this.FilterRouteDestinations, this.AttachRouteDestinations, this.DetachRouteDestinations);
                }
                return this._routeDestinations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteTask"/> entity instances.
        /// </summary>
        [Association("Client_RouteTask", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<RouteTask> RouteTasks
        {
            get
            {
                if ((this._routeTasks == null))
                {
                    this._routeTasks = new EntityCollection<RouteTask>(this, "RouteTasks", this.FilterRouteTasks, this.AttachRouteTasks, this.DetachRouteTasks);
                }
                return this._routeTasks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Salesperson' value.
        /// </summary>
        [DataMember()]
        public string Salesperson
        {
            get
            {
                return this._salesperson;
            }
            set
            {
                if ((this._salesperson != value))
                {
                    this.OnSalespersonChanging(value);
                    this.RaiseDataMemberChanging("Salesperson");
                    this.ValidateProperty("Salesperson", value);
                    this._salesperson = value;
                    this.RaiseDataMemberChanged("Salesperson");
                    this.OnSalespersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesTermId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid SalesTermId
        {
            get
            {
                return this._salesTermId;
            }
            set
            {
                if ((this._salesTermId != value))
                {
                    this.OnSalesTermIdChanging(value);
                    this.RaiseDataMemberChanging("SalesTermId");
                    this.ValidateProperty("SalesTermId", value);
                    this._salesTermId = value;
                    this.RaiseDataMemberChanged("SalesTermId");
                    this.OnSalesTermIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Service"/> entity instances.
        /// </summary>
        [Association("Client_Service", "Id", "ClientId")]
        [XmlIgnore()]
        public EntityCollection<Service> ServicesToRecieve
        {
            get
            {
                if ((this._servicesToRecieve == null))
                {
                    this._servicesToRecieve = new EntityCollection<Service>(this, "ServicesToRecieve", this.FilterServicesToRecieve, this.AttachServicesToRecieve, this.DetachServicesToRecieve);
                }
                return this._servicesToRecieve;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ServiceTemplate"/> entity instances.
        /// </summary>
        [Association("Client_ServiceTemplate", "Id", "OwnerClientId")]
        [XmlIgnore()]
        public EntityCollection<ServiceTemplate> ServiceTemplates
        {
            get
            {
                if ((this._serviceTemplates == null))
                {
                    this._serviceTemplates = new EntityCollection<ServiceTemplate>(this, "ServiceTemplates", this.FilterServiceTemplates, this.AttachServiceTemplates, this.DetachServiceTemplates);
                }
                return this._serviceTemplates;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Client", "VendorId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount Vendor
        {
            get
            {
                if ((this._vendor == null))
                {
                    this._vendor = new EntityRef<BusinessAccount>(this, "Vendor", this.FilterVendor);
                }
                return this._vendor.Entity;
            }
            set
            {
                BusinessAccount previous = this.Vendor;
                if ((previous != value))
                {
                    this.ValidateProperty("Vendor", value);
                    if ((previous != null))
                    {
                        this._vendor.Entity = null;
                        previous.Clients.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.VendorId = value.Id;
                    }
                    else
                    {
                        this.VendorId = default(Guid);
                    }
                    this._vendor.Entity = value;
                    if ((value != null))
                    {
                        value.Clients.Add(this);
                    }
                    this.RaisePropertyChanged("Vendor");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid VendorId
        {
            get
            {
                return this._vendorId;
            }
            set
            {
                if ((this._vendorId != value))
                {
                    this.OnVendorIdChanging(value);
                    this.RaiseDataMemberChanging("VendorId");
                    this.ValidateProperty("VendorId", value);
                    this._vendorId = value;
                    this.RaiseDataMemberChanged("VendorId");
                    this.OnVendorIdChanged();
                }
            }
        }
        
        private void AttachClientTitles(ClientTitle entity)
        {
            entity.Client = this;
        }
        
        private void DetachClientTitles(ClientTitle entity)
        {
            entity.Client = null;
        }
        
        private bool FilterClientTitles(ClientTitle entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private bool FilterDefaultSalesTerm(SalesTerm entity)
        {
            return (entity.Id == this.SalesTermId);
        }
        
        private void AttachInvoices(Invoice entity)
        {
            entity.Client = this;
        }
        
        private void DetachInvoices(Invoice entity)
        {
            entity.Client = null;
        }
        
        private bool FilterInvoices(Invoice entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private bool FilterLinkedParty(Party entity)
        {
            return (entity.Id == this.LinkedPartyId);
        }
        
        private bool FilterOwnedParty(Party entity)
        {
            return (entity.Id == this.Id);
        }
        
        private void AttachRecurringServices(RecurringService entity)
        {
            entity.Client = this;
        }
        
        private void DetachRecurringServices(RecurringService entity)
        {
            entity.Client = null;
        }
        
        private bool FilterRecurringServices(RecurringService entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private void AttachRouteDestinations(RouteDestination entity)
        {
            entity.Client = this;
        }
        
        private void DetachRouteDestinations(RouteDestination entity)
        {
            entity.Client = null;
        }
        
        private bool FilterRouteDestinations(RouteDestination entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private void AttachRouteTasks(RouteTask entity)
        {
            entity.Client = this;
        }
        
        private void DetachRouteTasks(RouteTask entity)
        {
            entity.Client = null;
        }
        
        private bool FilterRouteTasks(RouteTask entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private void AttachServicesToRecieve(Service entity)
        {
            entity.Client = this;
        }
        
        private void DetachServicesToRecieve(Service entity)
        {
            entity.Client = null;
        }
        
        private bool FilterServicesToRecieve(Service entity)
        {
            return (entity.ClientId == this.Id);
        }
        
        private void AttachServiceTemplates(ServiceTemplate entity)
        {
            entity.OwnerClient = this;
        }
        
        private void DetachServiceTemplates(ServiceTemplate entity)
        {
            entity.OwnerClient = null;
        }
        
        private bool FilterServiceTemplates(ServiceTemplate entity)
        {
            return (entity.OwnerClientId == this.Id);
        }
        
        private bool FilterVendor(BusinessAccount entity)
        {
            return (entity.Id == this.VendorId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ClientTitle' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class ClientTitle : Entity
    {
        
        private EntityRef<Client> _client;
        
        private Nullable<Guid> _clientId;
        
        private EntityRef<Contact> _contact;
        
        private Guid _contactId;
        
        private Guid _id;
        
        private string _title;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Nullable<Guid> value);
        partial void OnClientIdChanged();
        partial void OnContactIdChanging(Guid value);
        partial void OnContactIdChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientTitle"/> class.
        /// </summary>
        public ClientTitle()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_ClientTitle", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.ClientTitles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Nullable<Guid>);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.ClientTitles.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Required(ErrorMessage="The Client is required")]
        public Nullable<Guid> ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_ClientTitle", "ContactId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    if ((previous != null))
                    {
                        this._contact.Entity = null;
                        previous.ClientTitles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ContactId = value.Id;
                    }
                    else
                    {
                        this.ContactId = default(Guid);
                    }
                    this._contact.Entity = value;
                    if ((value != null))
                    {
                        value.ClientTitles.Add(this);
                    }
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid ContactId
        {
            get
            {
                return this._contactId;
            }
            set
            {
                if ((this._contactId != value))
                {
                    this.OnContactIdChanging(value);
                    this.RaiseDataMemberChanging("ContactId");
                    this.ValidateProperty("ContactId", value);
                    this._contactId = value;
                    this.RaiseDataMemberChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.Id == this.ContactId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Contact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Contact : Entity
    {
        
        private EntityCollection<ClientTitle> _clientTitles;
        
        private Guid _id;
        
        private string _notes;
        
        private EntityRef<Person> _ownedPerson;
        
        private EntityRef<Party> _ownerParty;
        
        private Guid _ownerPartyId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnOwnerPartyIdChanging(Guid value);
        partial void OnOwnerPartyIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact"/> class.
        /// </summary>
        public Contact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ClientTitle"/> entity instances.
        /// </summary>
        [Association("Contact_ClientTitle", "Id", "ContactId")]
        [XmlIgnore()]
        public EntityCollection<ClientTitle> ClientTitles
        {
            get
            {
                if ((this._clientTitles == null))
                {
                    this._clientTitles = new EntityCollection<ClientTitle>(this, "ClientTitles", this.FilterClientTitles, this.AttachClientTitles, this.DetachClientTitles);
                }
                return this._clientTitles;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Person"/> entity.
        /// </summary>
        [Association("Person_Contact", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Person OwnedPerson
        {
            get
            {
                if ((this._ownedPerson == null))
                {
                    this._ownedPerson = new EntityRef<Person>(this, "OwnedPerson", this.FilterOwnedPerson);
                }
                return this._ownedPerson.Entity;
            }
            set
            {
                Person previous = this.OwnedPerson;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnedPerson", value);
                    if ((previous != null))
                    {
                        this._ownedPerson.Entity = null;
                        previous.OwnerContact = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._ownedPerson.Entity = value;
                    if ((value != null))
                    {
                        value.OwnerContact = this;
                    }
                    this.RaisePropertyChanged("OwnedPerson");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Contact", "OwnerPartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnerParty
        {
            get
            {
                if ((this._ownerParty == null))
                {
                    this._ownerParty = new EntityRef<Party>(this, "OwnerParty", this.FilterOwnerParty);
                }
                return this._ownerParty.Entity;
            }
            set
            {
                Party previous = this.OwnerParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerParty", value);
                    if ((previous != null))
                    {
                        this._ownerParty.Entity = null;
                        previous.Contacts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerPartyId = value.Id;
                    }
                    else
                    {
                        this.OwnerPartyId = default(Guid);
                    }
                    this._ownerParty.Entity = value;
                    if ((value != null))
                    {
                        value.Contacts.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerPartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid OwnerPartyId
        {
            get
            {
                return this._ownerPartyId;
            }
            set
            {
                if ((this._ownerPartyId != value))
                {
                    this.OnOwnerPartyIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerPartyId");
                    this.ValidateProperty("OwnerPartyId", value);
                    this._ownerPartyId = value;
                    this.RaiseDataMemberChanged("OwnerPartyId");
                    this.OnOwnerPartyIdChanged();
                }
            }
        }
        
        private void AttachClientTitles(ClientTitle entity)
        {
            entity.Contact = this;
        }
        
        private void DetachClientTitles(ClientTitle entity)
        {
            entity.Contact = null;
        }
        
        private bool FilterClientTitles(ClientTitle entity)
        {
            return (entity.ContactId == this.Id);
        }
        
        private bool FilterOwnedPerson(Person entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterOwnerParty(Party entity)
        {
            return (entity.Id == this.OwnerPartyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ContactInfo' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class ContactInfo : Entity
    {
        
        private Nullable<Guid> _contactId;
        
        private string _data;
        
        private Guid _id;
        
        private string _label;
        
        private EntityRef<Location> _location;
        
        private Nullable<Guid> _locationId;
        
        private EntityRef<Party> _party;
        
        private Nullable<Guid> _partyId;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactIdChanging(Nullable<Guid> value);
        partial void OnContactIdChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnPartyIdChanging(Nullable<Guid> value);
        partial void OnPartyIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactInfo"/> class.
        /// </summary>
        public ContactInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactId' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> ContactId
        {
            get
            {
                return this._contactId;
            }
            set
            {
                if ((this._contactId != value))
                {
                    this.OnContactIdChanging(value);
                    this.RaiseDataMemberChanging("ContactId");
                    this.ValidateProperty("ContactId", value);
                    this._contactId = value;
                    this.RaiseDataMemberChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Label' value.
        /// </summary>
        [DataMember()]
        public string Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    this.OnLabelChanging(value);
                    this.RaiseDataMemberChanging("Label");
                    this.ValidateProperty("Label", value);
                    this._label = value;
                    this.RaiseDataMemberChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_ContactInfo", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = new EntityRef<Location>(this, "Location", this.FilterLocation);
                }
                return this._location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if ((previous != value))
                {
                    this.ValidateProperty("Location", value);
                    if ((previous != null))
                    {
                        this._location.Entity = null;
                        previous.ContactInfoSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._location.Entity = value;
                    if ((value != null))
                    {
                        value.ContactInfoSet.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_ContactInfo", "PartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party Party
        {
            get
            {
                if ((this._party == null))
                {
                    this._party = new EntityRef<Party>(this, "Party", this.FilterParty);
                }
                return this._party.Entity;
            }
            set
            {
                Party previous = this.Party;
                if ((previous != value))
                {
                    this.ValidateProperty("Party", value);
                    if ((previous != null))
                    {
                        this._party.Entity = null;
                        previous.ContactInfoSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PartyId = value.Id;
                    }
                    else
                    {
                        this.PartyId = default(Nullable<Guid>);
                    }
                    this._party.Entity = value;
                    if ((value != null))
                    {
                        value.ContactInfoSet.Add(this);
                    }
                    this.RaisePropertyChanged("Party");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> PartyId
        {
            get
            {
                return this._partyId;
            }
            set
            {
                if ((this._partyId != value))
                {
                    this.OnPartyIdChanging(value);
                    this.RaiseDataMemberChanging("PartyId");
                    this.ValidateProperty("PartyId", value);
                    this._partyId = value;
                    this.RaiseDataMemberChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        private bool FilterParty(Party entity)
        {
            return (entity.Id == this.PartyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DateTimeField' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class DateTimeField : Field
    {
        
        private DateTime _earliest;
        
        private DateTime _latest;
        
        private short _typeInt;
        
        private Nullable<DateTime> _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEarliestChanging(DateTime value);
        partial void OnEarliestChanged();
        partial void OnLatestChanging(DateTime value);
        partial void OnLatestChanged();
        partial void OnTypeIntChanging(short value);
        partial void OnTypeIntChanged();
        partial void OnValueChanging(Nullable<DateTime> value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeField"/> class.
        /// </summary>
        public DateTimeField()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Earliest' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsTimeValueWithinEarliest' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsTimeValueWithinEarliest")]
        // 
        [DataMember()]
        public DateTime Earliest
        {
            get
            {
                return this._earliest;
            }
            set
            {
                if ((this._earliest != value))
                {
                    this.OnEarliestChanging(value);
                    this.RaiseDataMemberChanging("Earliest");
                    this.ValidateProperty("Earliest", value);
                    this._earliest = value;
                    this.RaiseDataMemberChanged("Earliest");
                    this.OnEarliestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latest' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsTimeValueWithinLatest' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsTimeValueWithinLatest")]
        // 
        [DataMember()]
        public DateTime Latest
        {
            get
            {
                return this._latest;
            }
            set
            {
                if ((this._latest != value))
                {
                    this.OnLatestChanging(value);
                    this.RaiseDataMemberChanging("Latest");
                    this.ValidateProperty("Latest", value);
                    this._latest = value;
                    this.RaiseDataMemberChanged("Latest");
                    this.OnLatestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeInt' value.
        /// </summary>
        [DataMember()]
        public short TypeInt
        {
            get
            {
                return this._typeInt;
            }
            set
            {
                if ((this._typeInt != value))
                {
                    this.OnTypeIntChanging(value);
                    this.RaiseDataMemberChanging("TypeInt");
                    this.ValidateProperty("TypeInt", value);
                    this._typeInt = value;
                    this.RaiseDataMemberChanged("TypeInt");
                    this.OnTypeIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsTimeValueValid' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsTimeValueValid")]
        // 
        [DataMember()]
        public Nullable<DateTime> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Employee : Entity
    {
        
        private string _addressLineOne;
        
        private string _addressLineTwo;
        
        private string _city;
        
        private string _comments;
        
        private EntityCollection<EmployeeHistoryEntry> _employeeHistoryEntries;
        
        private EntityRef<BusinessAccount> _employer;
        
        private Guid _employerId;
        
        private Nullable<DateTime> _hireDate;
        
        private Guid _id;
        
        private EntityRef<UserAccount> _linkedUserAccount;
        
        private Nullable<Guid> _linkedUserAccountId;
        
        private EntityRef<Person> _ownedPerson;
        
        private string _permissions;
        
        private EntityCollection<RouteEmployee> _routeEmployeeToRouteSet;
        
        private string _ssn;
        
        private string _state;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLineOneChanging(string value);
        partial void OnAddressLineOneChanged();
        partial void OnAddressLineTwoChanging(string value);
        partial void OnAddressLineTwoChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCommentsChanging(string value);
        partial void OnCommentsChanged();
        partial void OnEmployerIdChanging(Guid value);
        partial void OnEmployerIdChanged();
        partial void OnHireDateChanging(Nullable<DateTime> value);
        partial void OnHireDateChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLinkedUserAccountIdChanging(Nullable<Guid> value);
        partial void OnLinkedUserAccountIdChanged();
        partial void OnPermissionsChanging(string value);
        partial void OnPermissionsChanged();
        partial void OnSSNChanging(string value);
        partial void OnSSNChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineOne' value.
        /// </summary>
        [DataMember()]
        public string AddressLineOne
        {
            get
            {
                return this._addressLineOne;
            }
            set
            {
                if ((this._addressLineOne != value))
                {
                    this.OnAddressLineOneChanging(value);
                    this.RaiseDataMemberChanging("AddressLineOne");
                    this.ValidateProperty("AddressLineOne", value);
                    this._addressLineOne = value;
                    this.RaiseDataMemberChanged("AddressLineOne");
                    this.OnAddressLineOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineTwo' value.
        /// </summary>
        [DataMember()]
        public string AddressLineTwo
        {
            get
            {
                return this._addressLineTwo;
            }
            set
            {
                if ((this._addressLineTwo != value))
                {
                    this.OnAddressLineTwoChanging(value);
                    this.RaiseDataMemberChanging("AddressLineTwo");
                    this.ValidateProperty("AddressLineTwo", value);
                    this._addressLineTwo = value;
                    this.RaiseDataMemberChanged("AddressLineTwo");
                    this.OnAddressLineTwoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comments' value.
        /// </summary>
        [DataMember()]
        public string Comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                if ((this._comments != value))
                {
                    this.OnCommentsChanging(value);
                    this.RaiseDataMemberChanging("Comments");
                    this.ValidateProperty("Comments", value);
                    this._comments = value;
                    this.RaiseDataMemberChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="EmployeeHistoryEntry"/> entity instances.
        /// </summary>
        [Association("Employee_EmployeeHistoryEntry", "Id", "EmployeeId")]
        [XmlIgnore()]
        public EntityCollection<EmployeeHistoryEntry> EmployeeHistoryEntries
        {
            get
            {
                if ((this._employeeHistoryEntries == null))
                {
                    this._employeeHistoryEntries = new EntityCollection<EmployeeHistoryEntry>(this, "EmployeeHistoryEntries", this.FilterEmployeeHistoryEntries, this.AttachEmployeeHistoryEntries, this.DetachEmployeeHistoryEntries);
                }
                return this._employeeHistoryEntries;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Employee", "EmployerId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount Employer
        {
            get
            {
                if ((this._employer == null))
                {
                    this._employer = new EntityRef<BusinessAccount>(this, "Employer", this.FilterEmployer);
                }
                return this._employer.Entity;
            }
            set
            {
                BusinessAccount previous = this.Employer;
                if ((previous != value))
                {
                    this.ValidateProperty("Employer", value);
                    if ((previous != null))
                    {
                        this._employer.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployerId = value.Id;
                    }
                    else
                    {
                        this.EmployerId = default(Guid);
                    }
                    this._employer.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Employer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployerId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid EmployerId
        {
            get
            {
                return this._employerId;
            }
            set
            {
                if ((this._employerId != value))
                {
                    this.OnEmployerIdChanging(value);
                    this.RaiseDataMemberChanging("EmployerId");
                    this.ValidateProperty("EmployerId", value);
                    this._employerId = value;
                    this.RaiseDataMemberChanged("EmployerId");
                    this.OnEmployerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HireDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> HireDate
        {
            get
            {
                return this._hireDate;
            }
            set
            {
                if ((this._hireDate != value))
                {
                    this.OnHireDateChanging(value);
                    this.RaiseDataMemberChanging("HireDate");
                    this.ValidateProperty("HireDate", value);
                    this._hireDate = value;
                    this.RaiseDataMemberChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserAccount"/> entity.
        /// </summary>
        [Association("UserAccount_Employee", "LinkedUserAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UserAccount LinkedUserAccount
        {
            get
            {
                if ((this._linkedUserAccount == null))
                {
                    this._linkedUserAccount = new EntityRef<UserAccount>(this, "LinkedUserAccount", this.FilterLinkedUserAccount);
                }
                return this._linkedUserAccount.Entity;
            }
            set
            {
                UserAccount previous = this.LinkedUserAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("LinkedUserAccount", value);
                    if ((previous != null))
                    {
                        this._linkedUserAccount.Entity = null;
                        previous.OfEmployees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LinkedUserAccountId = value.Id;
                    }
                    else
                    {
                        this.LinkedUserAccountId = default(Nullable<Guid>);
                    }
                    this._linkedUserAccount.Entity = value;
                    if ((value != null))
                    {
                        value.OfEmployees.Add(this);
                    }
                    this.RaisePropertyChanged("LinkedUserAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LinkedUserAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LinkedUserAccountId
        {
            get
            {
                return this._linkedUserAccountId;
            }
            set
            {
                if ((this._linkedUserAccountId != value))
                {
                    this.OnLinkedUserAccountIdChanging(value);
                    this.RaiseDataMemberChanging("LinkedUserAccountId");
                    this.ValidateProperty("LinkedUserAccountId", value);
                    this._linkedUserAccountId = value;
                    this.RaiseDataMemberChanged("LinkedUserAccountId");
                    this.OnLinkedUserAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Person"/> entity.
        /// </summary>
        [Association("Person_Employee", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Person OwnedPerson
        {
            get
            {
                if ((this._ownedPerson == null))
                {
                    this._ownedPerson = new EntityRef<Person>(this, "OwnedPerson", this.FilterOwnedPerson);
                }
                return this._ownedPerson.Entity;
            }
            set
            {
                Person previous = this.OwnedPerson;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnedPerson", value);
                    if ((previous != null))
                    {
                        this._ownedPerson.Entity = null;
                        previous.OwnerEmployee = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._ownedPerson.Entity = value;
                    if ((value != null))
                    {
                        value.OwnerEmployee = this;
                    }
                    this.RaisePropertyChanged("OwnedPerson");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Permissions' value.
        /// </summary>
        [DataMember()]
        public string Permissions
        {
            get
            {
                return this._permissions;
            }
            set
            {
                if ((this._permissions != value))
                {
                    this.OnPermissionsChanging(value);
                    this.RaiseDataMemberChanging("Permissions");
                    this.ValidateProperty("Permissions", value);
                    this._permissions = value;
                    this.RaiseDataMemberChanged("Permissions");
                    this.OnPermissionsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteEmployee"/> entity instances.
        /// </summary>
        [Association("RouteEmployeeToEmployeeSet", "Id", "EmployeeId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RouteEmployee> RouteEmployeeToRouteSet
        {
            get
            {
                if ((this._routeEmployeeToRouteSet == null))
                {
                    this._routeEmployeeToRouteSet = new EntityCollection<RouteEmployee>(this, "RouteEmployeeToRouteSet", this.FilterRouteEmployeeToRouteSet, this.AttachRouteEmployeeToRouteSet, this.DetachRouteEmployeeToRouteSet);
                }
                return this._routeEmployeeToRouteSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SSN' value.
        /// </summary>
        [DataMember()]
        public string SSN
        {
            get
            {
                return this._ssn;
            }
            set
            {
                if ((this._ssn != value))
                {
                    this.OnSSNChanging(value);
                    this.RaiseDataMemberChanging("SSN");
                    this.ValidateProperty("SSN", value);
                    this._ssn = value;
                    this.RaiseDataMemberChanged("SSN");
                    this.OnSSNChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        private void AttachEmployeeHistoryEntries(EmployeeHistoryEntry entity)
        {
            entity.Employee = this;
        }
        
        private void DetachEmployeeHistoryEntries(EmployeeHistoryEntry entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterEmployeeHistoryEntries(EmployeeHistoryEntry entity)
        {
            return (entity.EmployeeId == this.Id);
        }
        
        private bool FilterEmployer(BusinessAccount entity)
        {
            return (entity.Id == this.EmployerId);
        }
        
        private bool FilterLinkedUserAccount(UserAccount entity)
        {
            return (entity.Id == this.LinkedUserAccountId);
        }
        
        private bool FilterOwnedPerson(Person entity)
        {
            return (entity.Id == this.Id);
        }
        
        private void AttachRouteEmployeeToRouteSet(RouteEmployee entity)
        {
            entity.Employee = this;
        }
        
        private void DetachRouteEmployeeToRouteSet(RouteEmployee entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterRouteEmployeeToRouteSet(RouteEmployee entity)
        {
            return (entity.EmployeeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'EmployeeHistoryEntry' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class EmployeeHistoryEntry : Entity
    {
        
        private Nullable<DateTime> _date;
        
        private EntityRef<Employee> _employee;
        
        private Guid _employeeId;
        
        private Guid _id;
        
        private string _notes;
        
        private string _summary;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnEmployeeIdChanging(Guid value);
        partial void OnEmployeeIdChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnSummaryChanging(string value);
        partial void OnSummaryChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeHistoryEntry"/> class.
        /// </summary>
        public EmployeeHistoryEntry()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_EmployeeHistoryEntry", "EmployeeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.EmployeeHistoryEntries.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeId = value.Id;
                    }
                    else
                    {
                        this.EmployeeId = default(Guid);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.EmployeeHistoryEntries.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid EmployeeId
        {
            get
            {
                return this._employeeId;
            }
            set
            {
                if ((this._employeeId != value))
                {
                    this.OnEmployeeIdChanging(value);
                    this.RaiseDataMemberChanging("EmployeeId");
                    this.ValidateProperty("EmployeeId", value);
                    this._employeeId = value;
                    this.RaiseDataMemberChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Summary' value.
        /// </summary>
        [DataMember()]
        public string Summary
        {
            get
            {
                return this._summary;
            }
            set
            {
                if ((this._summary != value))
                {
                    this.OnSummaryChanging(value);
                    this.RaiseDataMemberChanging("Summary");
                    this.ValidateProperty("Summary", value);
                    this._summary = value;
                    this.RaiseDataMemberChanged("Summary");
                    this.OnSummaryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.Id == this.EmployeeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Field' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    [KnownType(typeof(DateTimeField))]
    [KnownType(typeof(LocationField))]
    [KnownType(typeof(NumericField))]
    [KnownType(typeof(OptionsField))]
    [KnownType(typeof(TextBoxField))]
    public partial class Field : Entity
    {
        
        private EntityCollection<Field> _childrenFields;
        
        private string _group;
        
        private Guid _id;
        
        private string _name;
        
        private EntityRef<ServiceTemplate> _ownerServiceTemplate;
        
        private EntityRef<Field> _parentField;
        
        private Nullable<Guid> _parentFieldId;
        
        private bool _required;
        
        private Nullable<Guid> _serviceTemplateId;
        
        private string _tooltip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGroupChanging(string value);
        partial void OnGroupChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentFieldIdChanging(Nullable<Guid> value);
        partial void OnParentFieldIdChanged();
        partial void OnRequiredChanging(bool value);
        partial void OnRequiredChanged();
        partial void OnServiceTemplateIdChanging(Nullable<Guid> value);
        partial void OnServiceTemplateIdChanged();
        partial void OnTooltipChanging(string value);
        partial void OnTooltipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Field"/> class.
        /// </summary>
        public Field()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Field"/> entity instances.
        /// </summary>
        [Association("Field_Field", "Id", "ParentFieldId")]
        [XmlIgnore()]
        public EntityCollection<Field> ChildrenFields
        {
            get
            {
                if ((this._childrenFields == null))
                {
                    this._childrenFields = new EntityCollection<Field>(this, "ChildrenFields", this.FilterChildrenFields, this.AttachChildrenFields, this.DetachChildrenFields);
                }
                return this._childrenFields;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Group' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Group
        {
            get
            {
                return this._group;
            }
            set
            {
                if ((this._group != value))
                {
                    this.OnGroupChanging(value);
                    this.RaiseDataMemberChanging("Group");
                    this.ValidateProperty("Group", value);
                    this._group = value;
                    this.RaiseDataMemberChanged("Group");
                    this.OnGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ServiceTemplate"/> entity.
        /// </summary>
        [Association("ServiceTemplate_Field", "ServiceTemplateId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public ServiceTemplate OwnerServiceTemplate
        {
            get
            {
                if ((this._ownerServiceTemplate == null))
                {
                    this._ownerServiceTemplate = new EntityRef<ServiceTemplate>(this, "OwnerServiceTemplate", this.FilterOwnerServiceTemplate);
                }
                return this._ownerServiceTemplate.Entity;
            }
            set
            {
                ServiceTemplate previous = this.OwnerServiceTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerServiceTemplate", value);
                    if ((previous != null))
                    {
                        this._ownerServiceTemplate.Entity = null;
                        previous.Fields.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ServiceTemplateId = value.Id;
                    }
                    else
                    {
                        this.ServiceTemplateId = default(Nullable<Guid>);
                    }
                    this._ownerServiceTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.Fields.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerServiceTemplate");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Field"/> entity.
        /// </summary>
        [Association("Field_Field", "ParentFieldId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Field ParentField
        {
            get
            {
                if ((this._parentField == null))
                {
                    this._parentField = new EntityRef<Field>(this, "ParentField", this.FilterParentField);
                }
                return this._parentField.Entity;
            }
            set
            {
                Field previous = this.ParentField;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentField", value);
                    if ((previous != null))
                    {
                        this._parentField.Entity = null;
                        previous.ChildrenFields.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentFieldId = value.Id;
                    }
                    else
                    {
                        this.ParentFieldId = default(Nullable<Guid>);
                    }
                    this._parentField.Entity = value;
                    if ((value != null))
                    {
                        value.ChildrenFields.Add(this);
                    }
                    this.RaisePropertyChanged("ParentField");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentFieldId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ParentFieldId
        {
            get
            {
                return this._parentFieldId;
            }
            set
            {
                if ((this._parentFieldId != value))
                {
                    this.OnParentFieldIdChanging(value);
                    this.RaiseDataMemberChanging("ParentFieldId");
                    this.ValidateProperty("ParentFieldId", value);
                    this._parentFieldId = value;
                    this.RaiseDataMemberChanged("ParentFieldId");
                    this.OnParentFieldIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Required' value.
        /// </summary>
        [DataMember()]
        public bool Required
        {
            get
            {
                return this._required;
            }
            set
            {
                if ((this._required != value))
                {
                    this.OnRequiredChanging(value);
                    this.RaiseDataMemberChanging("Required");
                    this.ValidateProperty("Required", value);
                    this._required = value;
                    this.RaiseDataMemberChanged("Required");
                    this.OnRequiredChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServiceTemplateId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ServiceTemplateId
        {
            get
            {
                return this._serviceTemplateId;
            }
            set
            {
                if ((this._serviceTemplateId != value))
                {
                    this.OnServiceTemplateIdChanging(value);
                    this.RaiseDataMemberChanging("ServiceTemplateId");
                    this.ValidateProperty("ServiceTemplateId", value);
                    this._serviceTemplateId = value;
                    this.RaiseDataMemberChanged("ServiceTemplateId");
                    this.OnServiceTemplateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tooltip' value.
        /// </summary>
        [DataMember()]
        public string Tooltip
        {
            get
            {
                return this._tooltip;
            }
            set
            {
                if ((this._tooltip != value))
                {
                    this.OnTooltipChanging(value);
                    this.RaiseDataMemberChanging("Tooltip");
                    this.ValidateProperty("Tooltip", value);
                    this._tooltip = value;
                    this.RaiseDataMemberChanged("Tooltip");
                    this.OnTooltipChanged();
                }
            }
        }
        
        private void AttachChildrenFields(Field entity)
        {
            entity.ParentField = this;
        }
        
        private void DetachChildrenFields(Field entity)
        {
            entity.ParentField = null;
        }
        
        private bool FilterChildrenFields(Field entity)
        {
            return (entity.ParentFieldId == this.Id);
        }
        
        private bool FilterOwnerServiceTemplate(ServiceTemplate entity)
        {
            return (entity.Id == this.ServiceTemplateId);
        }
        
        private bool FilterParentField(Field entity)
        {
            return (entity.Id == this.ParentFieldId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'File' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    [KnownType(typeof(PartyImage))]
    public partial class File : Entity
    {
        
        private byte _data;
        
        private Guid _id;
        
        private EntityRef<Location> _location;
        
        private Nullable<Guid> _locationId;
        
        private string _name;
        
        private EntityRef<Party> _ownerParty;
        
        private Guid _partyId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(byte value);
        partial void OnDataChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPartyIdChanging(Guid value);
        partial void OnPartyIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="File"/> class.
        /// </summary>
        public File()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public byte Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_File", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = new EntityRef<Location>(this, "Location", this.FilterLocation);
                }
                return this._location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if ((previous != value))
                {
                    this.ValidateProperty("Location", value);
                    if ((previous != null))
                    {
                        this._location.Entity = null;
                        previous.Files.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._location.Entity = value;
                    if ((value != null))
                    {
                        value.Files.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_File", "PartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnerParty
        {
            get
            {
                if ((this._ownerParty == null))
                {
                    this._ownerParty = new EntityRef<Party>(this, "OwnerParty", this.FilterOwnerParty);
                }
                return this._ownerParty.Entity;
            }
            set
            {
                Party previous = this.OwnerParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerParty", value);
                    if ((previous != null))
                    {
                        this._ownerParty.Entity = null;
                        previous.OwnedFiles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PartyId = value.Id;
                    }
                    else
                    {
                        this.PartyId = default(Guid);
                    }
                    this._ownerParty.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedFiles.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid PartyId
        {
            get
            {
                return this._partyId;
            }
            set
            {
                if ((this._partyId != value))
                {
                    this.OnPartyIdChanging(value);
                    this.RaiseDataMemberChanging("PartyId");
                    this.ValidateProperty("PartyId", value);
                    this._partyId = value;
                    this.RaiseDataMemberChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }
        
        private bool FilterLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        private bool FilterOwnerParty(Party entity)
        {
            return (entity.Id == this.PartyId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Invoice' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Invoice : Entity
    {
        
        private EntityRef<Location> _billToLocation;
        
        private EntityRef<BusinessAccount> _businessAccount;
        
        private Nullable<Guid> _businessAccountId;
        
        private EntityRef<Client> _client;
        
        private Nullable<Guid> _clientId;
        
        private string _createTime;
        
        private string _customerId;
        
        private Nullable<DateTime> _dueDate;
        
        private Nullable<int> _fixedScheduleOptionInt;
        
        private Guid _id;
        
        private bool _isBillToLocationChanged;
        
        private bool _isDueDateChanged;
        
        private bool _isMemoChanged;
        
        private bool _isSalesTermChanged;
        
        private string _lastUpdatedTime;
        
        private EntityCollection<LineItem> _lineItems;
        
        private Nullable<Guid> _locationId;
        
        private string _memo;
        
        private string _quickBooksId;
        
        private Nullable<int> _relativeScheduleDays;
        
        private EntityRef<SalesTerm> _salesTerm;
        
        private Nullable<Guid> _salesTermId;
        
        private int _scheduleModeInt;
        
        private EntityRef<ServiceTemplate> _serviceTemplate;
        
        private string _syncToken;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessAccountIdChanging(Nullable<Guid> value);
        partial void OnBusinessAccountIdChanged();
        partial void OnClientIdChanging(Nullable<Guid> value);
        partial void OnClientIdChanged();
        partial void OnCreateTimeChanging(string value);
        partial void OnCreateTimeChanged();
        partial void OnCustomerIdChanging(string value);
        partial void OnCustomerIdChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnFixedScheduleOptionIntChanging(Nullable<int> value);
        partial void OnFixedScheduleOptionIntChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIsBillToLocationChangedChanging(bool value);
        partial void OnIsBillToLocationChangedChanged();
        partial void OnIsDueDateChangedChanging(bool value);
        partial void OnIsDueDateChangedChanged();
        partial void OnIsMemoChangedChanging(bool value);
        partial void OnIsMemoChangedChanged();
        partial void OnIsSalesTermChangedChanging(bool value);
        partial void OnIsSalesTermChangedChanged();
        partial void OnLastUpdatedTimeChanging(string value);
        partial void OnLastUpdatedTimeChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnMemoChanging(string value);
        partial void OnMemoChanged();
        partial void OnQuickBooksIdChanging(string value);
        partial void OnQuickBooksIdChanged();
        partial void OnRelativeScheduleDaysChanging(Nullable<int> value);
        partial void OnRelativeScheduleDaysChanged();
        partial void OnSalesTermIdChanging(Nullable<Guid> value);
        partial void OnSalesTermIdChanged();
        partial void OnScheduleModeIntChanging(int value);
        partial void OnScheduleModeIntChanged();
        partial void OnSyncTokenChanging(string value);
        partial void OnSyncTokenChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice"/> class.
        /// </summary>
        public Invoice()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_Invoice", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location BillToLocation
        {
            get
            {
                if ((this._billToLocation == null))
                {
                    this._billToLocation = new EntityRef<Location>(this, "BillToLocation", this.FilterBillToLocation);
                }
                return this._billToLocation.Entity;
            }
            set
            {
                Location previous = this.BillToLocation;
                if ((previous != value))
                {
                    this.ValidateProperty("BillToLocation", value);
                    if ((previous != null))
                    {
                        this._billToLocation.Entity = null;
                        previous.Invoices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._billToLocation.Entity = value;
                    if ((value != null))
                    {
                        value.Invoices.Add(this);
                    }
                    this.RaisePropertyChanged("BillToLocation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Invoice", "BusinessAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount BusinessAccount
        {
            get
            {
                if ((this._businessAccount == null))
                {
                    this._businessAccount = new EntityRef<BusinessAccount>(this, "BusinessAccount", this.FilterBusinessAccount);
                }
                return this._businessAccount.Entity;
            }
            set
            {
                BusinessAccount previous = this.BusinessAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("BusinessAccount", value);
                    if ((previous != null))
                    {
                        this._businessAccount.Entity = null;
                        previous.Invoices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessAccountId = value.Id;
                    }
                    else
                    {
                        this.BusinessAccountId = default(Nullable<Guid>);
                    }
                    this._businessAccount.Entity = value;
                    if ((value != null))
                    {
                        value.Invoices.Add(this);
                    }
                    this.RaisePropertyChanged("BusinessAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> BusinessAccountId
        {
            get
            {
                return this._businessAccountId;
            }
            set
            {
                if ((this._businessAccountId != value))
                {
                    this.OnBusinessAccountIdChanging(value);
                    this.RaiseDataMemberChanging("BusinessAccountId");
                    this.ValidateProperty("BusinessAccountId", value);
                    this._businessAccountId = value;
                    this.RaiseDataMemberChanged("BusinessAccountId");
                    this.OnBusinessAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_Invoice", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.Invoices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Nullable<Guid>);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.Invoices.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateTime' value.
        /// </summary>
        [DataMember()]
        public string CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerId' value.
        /// </summary>
        [DataMember()]
        public string CustomerId
        {
            get
            {
                return this._customerId;
            }
            set
            {
                if ((this._customerId != value))
                {
                    this.OnCustomerIdChanging(value);
                    this.RaiseDataMemberChanging("CustomerId");
                    this.ValidateProperty("CustomerId", value);
                    this._customerId = value;
                    this.RaiseDataMemberChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FixedScheduleOptionInt' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> FixedScheduleOptionInt
        {
            get
            {
                return this._fixedScheduleOptionInt;
            }
            set
            {
                if ((this._fixedScheduleOptionInt != value))
                {
                    this.OnFixedScheduleOptionIntChanging(value);
                    this.RaiseDataMemberChanging("FixedScheduleOptionInt");
                    this.ValidateProperty("FixedScheduleOptionInt", value);
                    this._fixedScheduleOptionInt = value;
                    this.RaiseDataMemberChanged("FixedScheduleOptionInt");
                    this.OnFixedScheduleOptionIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsBillToLocationChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsBillToLocationChanged
        {
            get
            {
                return this._isBillToLocationChanged;
            }
            set
            {
                if ((this._isBillToLocationChanged != value))
                {
                    this.OnIsBillToLocationChangedChanging(value);
                    this.RaiseDataMemberChanging("IsBillToLocationChanged");
                    this.ValidateProperty("IsBillToLocationChanged", value);
                    this._isBillToLocationChanged = value;
                    this.RaiseDataMemberChanged("IsBillToLocationChanged");
                    this.OnIsBillToLocationChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDueDateChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsDueDateChanged
        {
            get
            {
                return this._isDueDateChanged;
            }
            set
            {
                if ((this._isDueDateChanged != value))
                {
                    this.OnIsDueDateChangedChanging(value);
                    this.RaiseDataMemberChanging("IsDueDateChanged");
                    this.ValidateProperty("IsDueDateChanged", value);
                    this._isDueDateChanged = value;
                    this.RaiseDataMemberChanged("IsDueDateChanged");
                    this.OnIsDueDateChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMemoChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsMemoChanged
        {
            get
            {
                return this._isMemoChanged;
            }
            set
            {
                if ((this._isMemoChanged != value))
                {
                    this.OnIsMemoChangedChanging(value);
                    this.RaiseDataMemberChanging("IsMemoChanged");
                    this.ValidateProperty("IsMemoChanged", value);
                    this._isMemoChanged = value;
                    this.RaiseDataMemberChanged("IsMemoChanged");
                    this.OnIsMemoChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSalesTermChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsSalesTermChanged
        {
            get
            {
                return this._isSalesTermChanged;
            }
            set
            {
                if ((this._isSalesTermChanged != value))
                {
                    this.OnIsSalesTermChangedChanging(value);
                    this.RaiseDataMemberChanging("IsSalesTermChanged");
                    this.ValidateProperty("IsSalesTermChanged", value);
                    this._isSalesTermChanged = value;
                    this.RaiseDataMemberChanged("IsSalesTermChanged");
                    this.OnIsSalesTermChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdatedTime' value.
        /// </summary>
        [DataMember()]
        public string LastUpdatedTime
        {
            get
            {
                return this._lastUpdatedTime;
            }
            set
            {
                if ((this._lastUpdatedTime != value))
                {
                    this.OnLastUpdatedTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedTime");
                    this.ValidateProperty("LastUpdatedTime", value);
                    this._lastUpdatedTime = value;
                    this.RaiseDataMemberChanged("LastUpdatedTime");
                    this.OnLastUpdatedTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="LineItem"/> entity instances.
        /// </summary>
        [Association("Invoice_LineItem", "Id", "InvoiceId")]
        [XmlIgnore()]
        public EntityCollection<LineItem> LineItems
        {
            get
            {
                if ((this._lineItems == null))
                {
                    this._lineItems = new EntityCollection<LineItem>(this, "LineItems", this.FilterLineItems, this.AttachLineItems, this.DetachLineItems);
                }
                return this._lineItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Memo' value.
        /// </summary>
        [DataMember()]
        public string Memo
        {
            get
            {
                return this._memo;
            }
            set
            {
                if ((this._memo != value))
                {
                    this.OnMemoChanging(value);
                    this.RaiseDataMemberChanging("Memo");
                    this.ValidateProperty("Memo", value);
                    this._memo = value;
                    this.RaiseDataMemberChanged("Memo");
                    this.OnMemoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksId' value.
        /// </summary>
        [DataMember()]
        public string QuickBooksId
        {
            get
            {
                return this._quickBooksId;
            }
            set
            {
                if ((this._quickBooksId != value))
                {
                    this.OnQuickBooksIdChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksId");
                    this.ValidateProperty("QuickBooksId", value);
                    this._quickBooksId = value;
                    this.RaiseDataMemberChanged("QuickBooksId");
                    this.OnQuickBooksIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelativeScheduleDays' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> RelativeScheduleDays
        {
            get
            {
                return this._relativeScheduleDays;
            }
            set
            {
                if ((this._relativeScheduleDays != value))
                {
                    this.OnRelativeScheduleDaysChanging(value);
                    this.RaiseDataMemberChanging("RelativeScheduleDays");
                    this.ValidateProperty("RelativeScheduleDays", value);
                    this._relativeScheduleDays = value;
                    this.RaiseDataMemberChanged("RelativeScheduleDays");
                    this.OnRelativeScheduleDaysChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SalesTerm"/> entity.
        /// </summary>
        [Association("SalesTerm_Invoice", "SalesTermId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SalesTerm SalesTerm
        {
            get
            {
                if ((this._salesTerm == null))
                {
                    this._salesTerm = new EntityRef<SalesTerm>(this, "SalesTerm", this.FilterSalesTerm);
                }
                return this._salesTerm.Entity;
            }
            set
            {
                SalesTerm previous = this.SalesTerm;
                if ((previous != value))
                {
                    this.ValidateProperty("SalesTerm", value);
                    if ((previous != null))
                    {
                        this._salesTerm.Entity = null;
                        previous.Invoices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SalesTermId = value.Id;
                    }
                    else
                    {
                        this.SalesTermId = default(Nullable<Guid>);
                    }
                    this._salesTerm.Entity = value;
                    if ((value != null))
                    {
                        value.Invoices.Add(this);
                    }
                    this.RaisePropertyChanged("SalesTerm");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesTermId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> SalesTermId
        {
            get
            {
                return this._salesTermId;
            }
            set
            {
                if ((this._salesTermId != value))
                {
                    this.OnSalesTermIdChanging(value);
                    this.RaiseDataMemberChanging("SalesTermId");
                    this.ValidateProperty("SalesTermId", value);
                    this._salesTermId = value;
                    this.RaiseDataMemberChanged("SalesTermId");
                    this.OnSalesTermIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScheduleModeInt' value.
        /// </summary>
        [DataMember()]
        public int ScheduleModeInt
        {
            get
            {
                return this._scheduleModeInt;
            }
            set
            {
                if ((this._scheduleModeInt != value))
                {
                    this.OnScheduleModeIntChanging(value);
                    this.RaiseDataMemberChanging("ScheduleModeInt");
                    this.ValidateProperty("ScheduleModeInt", value);
                    this._scheduleModeInt = value;
                    this.RaiseDataMemberChanged("ScheduleModeInt");
                    this.OnScheduleModeIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ServiceTemplate"/> entity.
        /// </summary>
        [Association("ServiceTemplate_Invoice", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public ServiceTemplate ServiceTemplate
        {
            get
            {
                if ((this._serviceTemplate == null))
                {
                    this._serviceTemplate = new EntityRef<ServiceTemplate>(this, "ServiceTemplate", this.FilterServiceTemplate);
                }
                return this._serviceTemplate.Entity;
            }
            set
            {
                ServiceTemplate previous = this.ServiceTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("ServiceTemplate", value);
                    if ((previous != null))
                    {
                        this._serviceTemplate.Entity = null;
                        previous.Invoice = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._serviceTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.Invoice = this;
                    }
                    this.RaisePropertyChanged("ServiceTemplate");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SyncToken' value.
        /// </summary>
        [DataMember()]
        public string SyncToken
        {
            get
            {
                return this._syncToken;
            }
            set
            {
                if ((this._syncToken != value))
                {
                    this.OnSyncTokenChanging(value);
                    this.RaiseDataMemberChanging("SyncToken");
                    this.ValidateProperty("SyncToken", value);
                    this._syncToken = value;
                    this.RaiseDataMemberChanged("SyncToken");
                    this.OnSyncTokenChanged();
                }
            }
        }
        
        private bool FilterBillToLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        private bool FilterBusinessAccount(BusinessAccount entity)
        {
            return (entity.Id == this.BusinessAccountId);
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private void AttachLineItems(LineItem entity)
        {
            entity.Invoice = this;
        }
        
        private void DetachLineItems(LineItem entity)
        {
            entity.Invoice = null;
        }
        
        private bool FilterLineItems(LineItem entity)
        {
            return (entity.InvoiceId == this.Id);
        }
        
        private bool FilterSalesTerm(SalesTerm entity)
        {
            return (entity.Id == this.SalesTermId);
        }
        
        private bool FilterServiceTemplate(ServiceTemplate entity)
        {
            return (entity.Id == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'LineItem' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class LineItem : Entity
    {
        
        private string _amount;
        
        private string _description;
        
        private Guid _id;
        
        private EntityRef<Invoice> _invoice;
        
        private Guid _invoiceId;
        
        private bool _isAmountChanged;
        
        private bool _isDescriptionChanged;
        
        private string _quickBooksId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(string value);
        partial void OnAmountChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnInvoiceIdChanging(Guid value);
        partial void OnInvoiceIdChanged();
        partial void OnIsAmountChangedChanging(bool value);
        partial void OnIsAmountChangedChanged();
        partial void OnIsDescriptionChangedChanging(bool value);
        partial void OnIsDescriptionChangedChanged();
        partial void OnQuickBooksIdChanging(string value);
        partial void OnQuickBooksIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem"/> class.
        /// </summary>
        public LineItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public string Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Invoice"/> entity.
        /// </summary>
        [Association("Invoice_LineItem", "InvoiceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Invoice Invoice
        {
            get
            {
                if ((this._invoice == null))
                {
                    this._invoice = new EntityRef<Invoice>(this, "Invoice", this.FilterInvoice);
                }
                return this._invoice.Entity;
            }
            set
            {
                Invoice previous = this.Invoice;
                if ((previous != value))
                {
                    this.ValidateProperty("Invoice", value);
                    if ((previous != null))
                    {
                        this._invoice.Entity = null;
                        previous.LineItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InvoiceId = value.Id;
                    }
                    else
                    {
                        this.InvoiceId = default(Guid);
                    }
                    this._invoice.Entity = value;
                    if ((value != null))
                    {
                        value.LineItems.Add(this);
                    }
                    this.RaisePropertyChanged("Invoice");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InvoiceId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid InvoiceId
        {
            get
            {
                return this._invoiceId;
            }
            set
            {
                if ((this._invoiceId != value))
                {
                    this.OnInvoiceIdChanging(value);
                    this.RaiseDataMemberChanging("InvoiceId");
                    this.ValidateProperty("InvoiceId", value);
                    this._invoiceId = value;
                    this.RaiseDataMemberChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAmountChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsAmountChanged
        {
            get
            {
                return this._isAmountChanged;
            }
            set
            {
                if ((this._isAmountChanged != value))
                {
                    this.OnIsAmountChangedChanging(value);
                    this.RaiseDataMemberChanging("IsAmountChanged");
                    this.ValidateProperty("IsAmountChanged", value);
                    this._isAmountChanged = value;
                    this.RaiseDataMemberChanged("IsAmountChanged");
                    this.OnIsAmountChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDescriptionChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsDescriptionChanged
        {
            get
            {
                return this._isDescriptionChanged;
            }
            set
            {
                if ((this._isDescriptionChanged != value))
                {
                    this.OnIsDescriptionChangedChanging(value);
                    this.RaiseDataMemberChanging("IsDescriptionChanged");
                    this.ValidateProperty("IsDescriptionChanged", value);
                    this._isDescriptionChanged = value;
                    this.RaiseDataMemberChanged("IsDescriptionChanged");
                    this.OnIsDescriptionChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksId' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string QuickBooksId
        {
            get
            {
                return this._quickBooksId;
            }
            set
            {
                if ((this._quickBooksId != value))
                {
                    this.OnQuickBooksIdChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksId");
                    this.ValidateProperty("QuickBooksId", value);
                    this._quickBooksId = value;
                    this.RaiseDataMemberChanged("QuickBooksId");
                    this.OnQuickBooksIdChanged();
                }
            }
        }
        
        private bool FilterInvoice(Invoice entity)
        {
            return (entity.Id == this.InvoiceId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Location' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Location : Entity
    {
        
        private string _addressLineOne;
        
        private string _addressLineTwo;
        
        private string _city;
        
        private EntityCollection<ContactInfo> _contactInfoSet;
        
        private EntityCollection<File> _files;
        
        private Guid _id;
        
        private EntityCollection<Invoice> _invoices;
        
        private Nullable<decimal> _latitude;
        
        private EntityCollection<LocationField> _locationFieldsWhereValue;
        
        private Nullable<decimal> _longitude;
        
        private string _name;
        
        private EntityRef<Party> _ownerParty;
        
        private Nullable<Guid> _ownerPartyId;
        
        private EntityRef<Party> _party;
        
        private Nullable<Guid> _partyId;
        
        private EntityRef<Region> _region;
        
        private Nullable<Guid> _regionId;
        
        private EntityCollection<RouteDestination> _routeDestinations;
        
        private EntityCollection<RouteTask> _routeTasks;
        
        private string _state;
        
        private EntityCollection<SubLocation> _subLocations;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressLineOneChanging(string value);
        partial void OnAddressLineOneChanged();
        partial void OnAddressLineTwoChanging(string value);
        partial void OnAddressLineTwoChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLatitudeChanging(Nullable<decimal> value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(Nullable<decimal> value);
        partial void OnLongitudeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOwnerPartyIdChanging(Nullable<Guid> value);
        partial void OnOwnerPartyIdChanged();
        partial void OnPartyIdChanging(Nullable<Guid> value);
        partial void OnPartyIdChanged();
        partial void OnRegionIdChanging(Nullable<Guid> value);
        partial void OnRegionIdChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Location"/> class.
        /// </summary>
        public Location()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineOne' value.
        /// </summary>
        [DataMember()]
        public string AddressLineOne
        {
            get
            {
                return this._addressLineOne;
            }
            set
            {
                if ((this._addressLineOne != value))
                {
                    this.OnAddressLineOneChanging(value);
                    this.RaiseDataMemberChanging("AddressLineOne");
                    this.ValidateProperty("AddressLineOne", value);
                    this._addressLineOne = value;
                    this.RaiseDataMemberChanged("AddressLineOne");
                    this.OnAddressLineOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressLineTwo' value.
        /// </summary>
        [DataMember()]
        public string AddressLineTwo
        {
            get
            {
                return this._addressLineTwo;
            }
            set
            {
                if ((this._addressLineTwo != value))
                {
                    this.OnAddressLineTwoChanging(value);
                    this.RaiseDataMemberChanging("AddressLineTwo");
                    this.ValidateProperty("AddressLineTwo", value);
                    this._addressLineTwo = value;
                    this.RaiseDataMemberChanged("AddressLineTwo");
                    this.OnAddressLineTwoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ContactInfo"/> entity instances.
        /// </summary>
        [Association("Location_ContactInfo", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<ContactInfo> ContactInfoSet
        {
            get
            {
                if ((this._contactInfoSet == null))
                {
                    this._contactInfoSet = new EntityCollection<ContactInfo>(this, "ContactInfoSet", this.FilterContactInfoSet, this.AttachContactInfoSet, this.DetachContactInfoSet);
                }
                return this._contactInfoSet;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="File"/> entity instances.
        /// </summary>
        [Association("Location_File", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<File> Files
        {
            get
            {
                if ((this._files == null))
                {
                    this._files = new EntityCollection<File>(this, "Files", this.FilterFiles, this.AttachFiles, this.DetachFiles);
                }
                return this._files;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Invoice"/> entity instances.
        /// </summary>
        [Association("Location_Invoice", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<Invoice> Invoices
        {
            get
            {
                if ((this._invoices == null))
                {
                    this._invoices = new EntityCollection<Invoice>(this, "Invoices", this.FilterInvoices, this.AttachInvoices, this.DetachInvoices);
                }
                return this._invoices;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="LocationField"/> entity instances.
        /// </summary>
        [Association("Location_LocationField", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<LocationField> LocationFieldsWhereValue
        {
            get
            {
                if ((this._locationFieldsWhereValue == null))
                {
                    this._locationFieldsWhereValue = new EntityCollection<LocationField>(this, "LocationFieldsWhereValue", this.FilterLocationFieldsWhereValue, this.AttachLocationFieldsWhereValue, this.DetachLocationFieldsWhereValue);
                }
                return this._locationFieldsWhereValue;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Location", "OwnerPartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnerParty
        {
            get
            {
                if ((this._ownerParty == null))
                {
                    this._ownerParty = new EntityRef<Party>(this, "OwnerParty", this.FilterOwnerParty);
                }
                return this._ownerParty.Entity;
            }
            set
            {
                Party previous = this.OwnerParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerParty", value);
                    if ((previous != null))
                    {
                        this._ownerParty.Entity = null;
                        previous.OwnedLocations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerPartyId = value.Id;
                    }
                    else
                    {
                        this.OwnerPartyId = default(Nullable<Guid>);
                    }
                    this._ownerParty.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedLocations.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerPartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> OwnerPartyId
        {
            get
            {
                return this._ownerPartyId;
            }
            set
            {
                if ((this._ownerPartyId != value))
                {
                    this.OnOwnerPartyIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerPartyId");
                    this.ValidateProperty("OwnerPartyId", value);
                    this._ownerPartyId = value;
                    this.RaiseDataMemberChanged("OwnerPartyId");
                    this.OnOwnerPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Location1", "PartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party Party
        {
            get
            {
                if ((this._party == null))
                {
                    this._party = new EntityRef<Party>(this, "Party", this.FilterParty);
                }
                return this._party.Entity;
            }
            set
            {
                Party previous = this.Party;
                if ((previous != value))
                {
                    this.ValidateProperty("Party", value);
                    if ((previous != null))
                    {
                        this._party.Entity = null;
                        previous.Locations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PartyId = value.Id;
                    }
                    else
                    {
                        this.PartyId = default(Nullable<Guid>);
                    }
                    this._party.Entity = value;
                    if ((value != null))
                    {
                        value.Locations.Add(this);
                    }
                    this.RaisePropertyChanged("Party");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> PartyId
        {
            get
            {
                return this._partyId;
            }
            set
            {
                if ((this._partyId != value))
                {
                    this.OnPartyIdChanging(value);
                    this.RaiseDataMemberChanging("PartyId");
                    this.ValidateProperty("PartyId", value);
                    this._partyId = value;
                    this.RaiseDataMemberChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Region"/> entity.
        /// </summary>
        [Association("Region_Location", "RegionId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Locations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionId = value.Id;
                    }
                    else
                    {
                        this.RegionId = default(Nullable<Guid>);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Locations.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteDestination"/> entity instances.
        /// </summary>
        [Association("Location_RouteDestination", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<RouteDestination> RouteDestinations
        {
            get
            {
                if ((this._routeDestinations == null))
                {
                    this._routeDestinations = new EntityCollection<RouteDestination>(this, "RouteDestinations", this.FilterRouteDestinations, this.AttachRouteDestinations, this.DetachRouteDestinations);
                }
                return this._routeDestinations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteTask"/> entity instances.
        /// </summary>
        [Association("Location_RouteTask", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<RouteTask> RouteTasks
        {
            get
            {
                if ((this._routeTasks == null))
                {
                    this._routeTasks = new EntityCollection<RouteTask>(this, "RouteTasks", this.FilterRouteTasks, this.AttachRouteTasks, this.DetachRouteTasks);
                }
                return this._routeTasks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SubLocation"/> entity instances.
        /// </summary>
        [Association("Location_SubLocation", "Id", "LocationId")]
        [XmlIgnore()]
        public EntityCollection<SubLocation> SubLocations
        {
            get
            {
                if ((this._subLocations == null))
                {
                    this._subLocations = new EntityCollection<SubLocation>(this, "SubLocations", this.FilterSubLocations, this.AttachSubLocations, this.DetachSubLocations);
                }
                return this._subLocations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        private void AttachContactInfoSet(ContactInfo entity)
        {
            entity.Location = this;
        }
        
        private void DetachContactInfoSet(ContactInfo entity)
        {
            entity.Location = null;
        }
        
        private bool FilterContactInfoSet(ContactInfo entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private void AttachFiles(File entity)
        {
            entity.Location = this;
        }
        
        private void DetachFiles(File entity)
        {
            entity.Location = null;
        }
        
        private bool FilterFiles(File entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private void AttachInvoices(Invoice entity)
        {
            entity.BillToLocation = this;
        }
        
        private void DetachInvoices(Invoice entity)
        {
            entity.BillToLocation = null;
        }
        
        private bool FilterInvoices(Invoice entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private void AttachLocationFieldsWhereValue(LocationField entity)
        {
            entity.Value = this;
        }
        
        private void DetachLocationFieldsWhereValue(LocationField entity)
        {
            entity.Value = null;
        }
        
        private bool FilterLocationFieldsWhereValue(LocationField entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private bool FilterOwnerParty(Party entity)
        {
            return (entity.Id == this.OwnerPartyId);
        }
        
        private bool FilterParty(Party entity)
        {
            return (entity.Id == this.PartyId);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.Id == this.RegionId);
        }
        
        private void AttachRouteDestinations(RouteDestination entity)
        {
            entity.Location = this;
        }
        
        private void DetachRouteDestinations(RouteDestination entity)
        {
            entity.Location = null;
        }
        
        private bool FilterRouteDestinations(RouteDestination entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private void AttachRouteTasks(RouteTask entity)
        {
            entity.Location = this;
        }
        
        private void DetachRouteTasks(RouteTask entity)
        {
            entity.Location = null;
        }
        
        private bool FilterRouteTasks(RouteTask entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        private void AttachSubLocations(SubLocation entity)
        {
            entity.Location = this;
        }
        
        private void DetachSubLocations(SubLocation entity)
        {
            entity.Location = null;
        }
        
        private bool FilterSubLocations(SubLocation entity)
        {
            return (entity.LocationId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'LocationField' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class LocationField : Field
    {
        
        private short _locationFieldTypeInt;
        
        private Nullable<Guid> _locationId;
        
        private EntityRef<Location> _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLocationFieldTypeIntChanging(short value);
        partial void OnLocationFieldTypeIntChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationField"/> class.
        /// </summary>
        public LocationField()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LocationFieldTypeInt' value.
        /// </summary>
        [DataMember()]
        public short LocationFieldTypeInt
        {
            get
            {
                return this._locationFieldTypeInt;
            }
            set
            {
                if ((this._locationFieldTypeInt != value))
                {
                    this.OnLocationFieldTypeIntChanging(value);
                    this.RaiseDataMemberChanging("LocationFieldTypeInt");
                    this.ValidateProperty("LocationFieldTypeInt", value);
                    this._locationFieldTypeInt = value;
                    this.RaiseDataMemberChanged("LocationFieldTypeInt");
                    this.OnLocationFieldTypeIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_LocationField", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Value
        {
            get
            {
                if ((this._value == null))
                {
                    this._value = new EntityRef<Location>(this, "Value", this.FilterValue);
                }
                return this._value.Entity;
            }
            set
            {
                Location previous = this.Value;
                if ((previous != value))
                {
                    this.ValidateProperty("Value", value);
                    if ((previous != null))
                    {
                        this._value.Entity = null;
                        previous.LocationFieldsWhereValue.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._value.Entity = value;
                    if ((value != null))
                    {
                        value.LocationFieldsWhereValue.Add(this);
                    }
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        private bool FilterValue(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
    }
    
    /// <summary>
    /// The 'LocationOption' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class LocationOption : Option
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationOption"/> class.
        /// </summary>
        public LocationOption()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'NumericField' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class NumericField : Field
    {
        
        private int _decimalPlaces;
        
        private string _mask;
        
        private decimal _maximum;
        
        private decimal _minimum;
        
        private Nullable<decimal> _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDecimalPlacesChanging(int value);
        partial void OnDecimalPlacesChanged();
        partial void OnMaskChanging(string value);
        partial void OnMaskChanged();
        partial void OnMaximumChanging(decimal value);
        partial void OnMaximumChanged();
        partial void OnMinimumChanging(decimal value);
        partial void OnMinimumChanged();
        partial void OnValueChanging(Nullable<decimal> value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericField"/> class.
        /// </summary>
        public NumericField()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DecimalPlaces' value.
        /// </summary>
        [DataMember()]
        public int DecimalPlaces
        {
            get
            {
                return this._decimalPlaces;
            }
            set
            {
                if ((this._decimalPlaces != value))
                {
                    this.OnDecimalPlacesChanging(value);
                    this.RaiseDataMemberChanging("DecimalPlaces");
                    this.ValidateProperty("DecimalPlaces", value);
                    this._decimalPlaces = value;
                    this.RaiseDataMemberChanged("DecimalPlaces");
                    this.OnDecimalPlacesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mask' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Mask
        {
            get
            {
                return this._mask;
            }
            set
            {
                if ((this._mask != value))
                {
                    this.OnMaskChanging(value);
                    this.RaiseDataMemberChanging("Mask");
                    this.ValidateProperty("Mask", value);
                    this._mask = value;
                    this.RaiseDataMemberChanged("Mask");
                    this.OnMaskChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Maximum' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsValueWithinMaximum' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsValueWithinMaximum")]
        // 
        [DataMember()]
        public decimal Maximum
        {
            get
            {
                return this._maximum;
            }
            set
            {
                if ((this._maximum != value))
                {
                    this.OnMaximumChanging(value);
                    this.RaiseDataMemberChanging("Maximum");
                    this.ValidateProperty("Maximum", value);
                    this._maximum = value;
                    this.RaiseDataMemberChanged("Maximum");
                    this.OnMaximumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Minimum' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsValueWithinMinimum' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsValueWithinMinimum")]
        // 
        [DataMember()]
        public decimal Minimum
        {
            get
            {
                return this._minimum;
            }
            set
            {
                if ((this._minimum != value))
                {
                    this.OnMinimumChanging(value);
                    this.RaiseDataMemberChanging("Minimum");
                    this.ValidateProperty("Minimum", value);
                    this._minimum = value;
                    this.RaiseDataMemberChanged("Minimum");
                    this.OnMinimumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsValueValid' on type 'FoundOps.Core.Models.CoreEntities.Validation.FieldValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.FieldValidators), "IsValueValid")]
        // 
        [DataMember()]
        public Nullable<decimal> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Option' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    [KnownType(typeof(LocationOption))]
    public partial class Option : Entity
    {
        
        private Guid _id;
        
        private int _index;
        
        private bool _isChecked;
        
        private string _name;
        
        private EntityRef<OptionsField> _optionsField;
        
        private Guid _optionsFieldId;
        
        private string _tooltip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnIsCheckedChanging(bool value);
        partial void OnIsCheckedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOptionsFieldIdChanging(Guid value);
        partial void OnOptionsFieldIdChanged();
        partial void OnTooltipChanging(string value);
        partial void OnTooltipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Option"/> class.
        /// </summary>
        public Option()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Index' value.
        /// </summary>
        [DataMember()]
        public int Index
        {
            get
            {
                return this._index;
            }
            set
            {
                if ((this._index != value))
                {
                    this.OnIndexChanging(value);
                    this.RaiseDataMemberChanging("Index");
                    this.ValidateProperty("Index", value);
                    this._index = value;
                    this.RaiseDataMemberChanged("Index");
                    this.OnIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsChecked' value.
        /// </summary>
        [DataMember()]
        public bool IsChecked
        {
            get
            {
                return this._isChecked;
            }
            set
            {
                if ((this._isChecked != value))
                {
                    this.OnIsCheckedChanging(value);
                    this.RaiseDataMemberChanging("IsChecked");
                    this.ValidateProperty("IsChecked", value);
                    this._isChecked = value;
                    this.RaiseDataMemberChanged("IsChecked");
                    this.OnIsCheckedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OptionsField"/> entity.
        /// </summary>
        [Association("OptionsField_Option", "OptionsFieldId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public OptionsField OptionsField
        {
            get
            {
                if ((this._optionsField == null))
                {
                    this._optionsField = new EntityRef<OptionsField>(this, "OptionsField", this.FilterOptionsField);
                }
                return this._optionsField.Entity;
            }
            set
            {
                OptionsField previous = this.OptionsField;
                if ((previous != value))
                {
                    this.ValidateProperty("OptionsField", value);
                    if ((previous != null))
                    {
                        this._optionsField.Entity = null;
                        previous.Options.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OptionsFieldId = value.Id;
                    }
                    else
                    {
                        this.OptionsFieldId = default(Guid);
                    }
                    this._optionsField.Entity = value;
                    if ((value != null))
                    {
                        value.Options.Add(this);
                    }
                    this.RaisePropertyChanged("OptionsField");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionsFieldId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid OptionsFieldId
        {
            get
            {
                return this._optionsFieldId;
            }
            set
            {
                if ((this._optionsFieldId != value))
                {
                    this.OnOptionsFieldIdChanging(value);
                    this.RaiseDataMemberChanging("OptionsFieldId");
                    this.ValidateProperty("OptionsFieldId", value);
                    this._optionsFieldId = value;
                    this.RaiseDataMemberChanged("OptionsFieldId");
                    this.OnOptionsFieldIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Tooltip' value.
        /// </summary>
        [DataMember()]
        public string Tooltip
        {
            get
            {
                return this._tooltip;
            }
            set
            {
                if ((this._tooltip != value))
                {
                    this.OnTooltipChanging(value);
                    this.RaiseDataMemberChanging("Tooltip");
                    this.ValidateProperty("Tooltip", value);
                    this._tooltip = value;
                    this.RaiseDataMemberChanged("Tooltip");
                    this.OnTooltipChanged();
                }
            }
        }
        
        private bool FilterOptionsField(OptionsField entity)
        {
            return (entity.Id == this.OptionsFieldId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'OptionsField' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class OptionsField : Field
    {
        
        private bool _allowMultipleSelection;
        
        private EntityCollection<Option> _options;
        
        private short _typeInt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowMultipleSelectionChanging(bool value);
        partial void OnAllowMultipleSelectionChanged();
        partial void OnTypeIntChanging(short value);
        partial void OnTypeIntChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsField"/> class.
        /// </summary>
        public OptionsField()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllowMultipleSelection' value.
        /// </summary>
        [DataMember()]
        public bool AllowMultipleSelection
        {
            get
            {
                return this._allowMultipleSelection;
            }
            set
            {
                if ((this._allowMultipleSelection != value))
                {
                    this.OnAllowMultipleSelectionChanging(value);
                    this.RaiseDataMemberChanging("AllowMultipleSelection");
                    this.ValidateProperty("AllowMultipleSelection", value);
                    this._allowMultipleSelection = value;
                    this.RaiseDataMemberChanged("AllowMultipleSelection");
                    this.OnAllowMultipleSelectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Option"/> entity instances.
        /// </summary>
        [Association("OptionsField_Option", "Id", "OptionsFieldId")]
        [XmlIgnore()]
        public EntityCollection<Option> Options
        {
            get
            {
                if ((this._options == null))
                {
                    this._options = new EntityCollection<Option>(this, "Options", this.FilterOptions, this.AttachOptions, this.DetachOptions);
                }
                return this._options;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeInt' value.
        /// </summary>
        [DataMember()]
        public short TypeInt
        {
            get
            {
                return this._typeInt;
            }
            set
            {
                if ((this._typeInt != value))
                {
                    this.OnTypeIntChanging(value);
                    this.RaiseDataMemberChanging("TypeInt");
                    this.ValidateProperty("TypeInt", value);
                    this._typeInt = value;
                    this.RaiseDataMemberChanged("TypeInt");
                    this.OnTypeIntChanged();
                }
            }
        }
        
        private void AttachOptions(Option entity)
        {
            entity.OptionsField = this;
        }
        
        private void DetachOptions(Option entity)
        {
            entity.OptionsField = null;
        }
        
        private bool FilterOptions(Option entity)
        {
            return (entity.OptionsFieldId == this.Id);
        }
    }
    
    /// <summary>
    /// The 'Party' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    [KnownType(typeof(Business))]
    [KnownType(typeof(BusinessAccount))]
    [KnownType(typeof(Person))]
    [KnownType(typeof(UserAccount))]
    public partial class Party : Entity
    {
        
        private EntityRef<Client> _clientOwner;
        
        private EntityCollection<ContactInfo> _contactInfoSet;
        
        private EntityCollection<Contact> _contacts;
        
        private Guid _id;
        
        private EntityCollection<Location> _locations;
        
        private EntityCollection<Client> _ofClients;
        
        private EntityCollection<File> _ownedFiles;
        
        private EntityCollection<Location> _ownedLocations;
        
        private EntityCollection<Role> _ownedRoles;
        
        private EntityRef<PartyImage> _partyImage;
        
        private EntityCollection<PartyRole> _partyRoleToRoleSet;
        
        private EntityCollection<Vehicle> _vehicles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Party"/> class.
        /// </summary>
        public Party()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Party_Client", "Id", "Id")]
        [XmlIgnore()]
        public Client ClientOwner
        {
            get
            {
                if ((this._clientOwner == null))
                {
                    this._clientOwner = new EntityRef<Client>(this, "ClientOwner", this.FilterClientOwner);
                }
                return this._clientOwner.Entity;
            }
            set
            {
                Client previous = this.ClientOwner;
                if ((previous != value))
                {
                    this.ValidateProperty("ClientOwner", value);
                    if ((previous != null))
                    {
                        this._clientOwner.Entity = null;
                        previous.OwnedParty = null;
                    }
                    this._clientOwner.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedParty = this;
                    }
                    this.RaisePropertyChanged("ClientOwner");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ContactInfo"/> entity instances.
        /// </summary>
        [Association("Party_ContactInfo", "Id", "PartyId")]
        [XmlIgnore()]
        public EntityCollection<ContactInfo> ContactInfoSet
        {
            get
            {
                if ((this._contactInfoSet == null))
                {
                    this._contactInfoSet = new EntityCollection<ContactInfo>(this, "ContactInfoSet", this.FilterContactInfoSet, this.AttachContactInfoSet, this.DetachContactInfoSet);
                }
                return this._contactInfoSet;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Contact"/> entity instances.
        /// </summary>
        [Association("Party_Contact", "Id", "OwnerPartyId")]
        [XmlIgnore()]
        public EntityCollection<Contact> Contacts
        {
            get
            {
                if ((this._contacts == null))
                {
                    this._contacts = new EntityCollection<Contact>(this, "Contacts", this.FilterContacts, this.AttachContacts, this.DetachContacts);
                }
                return this._contacts;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Location"/> entity instances.
        /// </summary>
        [Association("Party_Location1", "Id", "PartyId")]
        [XmlIgnore()]
        public EntityCollection<Location> Locations
        {
            get
            {
                if ((this._locations == null))
                {
                    this._locations = new EntityCollection<Location>(this, "Locations", this.FilterLocations, this.AttachLocations, this.DetachLocations);
                }
                return this._locations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Client"/> entity instances.
        /// </summary>
        [Association("Party_Client1", "Id", "LinkedPartyId")]
        [XmlIgnore()]
        public EntityCollection<Client> OfClients
        {
            get
            {
                if ((this._ofClients == null))
                {
                    this._ofClients = new EntityCollection<Client>(this, "OfClients", this.FilterOfClients, this.AttachOfClients, this.DetachOfClients);
                }
                return this._ofClients;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="File"/> entity instances.
        /// </summary>
        [Association("Party_File", "Id", "PartyId")]
        [XmlIgnore()]
        public EntityCollection<File> OwnedFiles
        {
            get
            {
                if ((this._ownedFiles == null))
                {
                    this._ownedFiles = new EntityCollection<File>(this, "OwnedFiles", this.FilterOwnedFiles, this.AttachOwnedFiles, this.DetachOwnedFiles);
                }
                return this._ownedFiles;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Location"/> entity instances.
        /// </summary>
        [Association("Party_Location", "Id", "OwnerPartyId")]
        [XmlIgnore()]
        public EntityCollection<Location> OwnedLocations
        {
            get
            {
                if ((this._ownedLocations == null))
                {
                    this._ownedLocations = new EntityCollection<Location>(this, "OwnedLocations", this.FilterOwnedLocations, this.AttachOwnedLocations, this.DetachOwnedLocations);
                }
                return this._ownedLocations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Role"/> entity instances.
        /// </summary>
        [Association("Party_Role", "Id", "OwnerPartyId")]
        [XmlIgnore()]
        public EntityCollection<Role> OwnedRoles
        {
            get
            {
                if ((this._ownedRoles == null))
                {
                    this._ownedRoles = new EntityCollection<Role>(this, "OwnedRoles", this.FilterOwnedRoles, this.AttachOwnedRoles, this.DetachOwnedRoles);
                }
                return this._ownedRoles;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PartyImage"/> entity.
        /// </summary>
        [Association("Party_PartyImage", "Id", "Id")]
        [XmlIgnore()]
        public PartyImage PartyImage
        {
            get
            {
                if ((this._partyImage == null))
                {
                    this._partyImage = new EntityRef<PartyImage>(this, "PartyImage", this.FilterPartyImage);
                }
                return this._partyImage.Entity;
            }
            set
            {
                PartyImage previous = this.PartyImage;
                if ((previous != value))
                {
                    this.ValidateProperty("PartyImage", value);
                    if ((previous != null))
                    {
                        this._partyImage.Entity = null;
                        previous.Party = null;
                    }
                    this._partyImage.Entity = value;
                    if ((value != null))
                    {
                        value.Party = this;
                    }
                    this.RaisePropertyChanged("PartyImage");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PartyRole"/> entity instances.
        /// </summary>
        [Association("PartyRoleToPartySet", "Id", "PartyId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<PartyRole> PartyRoleToRoleSet
        {
            get
            {
                if ((this._partyRoleToRoleSet == null))
                {
                    this._partyRoleToRoleSet = new EntityCollection<PartyRole>(this, "PartyRoleToRoleSet", this.FilterPartyRoleToRoleSet, this.AttachPartyRoleToRoleSet, this.DetachPartyRoleToRoleSet);
                }
                return this._partyRoleToRoleSet;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Vehicle"/> entity instances.
        /// </summary>
        [Association("Party_Vehicle", "Id", "OwnerPartyId")]
        [XmlIgnore()]
        public EntityCollection<Vehicle> Vehicles
        {
            get
            {
                if ((this._vehicles == null))
                {
                    this._vehicles = new EntityCollection<Vehicle>(this, "Vehicles", this.FilterVehicles, this.AttachVehicles, this.DetachVehicles);
                }
                return this._vehicles;
            }
        }
        
        private bool FilterClientOwner(Client entity)
        {
            return (entity.Id == this.Id);
        }
        
        private void AttachContactInfoSet(ContactInfo entity)
        {
            entity.Party = this;
        }
        
        private void DetachContactInfoSet(ContactInfo entity)
        {
            entity.Party = null;
        }
        
        private bool FilterContactInfoSet(ContactInfo entity)
        {
            return (entity.PartyId == this.Id);
        }
        
        private void AttachContacts(Contact entity)
        {
            entity.OwnerParty = this;
        }
        
        private void DetachContacts(Contact entity)
        {
            entity.OwnerParty = null;
        }
        
        private bool FilterContacts(Contact entity)
        {
            return (entity.OwnerPartyId == this.Id);
        }
        
        private void AttachLocations(Location entity)
        {
            entity.Party = this;
        }
        
        private void DetachLocations(Location entity)
        {
            entity.Party = null;
        }
        
        private bool FilterLocations(Location entity)
        {
            return (entity.PartyId == this.Id);
        }
        
        private void AttachOfClients(Client entity)
        {
            entity.LinkedParty = this;
        }
        
        private void DetachOfClients(Client entity)
        {
            entity.LinkedParty = null;
        }
        
        private bool FilterOfClients(Client entity)
        {
            return (entity.LinkedPartyId == this.Id);
        }
        
        private void AttachOwnedFiles(File entity)
        {
            entity.OwnerParty = this;
        }
        
        private void DetachOwnedFiles(File entity)
        {
            entity.OwnerParty = null;
        }
        
        private bool FilterOwnedFiles(File entity)
        {
            return (entity.PartyId == this.Id);
        }
        
        private void AttachOwnedLocations(Location entity)
        {
            entity.OwnerParty = this;
        }
        
        private void DetachOwnedLocations(Location entity)
        {
            entity.OwnerParty = null;
        }
        
        private bool FilterOwnedLocations(Location entity)
        {
            return (entity.OwnerPartyId == this.Id);
        }
        
        private void AttachOwnedRoles(Role entity)
        {
            entity.OwnerParty = this;
        }
        
        private void DetachOwnedRoles(Role entity)
        {
            entity.OwnerParty = null;
        }
        
        private bool FilterOwnedRoles(Role entity)
        {
            return (entity.OwnerPartyId == this.Id);
        }
        
        private bool FilterPartyImage(PartyImage entity)
        {
            return (entity.Id == this.Id);
        }
        
        private void AttachPartyRoleToRoleSet(PartyRole entity)
        {
            entity.Party = this;
        }
        
        private void DetachPartyRoleToRoleSet(PartyRole entity)
        {
            entity.Party = null;
        }
        
        private bool FilterPartyRoleToRoleSet(PartyRole entity)
        {
            return (entity.PartyId == this.Id);
        }
        
        private void AttachVehicles(Vehicle entity)
        {
            entity.OwnerParty = this;
        }
        
        private void DetachVehicles(Vehicle entity)
        {
            entity.OwnerParty = null;
        }
        
        private bool FilterVehicles(Vehicle entity)
        {
            return (entity.OwnerPartyId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PartyImage' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class PartyImage : File
    {
        
        private EntityRef<Party> _party;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyImage"/> class.
        /// </summary>
        public PartyImage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_PartyImage", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party Party
        {
            get
            {
                if ((this._party == null))
                {
                    this._party = new EntityRef<Party>(this, "Party", this.FilterParty);
                }
                return this._party.Entity;
            }
            set
            {
                Party previous = this.Party;
                if ((previous != value))
                {
                    this.ValidateProperty("Party", value);
                    if ((previous != null))
                    {
                        this._party.Entity = null;
                        previous.PartyImage = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._party.Entity = value;
                    if ((value != null))
                    {
                        value.PartyImage = this;
                    }
                    this.RaisePropertyChanged("Party");
                }
            }
        }
        
        private bool FilterParty(Party entity)
        {
            return (entity.Id == this.Id);
        }
    }
    
    /// <summary>
    /// The 'PartyRole' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class PartyRole : Entity
    {
        
        private EntityRef<Party> _party;
        
        private Guid _partyId;
        
        private EntityRef<Role> _role;
        
        private Guid _roleId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnPartyIdChanging(Guid value);
        partial void OnPartyIdChanged();
        partial void OnRoleIdChanging(Guid value);
        partial void OnRoleIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PartyRole"/> class.
        /// </summary>
        public PartyRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("PartyRoleToPartySet", "PartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party Party
        {
            get
            {
                if ((this._party == null))
                {
                    this._party = new EntityRef<Party>(this, "Party", this.FilterParty);
                }
                return this._party.Entity;
            }
            set
            {
                Party previous = this.Party;
                if ((previous != value))
                {
                    this.ValidateProperty("Party", value);
                    if ((previous != null))
                    {
                        this._party.Entity = null;
                        previous.PartyRoleToRoleSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PartyId = value.Id;
                    }
                    else
                    {
                        this.PartyId = default(Guid);
                    }
                    this._party.Entity = value;
                    if ((value != null))
                    {
                        value.PartyRoleToRoleSet.Add(this);
                    }
                    this.RaisePropertyChanged("Party");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid PartyId
        {
            get
            {
                return this._partyId;
            }
            set
            {
                if ((this._partyId != value))
                {
                    this.OnPartyIdChanging(value);
                    this.RaiseDataMemberChanging("PartyId");
                    this.ValidateProperty("PartyId", value);
                    this._partyId = value;
                    this.RaiseDataMemberChanged("PartyId");
                    this.OnPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("PartyRoleToRoleSet", "RoleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.PartyRoleToPartySet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleId = value.Id;
                    }
                    else
                    {
                        this.RoleId = default(Guid);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.PartyRoleToPartySet.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        private bool FilterParty(Party entity)
        {
            return (entity.Id == this.PartyId);
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.Id == this.RoleId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._partyId, this._roleId);
        }
    }
    
    /// <summary>
    /// The 'Person' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public partial class Person : Party
    {
        
        private Nullable<DateTime> _dateOfBirth;
        
        private string _firstName;
        
        private Nullable<short> _genderInt;
        
        private string _lastName;
        
        private string _middleInitial;
        
        private EntityRef<Contact> _ownerContact;
        
        private EntityRef<Employee> _ownerEmployee;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateOfBirthChanging(Nullable<DateTime> value);
        partial void OnDateOfBirthChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnGenderIntChanging(Nullable<short> value);
        partial void OnGenderIntChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnMiddleInitialChanging(string value);
        partial void OnMiddleInitialChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Person"/> class.
        /// </summary>
        public Person()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateOfBirth' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateOfBirth
        {
            get
            {
                return this._dateOfBirth;
            }
            set
            {
                if ((this._dateOfBirth != value))
                {
                    this.OnDateOfBirthChanging(value);
                    this.RaiseDataMemberChanging("DateOfBirth");
                    this.ValidateProperty("DateOfBirth", value);
                    this._dateOfBirth = value;
                    this.RaiseDataMemberChanged("DateOfBirth");
                    this.OnDateOfBirthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GenderInt' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> GenderInt
        {
            get
            {
                return this._genderInt;
            }
            set
            {
                if ((this._genderInt != value))
                {
                    this.OnGenderIntChanging(value);
                    this.RaiseDataMemberChanging("GenderInt");
                    this.ValidateProperty("GenderInt", value);
                    this._genderInt = value;
                    this.RaiseDataMemberChanged("GenderInt");
                    this.OnGenderIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiddleInitial' value.
        /// </summary>
        [DataMember()]
        public string MiddleInitial
        {
            get
            {
                return this._middleInitial;
            }
            set
            {
                if ((this._middleInitial != value))
                {
                    this.OnMiddleInitialChanging(value);
                    this.RaiseDataMemberChanging("MiddleInitial");
                    this.ValidateProperty("MiddleInitial", value);
                    this._middleInitial = value;
                    this.RaiseDataMemberChanged("MiddleInitial");
                    this.OnMiddleInitialChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Person_Contact", "Id", "Id")]
        [XmlIgnore()]
        public Contact OwnerContact
        {
            get
            {
                if ((this._ownerContact == null))
                {
                    this._ownerContact = new EntityRef<Contact>(this, "OwnerContact", this.FilterOwnerContact);
                }
                return this._ownerContact.Entity;
            }
            set
            {
                Contact previous = this.OwnerContact;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerContact", value);
                    if ((previous != null))
                    {
                        this._ownerContact.Entity = null;
                        previous.OwnedPerson = null;
                    }
                    this._ownerContact.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedPerson = this;
                    }
                    this.RaisePropertyChanged("OwnerContact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Person_Employee", "Id", "Id")]
        [XmlIgnore()]
        public Employee OwnerEmployee
        {
            get
            {
                if ((this._ownerEmployee == null))
                {
                    this._ownerEmployee = new EntityRef<Employee>(this, "OwnerEmployee", this.FilterOwnerEmployee);
                }
                return this._ownerEmployee.Entity;
            }
            set
            {
                Employee previous = this.OwnerEmployee;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerEmployee", value);
                    if ((previous != null))
                    {
                        this._ownerEmployee.Entity = null;
                        previous.OwnedPerson = null;
                    }
                    this._ownerEmployee.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedPerson = this;
                    }
                    this.RaisePropertyChanged("OwnerEmployee");
                }
            }
        }
        
        private bool FilterOwnerContact(Contact entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterOwnerEmployee(Employee entity)
        {
            return (entity.Id == this.Id);
        }
    }
    
    /// <summary>
    /// The 'RecurringService' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RecurringService : Entity
    {
        
        private EntityRef<Client> _client;
        
        private Guid _clientId;
        
        private string _excludedDatesString;
        
        private EntityCollection<Service> _generatedServices;
        
        private Guid _id;
        
        private EntityRef<Repeat> _repeat;
        
        private EntityRef<ServiceTemplate> _serviceTemplate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnExcludedDatesStringChanging(string value);
        partial void OnExcludedDatesStringChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringService"/> class.
        /// </summary>
        public RecurringService()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_RecurringService", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.RecurringServices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Guid);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.RecurringServices.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExcludedDatesString' value.
        /// </summary>
        [DataMember()]
        public string ExcludedDatesString
        {
            get
            {
                return this._excludedDatesString;
            }
            set
            {
                if ((this._excludedDatesString != value))
                {
                    this.OnExcludedDatesStringChanging(value);
                    this.RaiseDataMemberChanging("ExcludedDatesString");
                    this.ValidateProperty("ExcludedDatesString", value);
                    this._excludedDatesString = value;
                    this.RaiseDataMemberChanged("ExcludedDatesString");
                    this.OnExcludedDatesStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Service"/> entity instances.
        /// </summary>
        [Association("RecurringService_Service", "Id", "RecurringServiceId")]
        [XmlIgnore()]
        public EntityCollection<Service> GeneratedServices
        {
            get
            {
                if ((this._generatedServices == null))
                {
                    this._generatedServices = new EntityCollection<Service>(this, "GeneratedServices", this.FilterGeneratedServices, this.AttachGeneratedServices, this.DetachGeneratedServices);
                }
                return this._generatedServices;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Repeat"/> entity.
        /// </summary>
        [Association("Repeat_RecurringService", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Repeat Repeat
        {
            get
            {
                if ((this._repeat == null))
                {
                    this._repeat = new EntityRef<Repeat>(this, "Repeat", this.FilterRepeat);
                }
                return this._repeat.Entity;
            }
            set
            {
                Repeat previous = this.Repeat;
                if ((previous != value))
                {
                    this.ValidateProperty("Repeat", value);
                    if ((previous != null))
                    {
                        this._repeat.Entity = null;
                        previous.RecurringService = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._repeat.Entity = value;
                    if ((value != null))
                    {
                        value.RecurringService = this;
                    }
                    this.RaisePropertyChanged("Repeat");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ServiceTemplate"/> entity.
        /// </summary>
        [Association("ServiceTemplate_RecurringService", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public ServiceTemplate ServiceTemplate
        {
            get
            {
                if ((this._serviceTemplate == null))
                {
                    this._serviceTemplate = new EntityRef<ServiceTemplate>(this, "ServiceTemplate", this.FilterServiceTemplate);
                }
                return this._serviceTemplate.Entity;
            }
            set
            {
                ServiceTemplate previous = this.ServiceTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("ServiceTemplate", value);
                    if ((previous != null))
                    {
                        this._serviceTemplate.Entity = null;
                        previous.OwnerRecurringService = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._serviceTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.OwnerRecurringService = this;
                    }
                    this.RaisePropertyChanged("ServiceTemplate");
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private void AttachGeneratedServices(Service entity)
        {
            entity.RecurringServiceParent = this;
        }
        
        private void DetachGeneratedServices(Service entity)
        {
            entity.RecurringServiceParent = null;
        }
        
        private bool FilterGeneratedServices(Service entity)
        {
            return (entity.RecurringServiceId == this.Id);
        }
        
        private bool FilterRepeat(Repeat entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterServiceTemplate(ServiceTemplate entity)
        {
            return (entity.Id == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Region' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Region : Entity
    {
        
        private EntityRef<BusinessAccount> _businessAccount;
        
        private Nullable<Guid> _businessAccountId;
        
        private string _color;
        
        private Guid _id;
        
        private EntityCollection<Location> _locations;
        
        private string _name;
        
        private string _notes;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessAccountIdChanging(Nullable<Guid> value);
        partial void OnBusinessAccountIdChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Region", "BusinessAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount BusinessAccount
        {
            get
            {
                if ((this._businessAccount == null))
                {
                    this._businessAccount = new EntityRef<BusinessAccount>(this, "BusinessAccount", this.FilterBusinessAccount);
                }
                return this._businessAccount.Entity;
            }
            set
            {
                BusinessAccount previous = this.BusinessAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("BusinessAccount", value);
                    if ((previous != null))
                    {
                        this._businessAccount.Entity = null;
                        previous.Regions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessAccountId = value.Id;
                    }
                    else
                    {
                        this.BusinessAccountId = default(Nullable<Guid>);
                    }
                    this._businessAccount.Entity = value;
                    if ((value != null))
                    {
                        value.Regions.Add(this);
                    }
                    this.RaisePropertyChanged("BusinessAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> BusinessAccountId
        {
            get
            {
                return this._businessAccountId;
            }
            set
            {
                if ((this._businessAccountId != value))
                {
                    this.OnBusinessAccountIdChanging(value);
                    this.RaiseDataMemberChanging("BusinessAccountId");
                    this.ValidateProperty("BusinessAccountId", value);
                    this._businessAccountId = value;
                    this.RaiseDataMemberChanged("BusinessAccountId");
                    this.OnBusinessAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Color' value.
        /// </summary>
        [DataMember()]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Location"/> entity instances.
        /// </summary>
        [Association("Region_Location", "Id", "RegionId")]
        [XmlIgnore()]
        public EntityCollection<Location> Locations
        {
            get
            {
                if ((this._locations == null))
                {
                    this._locations = new EntityCollection<Location>(this, "Locations", this.FilterLocations, this.AttachLocations, this.DetachLocations);
                }
                return this._locations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        private bool FilterBusinessAccount(BusinessAccount entity)
        {
            return (entity.Id == this.BusinessAccountId);
        }
        
        private void AttachLocations(Location entity)
        {
            entity.Region = this;
        }
        
        private void DetachLocations(Location entity)
        {
            entity.Region = null;
        }
        
        private bool FilterLocations(Location entity)
        {
            return (entity.RegionId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Repeat' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Repeat : Entity
    {
        
        private Nullable<int> _endAfterTimes;
        
        private Nullable<DateTime> _endDate;
        
        private Nullable<int> _frequencyDetailInt;
        
        private int _frequencyInt;
        
        private Guid _id;
        
        private EntityRef<RecurringService> _recurringService;
        
        private int _repeatEveryTimes;
        
        private DateTime _startDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEndAfterTimesChanging(Nullable<int> value);
        partial void OnEndAfterTimesChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnFrequencyDetailIntChanging(Nullable<int> value);
        partial void OnFrequencyDetailIntChanged();
        partial void OnFrequencyIntChanging(int value);
        partial void OnFrequencyIntChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnRepeatEveryTimesChanging(int value);
        partial void OnRepeatEveryTimesChanged();
        partial void OnStartDateChanging(DateTime value);
        partial void OnStartDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Repeat"/> class.
        /// </summary>
        public Repeat()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EndAfterTimes' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EndAfterTimes
        {
            get
            {
                return this._endAfterTimes;
            }
            set
            {
                if ((this._endAfterTimes != value))
                {
                    this.OnEndAfterTimesChanging(value);
                    this.RaiseDataMemberChanging("EndAfterTimes");
                    this.ValidateProperty("EndAfterTimes", value);
                    this._endAfterTimes = value;
                    this.RaiseDataMemberChanged("EndAfterTimes");
                    this.OnEndAfterTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrequencyDetailInt' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsCorrectDayCheckedForFrequencyDetailInt' on type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators), "IsCorrectDayCheckedForFrequencyDetailInt")]
        // 
        [DataMember()]
        public Nullable<int> FrequencyDetailInt
        {
            get
            {
                return this._frequencyDetailInt;
            }
            set
            {
                if ((this._frequencyDetailInt != value))
                {
                    this.OnFrequencyDetailIntChanging(value);
                    this.RaiseDataMemberChanging("FrequencyDetailInt");
                    this.ValidateProperty("FrequencyDetailInt", value);
                    this._frequencyDetailInt = value;
                    this.RaiseDataMemberChanged("FrequencyDetailInt");
                    this.OnFrequencyDetailIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrequencyInt' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsCorrectDayCheckedForFrequencyInt' on type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators), "IsCorrectDayCheckedForFrequencyInt")]
        // 
        [DataMember()]
        public int FrequencyInt
        {
            get
            {
                return this._frequencyInt;
            }
            set
            {
                if ((this._frequencyInt != value))
                {
                    this.OnFrequencyIntChanging(value);
                    this.RaiseDataMemberChanging("FrequencyInt");
                    this.ValidateProperty("FrequencyInt", value);
                    this._frequencyInt = value;
                    this.RaiseDataMemberChanged("FrequencyInt");
                    this.OnFrequencyIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RecurringService"/> entity.
        /// </summary>
        [Association("Repeat_RecurringService", "Id", "Id")]
        [XmlIgnore()]
        public RecurringService RecurringService
        {
            get
            {
                if ((this._recurringService == null))
                {
                    this._recurringService = new EntityRef<RecurringService>(this, "RecurringService", this.FilterRecurringService);
                }
                return this._recurringService.Entity;
            }
            set
            {
                RecurringService previous = this.RecurringService;
                if ((previous != value))
                {
                    this.ValidateProperty("RecurringService", value);
                    if ((previous != null))
                    {
                        this._recurringService.Entity = null;
                        previous.Repeat = null;
                    }
                    this._recurringService.Entity = value;
                    if ((value != null))
                    {
                        value.Repeat = this;
                    }
                    this.RaisePropertyChanged("RecurringService");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RepeatEveryTimes' value.
        /// </summary>
        [DataMember()]
        public int RepeatEveryTimes
        {
            get
            {
                return this._repeatEveryTimes;
            }
            set
            {
                if ((this._repeatEveryTimes != value))
                {
                    this.OnRepeatEveryTimesChanging(value);
                    this.RaiseDataMemberChanging("RepeatEveryTimes");
                    this.ValidateProperty("RepeatEveryTimes", value);
                    this._repeatEveryTimes = value;
                    this.RaiseDataMemberChanged("RepeatEveryTimes");
                    this.OnRepeatEveryTimesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'IsCorrectDayCheckedForStartDate' on type 'FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators' that is not accessible in the client project 'FoundOps.SLClient.Data'.
        // [CustomValidationAttribute(typeof(FoundOps.Core.Models.CoreEntities.Validation.RepeatValidators), "IsCorrectDayCheckedForStartDate")]
        // 
        [DataMember()]
        public DateTime StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        private bool FilterRecurringService(RecurringService entity)
        {
            return (entity.Id == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Role' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Role : Entity
    {
        
        private string _description;
        
        private Guid _id;
        
        private string _name;
        
        private EntityRef<Party> _ownerParty;
        
        private Nullable<Guid> _ownerPartyId;
        
        private EntityCollection<PartyRole> _partyRoleToPartySet;
        
        private EntityCollection<RoleBlock> _roleBlockToBlockSet;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOwnerPartyIdChanging(Nullable<Guid> value);
        partial void OnOwnerPartyIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Role"/> class.
        /// </summary>
        public Role()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Role", "OwnerPartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnerParty
        {
            get
            {
                if ((this._ownerParty == null))
                {
                    this._ownerParty = new EntityRef<Party>(this, "OwnerParty", this.FilterOwnerParty);
                }
                return this._ownerParty.Entity;
            }
            set
            {
                Party previous = this.OwnerParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerParty", value);
                    if ((previous != null))
                    {
                        this._ownerParty.Entity = null;
                        previous.OwnedRoles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerPartyId = value.Id;
                    }
                    else
                    {
                        this.OwnerPartyId = default(Nullable<Guid>);
                    }
                    this._ownerParty.Entity = value;
                    if ((value != null))
                    {
                        value.OwnedRoles.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerPartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> OwnerPartyId
        {
            get
            {
                return this._ownerPartyId;
            }
            set
            {
                if ((this._ownerPartyId != value))
                {
                    this.OnOwnerPartyIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerPartyId");
                    this.ValidateProperty("OwnerPartyId", value);
                    this._ownerPartyId = value;
                    this.RaiseDataMemberChanged("OwnerPartyId");
                    this.OnOwnerPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PartyRole"/> entity instances.
        /// </summary>
        [Association("PartyRoleToRoleSet", "Id", "RoleId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<PartyRole> PartyRoleToPartySet
        {
            get
            {
                if ((this._partyRoleToPartySet == null))
                {
                    this._partyRoleToPartySet = new EntityCollection<PartyRole>(this, "PartyRoleToPartySet", this.FilterPartyRoleToPartySet, this.AttachPartyRoleToPartySet, this.DetachPartyRoleToPartySet);
                }
                return this._partyRoleToPartySet;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RoleBlock"/> entity instances.
        /// </summary>
        [Association("RoleBlockToRoleSet", "Id", "RoleId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RoleBlock> RoleBlockToBlockSet
        {
            get
            {
                if ((this._roleBlockToBlockSet == null))
                {
                    this._roleBlockToBlockSet = new EntityCollection<RoleBlock>(this, "RoleBlockToBlockSet", this.FilterRoleBlockToBlockSet, this.AttachRoleBlockToBlockSet, this.DetachRoleBlockToBlockSet);
                }
                return this._roleBlockToBlockSet;
            }
        }
        
        private bool FilterOwnerParty(Party entity)
        {
            return (entity.Id == this.OwnerPartyId);
        }
        
        private void AttachPartyRoleToPartySet(PartyRole entity)
        {
            entity.Role = this;
        }
        
        private void DetachPartyRoleToPartySet(PartyRole entity)
        {
            entity.Role = null;
        }
        
        private bool FilterPartyRoleToPartySet(PartyRole entity)
        {
            return (entity.RoleId == this.Id);
        }
        
        private void AttachRoleBlockToBlockSet(RoleBlock entity)
        {
            entity.Role = this;
        }
        
        private void DetachRoleBlockToBlockSet(RoleBlock entity)
        {
            entity.Role = null;
        }
        
        private bool FilterRoleBlockToBlockSet(RoleBlock entity)
        {
            return (entity.RoleId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RoleBlock' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RoleBlock : Entity
    {
        
        private EntityRef<Block> _block;
        
        private Guid _blockId;
        
        private EntityRef<Role> _role;
        
        private Guid _roleId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBlockIdChanging(Guid value);
        partial void OnBlockIdChanged();
        partial void OnRoleIdChanging(Guid value);
        partial void OnRoleIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleBlock"/> class.
        /// </summary>
        public RoleBlock()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Block"/> entity.
        /// </summary>
        [Association("RoleBlockToBlockSet", "BlockId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Block Block
        {
            get
            {
                if ((this._block == null))
                {
                    this._block = new EntityRef<Block>(this, "Block", this.FilterBlock);
                }
                return this._block.Entity;
            }
            set
            {
                Block previous = this.Block;
                if ((previous != value))
                {
                    this.ValidateProperty("Block", value);
                    if ((previous != null))
                    {
                        this._block.Entity = null;
                        previous.RoleBlockToRoleSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BlockId = value.Id;
                    }
                    else
                    {
                        this.BlockId = default(Guid);
                    }
                    this._block.Entity = value;
                    if ((value != null))
                    {
                        value.RoleBlockToRoleSet.Add(this);
                    }
                    this.RaisePropertyChanged("Block");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BlockId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid BlockId
        {
            get
            {
                return this._blockId;
            }
            set
            {
                if ((this._blockId != value))
                {
                    this.OnBlockIdChanging(value);
                    this.RaiseDataMemberChanging("BlockId");
                    this.ValidateProperty("BlockId", value);
                    this._blockId = value;
                    this.RaiseDataMemberChanged("BlockId");
                    this.OnBlockIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Role"/> entity.
        /// </summary>
        [Association("RoleBlockToRoleSet", "RoleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Role Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<Role>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                Role previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.RoleBlockToBlockSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleId = value.Id;
                    }
                    else
                    {
                        this.RoleId = default(Guid);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.RoleBlockToBlockSet.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        private bool FilterBlock(Block entity)
        {
            return (entity.Id == this.BlockId);
        }
        
        private bool FilterRole(Role entity)
        {
            return (entity.Id == this.RoleId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._blockId, this._roleId);
        }
    }
    
    /// <summary>
    /// The 'Route' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Route : Entity
    {
        
        private DateTime _date;
        
        private DateTime _endTime;
        
        private Guid _id;
        
        private string _name;
        
        private EntityRef<BusinessAccount> _ownerBusinessAccount;
        
        private Guid _ownerBusinessAccountId;
        
        private EntityCollection<RouteDestination> _routeDestinations;
        
        private EntityCollection<RouteEmployee> _routeEmployeeToEmployeeSet;
        
        private string _routeType;
        
        private EntityCollection<RouteVehicle> _routeVehicleToVehicleSet;
        
        private DateTime _startTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnEndTimeChanging(DateTime value);
        partial void OnEndTimeChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOwnerBusinessAccountIdChanging(Guid value);
        partial void OnOwnerBusinessAccountIdChanged();
        partial void OnRouteTypeChanging(string value);
        partial void OnRouteTypeChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Route"/> class.
        /// </summary>
        public Route()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        public DateTime EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Route", "OwnerBusinessAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount OwnerBusinessAccount
        {
            get
            {
                if ((this._ownerBusinessAccount == null))
                {
                    this._ownerBusinessAccount = new EntityRef<BusinessAccount>(this, "OwnerBusinessAccount", this.FilterOwnerBusinessAccount);
                }
                return this._ownerBusinessAccount.Entity;
            }
            set
            {
                BusinessAccount previous = this.OwnerBusinessAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerBusinessAccount", value);
                    if ((previous != null))
                    {
                        this._ownerBusinessAccount.Entity = null;
                        previous.Routes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerBusinessAccountId = value.Id;
                    }
                    else
                    {
                        this.OwnerBusinessAccountId = default(Guid);
                    }
                    this._ownerBusinessAccount.Entity = value;
                    if ((value != null))
                    {
                        value.Routes.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerBusinessAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerBusinessAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid OwnerBusinessAccountId
        {
            get
            {
                return this._ownerBusinessAccountId;
            }
            set
            {
                if ((this._ownerBusinessAccountId != value))
                {
                    this.OnOwnerBusinessAccountIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerBusinessAccountId");
                    this.ValidateProperty("OwnerBusinessAccountId", value);
                    this._ownerBusinessAccountId = value;
                    this.RaiseDataMemberChanged("OwnerBusinessAccountId");
                    this.OnOwnerBusinessAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteDestination"/> entity instances.
        /// </summary>
        [Association("Route_RouteDestination", "Id", "RouteId")]
        [XmlIgnore()]
        public EntityCollection<RouteDestination> RouteDestinations
        {
            get
            {
                if ((this._routeDestinations == null))
                {
                    this._routeDestinations = new EntityCollection<RouteDestination>(this, "RouteDestinations", this.FilterRouteDestinations, this.AttachRouteDestinations, this.DetachRouteDestinations);
                }
                return this._routeDestinations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteEmployee"/> entity instances.
        /// </summary>
        [Association("RouteEmployeeToRouteSet", "Id", "RouteId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RouteEmployee> RouteEmployeeToEmployeeSet
        {
            get
            {
                if ((this._routeEmployeeToEmployeeSet == null))
                {
                    this._routeEmployeeToEmployeeSet = new EntityCollection<RouteEmployee>(this, "RouteEmployeeToEmployeeSet", this.FilterRouteEmployeeToEmployeeSet, this.AttachRouteEmployeeToEmployeeSet, this.DetachRouteEmployeeToEmployeeSet);
                }
                return this._routeEmployeeToEmployeeSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string RouteType
        {
            get
            {
                return this._routeType;
            }
            set
            {
                if ((this._routeType != value))
                {
                    this.OnRouteTypeChanging(value);
                    this.RaiseDataMemberChanging("RouteType");
                    this.ValidateProperty("RouteType", value);
                    this._routeType = value;
                    this.RaiseDataMemberChanged("RouteType");
                    this.OnRouteTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteVehicle"/> entity instances.
        /// </summary>
        [Association("RouteVehicleToRouteSet", "Id", "RouteId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RouteVehicle> RouteVehicleToVehicleSet
        {
            get
            {
                if ((this._routeVehicleToVehicleSet == null))
                {
                    this._routeVehicleToVehicleSet = new EntityCollection<RouteVehicle>(this, "RouteVehicleToVehicleSet", this.FilterRouteVehicleToVehicleSet, this.AttachRouteVehicleToVehicleSet, this.DetachRouteVehicleToVehicleSet);
                }
                return this._routeVehicleToVehicleSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        private bool FilterOwnerBusinessAccount(BusinessAccount entity)
        {
            return (entity.Id == this.OwnerBusinessAccountId);
        }
        
        private void AttachRouteDestinations(RouteDestination entity)
        {
            entity.Route = this;
        }
        
        private void DetachRouteDestinations(RouteDestination entity)
        {
            entity.Route = null;
        }
        
        private bool FilterRouteDestinations(RouteDestination entity)
        {
            return (entity.RouteId == this.Id);
        }
        
        private void AttachRouteEmployeeToEmployeeSet(RouteEmployee entity)
        {
            entity.Route = this;
        }
        
        private void DetachRouteEmployeeToEmployeeSet(RouteEmployee entity)
        {
            entity.Route = null;
        }
        
        private bool FilterRouteEmployeeToEmployeeSet(RouteEmployee entity)
        {
            return (entity.RouteId == this.Id);
        }
        
        private void AttachRouteVehicleToVehicleSet(RouteVehicle entity)
        {
            entity.Route = this;
        }
        
        private void DetachRouteVehicleToVehicleSet(RouteVehicle entity)
        {
            entity.Route = null;
        }
        
        private bool FilterRouteVehicleToVehicleSet(RouteVehicle entity)
        {
            return (entity.RouteId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RouteDestination' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RouteDestination : Entity
    {
        
        private EntityRef<Client> _client;
        
        private Nullable<Guid> _clientId;
        
        private Guid _id;
        
        private EntityRef<Location> _location;
        
        private Nullable<Guid> _locationId;
        
        private int _orderInRoute;
        
        private EntityRef<Route> _route;
        
        private Guid _routeId;
        
        private EntityCollection<RouteTask> _routeTasks;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Nullable<Guid> value);
        partial void OnClientIdChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnOrderInRouteChanging(int value);
        partial void OnOrderInRouteChanged();
        partial void OnRouteIdChanging(Guid value);
        partial void OnRouteIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteDestination"/> class.
        /// </summary>
        public RouteDestination()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_RouteDestination", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.RouteDestinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Nullable<Guid>);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.RouteDestinations.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_RouteDestination", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = new EntityRef<Location>(this, "Location", this.FilterLocation);
                }
                return this._location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if ((previous != value))
                {
                    this.ValidateProperty("Location", value);
                    if ((previous != null))
                    {
                        this._location.Entity = null;
                        previous.RouteDestinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._location.Entity = value;
                    if ((value != null))
                    {
                        value.RouteDestinations.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderInRoute' value.
        /// </summary>
        [DataMember()]
        public int OrderInRoute
        {
            get
            {
                return this._orderInRoute;
            }
            set
            {
                if ((this._orderInRoute != value))
                {
                    this.OnOrderInRouteChanging(value);
                    this.RaiseDataMemberChanging("OrderInRoute");
                    this.ValidateProperty("OrderInRoute", value);
                    this._orderInRoute = value;
                    this.RaiseDataMemberChanged("OrderInRoute");
                    this.OnOrderInRouteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Route"/> entity.
        /// </summary>
        [Association("Route_RouteDestination", "RouteId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Route Route
        {
            get
            {
                if ((this._route == null))
                {
                    this._route = new EntityRef<Route>(this, "Route", this.FilterRoute);
                }
                return this._route.Entity;
            }
            set
            {
                Route previous = this.Route;
                if ((previous != value))
                {
                    this.ValidateProperty("Route", value);
                    if ((previous != null))
                    {
                        this._route.Entity = null;
                        previous.RouteDestinations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RouteId = value.Id;
                    }
                    else
                    {
                        this.RouteId = default(Guid);
                    }
                    this._route.Entity = value;
                    if ((value != null))
                    {
                        value.RouteDestinations.Add(this);
                    }
                    this.RaisePropertyChanged("Route");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid RouteId
        {
            get
            {
                return this._routeId;
            }
            set
            {
                if ((this._routeId != value))
                {
                    this.OnRouteIdChanging(value);
                    this.RaiseDataMemberChanging("RouteId");
                    this.ValidateProperty("RouteId", value);
                    this._routeId = value;
                    this.RaiseDataMemberChanged("RouteId");
                    this.OnRouteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteTask"/> entity instances.
        /// </summary>
        [Association("RouteDestination_RouteTask", "Id", "RouteDestinationId")]
        [XmlIgnore()]
        public EntityCollection<RouteTask> RouteTasks
        {
            get
            {
                if ((this._routeTasks == null))
                {
                    this._routeTasks = new EntityCollection<RouteTask>(this, "RouteTasks", this.FilterRouteTasks, this.AttachRouteTasks, this.DetachRouteTasks);
                }
                return this._routeTasks;
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        private bool FilterRoute(Route entity)
        {
            return (entity.Id == this.RouteId);
        }
        
        private void AttachRouteTasks(RouteTask entity)
        {
            entity.RouteDestination = this;
        }
        
        private void DetachRouteTasks(RouteTask entity)
        {
            entity.RouteDestination = null;
        }
        
        private bool FilterRouteTasks(RouteTask entity)
        {
            return (entity.RouteDestinationId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RouteEmployee' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RouteEmployee : Entity
    {
        
        private EntityRef<Employee> _employee;
        
        private Guid _employeeId;
        
        private EntityRef<Route> _route;
        
        private Guid _routeId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmployeeIdChanging(Guid value);
        partial void OnEmployeeIdChanged();
        partial void OnRouteIdChanging(Guid value);
        partial void OnRouteIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteEmployee"/> class.
        /// </summary>
        public RouteEmployee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("RouteEmployeeToEmployeeSet", "EmployeeId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.RouteEmployeeToRouteSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeId = value.Id;
                    }
                    else
                    {
                        this.EmployeeId = default(Guid);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.RouteEmployeeToRouteSet.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid EmployeeId
        {
            get
            {
                return this._employeeId;
            }
            set
            {
                if ((this._employeeId != value))
                {
                    this.OnEmployeeIdChanging(value);
                    this.RaiseDataMemberChanging("EmployeeId");
                    this.ValidateProperty("EmployeeId", value);
                    this._employeeId = value;
                    this.RaiseDataMemberChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Route"/> entity.
        /// </summary>
        [Association("RouteEmployeeToRouteSet", "RouteId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Route Route
        {
            get
            {
                if ((this._route == null))
                {
                    this._route = new EntityRef<Route>(this, "Route", this.FilterRoute);
                }
                return this._route.Entity;
            }
            set
            {
                Route previous = this.Route;
                if ((previous != value))
                {
                    this.ValidateProperty("Route", value);
                    if ((previous != null))
                    {
                        this._route.Entity = null;
                        previous.RouteEmployeeToEmployeeSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RouteId = value.Id;
                    }
                    else
                    {
                        this.RouteId = default(Guid);
                    }
                    this._route.Entity = value;
                    if ((value != null))
                    {
                        value.RouteEmployeeToEmployeeSet.Add(this);
                    }
                    this.RaisePropertyChanged("Route");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid RouteId
        {
            get
            {
                return this._routeId;
            }
            set
            {
                if ((this._routeId != value))
                {
                    this.OnRouteIdChanging(value);
                    this.RaiseDataMemberChanging("RouteId");
                    this.ValidateProperty("RouteId", value);
                    this._routeId = value;
                    this.RaiseDataMemberChanged("RouteId");
                    this.OnRouteIdChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.Id == this.EmployeeId);
        }
        
        private bool FilterRoute(Route entity)
        {
            return (entity.Id == this.RouteId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._employeeId, this._routeId);
        }
    }
    
    /// <summary>
    /// The 'RouteTask' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RouteTask : Entity
    {
        
        private Guid _businessAccountId;
        
        private EntityRef<Client> _client;
        
        private Nullable<Guid> _clientId;
        
        private DateTime _date;
        
        private TimeSpan _estimatedDuration;
        
        private bool _generatedOnServer;
        
        private Guid _id;
        
        private EntityRef<Location> _location;
        
        private Nullable<Guid> _locationId;
        
        private string _name;
        
        private EntityRef<BusinessAccount> _ownerBusinessAccount;
        
        private bool _readOnly;
        
        private bool _readyToInvoice;
        
        private EntityRef<RouteDestination> _routeDestination;
        
        private Nullable<Guid> _routeDestinationId;
        
        private EntityRef<Service> _service;
        
        private Nullable<Guid> _serviceId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessAccountIdChanging(Guid value);
        partial void OnBusinessAccountIdChanged();
        partial void OnClientIdChanging(Nullable<Guid> value);
        partial void OnClientIdChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnEstimatedDurationChanging(TimeSpan value);
        partial void OnEstimatedDurationChanged();
        partial void OnGeneratedOnServerChanging(bool value);
        partial void OnGeneratedOnServerChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnReadOnlyChanging(bool value);
        partial void OnReadOnlyChanged();
        partial void OnReadyToInvoiceChanging(bool value);
        partial void OnReadyToInvoiceChanged();
        partial void OnRouteDestinationIdChanging(Nullable<Guid> value);
        partial void OnRouteDestinationIdChanged();
        partial void OnServiceIdChanging(Nullable<Guid> value);
        partial void OnServiceIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteTask"/> class.
        /// </summary>
        public RouteTask()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid BusinessAccountId
        {
            get
            {
                return this._businessAccountId;
            }
            set
            {
                if ((this._businessAccountId != value))
                {
                    this.OnBusinessAccountIdChanging(value);
                    this.RaiseDataMemberChanging("BusinessAccountId");
                    this.ValidateProperty("BusinessAccountId", value);
                    this._businessAccountId = value;
                    this.RaiseDataMemberChanged("BusinessAccountId");
                    this.OnBusinessAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_RouteTask", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.RouteTasks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Nullable<Guid>);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.RouteTasks.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EstimatedDuration' value.
        /// </summary>
        [DataMember()]
        public TimeSpan EstimatedDuration
        {
            get
            {
                return this._estimatedDuration;
            }
            set
            {
                if ((this._estimatedDuration != value))
                {
                    this.OnEstimatedDurationChanging(value);
                    this.RaiseDataMemberChanging("EstimatedDuration");
                    this.ValidateProperty("EstimatedDuration", value);
                    this._estimatedDuration = value;
                    this.RaiseDataMemberChanged("EstimatedDuration");
                    this.OnEstimatedDurationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GeneratedOnServer' value.
        /// </summary>
        [DataMember()]
        public bool GeneratedOnServer
        {
            get
            {
                return this._generatedOnServer;
            }
            set
            {
                if ((this._generatedOnServer != value))
                {
                    this.OnGeneratedOnServerChanging(value);
                    this.RaiseDataMemberChanging("GeneratedOnServer");
                    this.ValidateProperty("GeneratedOnServer", value);
                    this._generatedOnServer = value;
                    this.RaiseDataMemberChanged("GeneratedOnServer");
                    this.OnGeneratedOnServerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_RouteTask", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = new EntityRef<Location>(this, "Location", this.FilterLocation);
                }
                return this._location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if ((previous != value))
                {
                    this.ValidateProperty("Location", value);
                    if ((previous != null))
                    {
                        this._location.Entity = null;
                        previous.RouteTasks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._location.Entity = value;
                    if ((value != null))
                    {
                        value.RouteTasks.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_RouteTask", "BusinessAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount OwnerBusinessAccount
        {
            get
            {
                if ((this._ownerBusinessAccount == null))
                {
                    this._ownerBusinessAccount = new EntityRef<BusinessAccount>(this, "OwnerBusinessAccount", this.FilterOwnerBusinessAccount);
                }
                return this._ownerBusinessAccount.Entity;
            }
            set
            {
                BusinessAccount previous = this.OwnerBusinessAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerBusinessAccount", value);
                    if ((previous != null))
                    {
                        this._ownerBusinessAccount.Entity = null;
                        previous.RouteTasks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessAccountId = value.Id;
                    }
                    else
                    {
                        this.BusinessAccountId = default(Guid);
                    }
                    this._ownerBusinessAccount.Entity = value;
                    if ((value != null))
                    {
                        value.RouteTasks.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerBusinessAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadOnly' value.
        /// </summary>
        [DataMember()]
        public bool ReadOnly
        {
            get
            {
                return this._readOnly;
            }
            set
            {
                if ((this._readOnly != value))
                {
                    this.OnReadOnlyChanging(value);
                    this.RaiseDataMemberChanging("ReadOnly");
                    this.ValidateProperty("ReadOnly", value);
                    this._readOnly = value;
                    this.RaiseDataMemberChanged("ReadOnly");
                    this.OnReadOnlyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadyToInvoice' value.
        /// </summary>
        [DataMember()]
        public bool ReadyToInvoice
        {
            get
            {
                return this._readyToInvoice;
            }
            set
            {
                if ((this._readyToInvoice != value))
                {
                    this.OnReadyToInvoiceChanging(value);
                    this.RaiseDataMemberChanging("ReadyToInvoice");
                    this.ValidateProperty("ReadyToInvoice", value);
                    this._readyToInvoice = value;
                    this.RaiseDataMemberChanged("ReadyToInvoice");
                    this.OnReadyToInvoiceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RouteDestination"/> entity.
        /// </summary>
        [Association("RouteDestination_RouteTask", "RouteDestinationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public RouteDestination RouteDestination
        {
            get
            {
                if ((this._routeDestination == null))
                {
                    this._routeDestination = new EntityRef<RouteDestination>(this, "RouteDestination", this.FilterRouteDestination);
                }
                return this._routeDestination.Entity;
            }
            set
            {
                RouteDestination previous = this.RouteDestination;
                if ((previous != value))
                {
                    this.ValidateProperty("RouteDestination", value);
                    if ((previous != null))
                    {
                        this._routeDestination.Entity = null;
                        previous.RouteTasks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RouteDestinationId = value.Id;
                    }
                    else
                    {
                        this.RouteDestinationId = default(Nullable<Guid>);
                    }
                    this._routeDestination.Entity = value;
                    if ((value != null))
                    {
                        value.RouteTasks.Add(this);
                    }
                    this.RaisePropertyChanged("RouteDestination");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteDestinationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> RouteDestinationId
        {
            get
            {
                return this._routeDestinationId;
            }
            set
            {
                if ((this._routeDestinationId != value))
                {
                    this.OnRouteDestinationIdChanging(value);
                    this.RaiseDataMemberChanging("RouteDestinationId");
                    this.ValidateProperty("RouteDestinationId", value);
                    this._routeDestinationId = value;
                    this.RaiseDataMemberChanged("RouteDestinationId");
                    this.OnRouteDestinationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Service"/> entity.
        /// </summary>
        [Association("Service_RouteTask", "ServiceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Service Service
        {
            get
            {
                if ((this._service == null))
                {
                    this._service = new EntityRef<Service>(this, "Service", this.FilterService);
                }
                return this._service.Entity;
            }
            set
            {
                Service previous = this.Service;
                if ((previous != value))
                {
                    this.ValidateProperty("Service", value);
                    if ((previous != null))
                    {
                        this._service.Entity = null;
                        previous.RouteTasks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ServiceId = value.Id;
                    }
                    else
                    {
                        this.ServiceId = default(Nullable<Guid>);
                    }
                    this._service.Entity = value;
                    if ((value != null))
                    {
                        value.RouteTasks.Add(this);
                    }
                    this.RaisePropertyChanged("Service");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServiceId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> ServiceId
        {
            get
            {
                return this._serviceId;
            }
            set
            {
                if ((this._serviceId != value))
                {
                    this.OnServiceIdChanging(value);
                    this.RaiseDataMemberChanging("ServiceId");
                    this.ValidateProperty("ServiceId", value);
                    this._serviceId = value;
                    this.RaiseDataMemberChanged("ServiceId");
                    this.OnServiceIdChanged();
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        private bool FilterOwnerBusinessAccount(BusinessAccount entity)
        {
            return (entity.Id == this.BusinessAccountId);
        }
        
        private bool FilterRouteDestination(RouteDestination entity)
        {
            return (entity.Id == this.RouteDestinationId);
        }
        
        private bool FilterService(Service entity)
        {
            return (entity.Id == this.ServiceId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RouteVehicle' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class RouteVehicle : Entity
    {
        
        private EntityRef<Route> _route;
        
        private Guid _routeId;
        
        private EntityRef<Vehicle> _vehicle;
        
        private Guid _vehicleId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRouteIdChanging(Guid value);
        partial void OnRouteIdChanged();
        partial void OnVehicleIdChanging(Guid value);
        partial void OnVehicleIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteVehicle"/> class.
        /// </summary>
        public RouteVehicle()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Route"/> entity.
        /// </summary>
        [Association("RouteVehicleToRouteSet", "RouteId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Route Route
        {
            get
            {
                if ((this._route == null))
                {
                    this._route = new EntityRef<Route>(this, "Route", this.FilterRoute);
                }
                return this._route.Entity;
            }
            set
            {
                Route previous = this.Route;
                if ((previous != value))
                {
                    this.ValidateProperty("Route", value);
                    if ((previous != null))
                    {
                        this._route.Entity = null;
                        previous.RouteVehicleToVehicleSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RouteId = value.Id;
                    }
                    else
                    {
                        this.RouteId = default(Guid);
                    }
                    this._route.Entity = value;
                    if ((value != null))
                    {
                        value.RouteVehicleToVehicleSet.Add(this);
                    }
                    this.RaisePropertyChanged("Route");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RouteId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid RouteId
        {
            get
            {
                return this._routeId;
            }
            set
            {
                if ((this._routeId != value))
                {
                    this.OnRouteIdChanging(value);
                    this.RaiseDataMemberChanging("RouteId");
                    this.ValidateProperty("RouteId", value);
                    this._routeId = value;
                    this.RaiseDataMemberChanged("RouteId");
                    this.OnRouteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Vehicle"/> entity.
        /// </summary>
        [Association("RouteVehicleToVehicleSet", "VehicleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Vehicle Vehicle
        {
            get
            {
                if ((this._vehicle == null))
                {
                    this._vehicle = new EntityRef<Vehicle>(this, "Vehicle", this.FilterVehicle);
                }
                return this._vehicle.Entity;
            }
            set
            {
                Vehicle previous = this.Vehicle;
                if ((previous != value))
                {
                    this.ValidateProperty("Vehicle", value);
                    if ((previous != null))
                    {
                        this._vehicle.Entity = null;
                        previous.RouteVehicleToRouteSet.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.VehicleId = value.Id;
                    }
                    else
                    {
                        this.VehicleId = default(Guid);
                    }
                    this._vehicle.Entity = value;
                    if ((value != null))
                    {
                        value.RouteVehicleToRouteSet.Add(this);
                    }
                    this.RaisePropertyChanged("Vehicle");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VehicleId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid VehicleId
        {
            get
            {
                return this._vehicleId;
            }
            set
            {
                if ((this._vehicleId != value))
                {
                    this.OnVehicleIdChanging(value);
                    this.RaiseDataMemberChanging("VehicleId");
                    this.ValidateProperty("VehicleId", value);
                    this._vehicleId = value;
                    this.RaiseDataMemberChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }
        
        private bool FilterRoute(Route entity)
        {
            return (entity.Id == this.RouteId);
        }
        
        private bool FilterVehicle(Vehicle entity)
        {
            return (entity.Id == this.VehicleId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._routeId, this._vehicleId);
        }
    }
    
    /// <summary>
    /// The 'SalesTerm' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class SalesTerm : Entity
    {
        
        private EntityRef<BusinessAccount> _businessAccount;
        
        private Nullable<Guid> _businessAccountId;
        
        private EntityCollection<Client> _clients;
        
        private string _createTime;
        
        private Nullable<int> _dueDays;
        
        private Guid _id;
        
        private EntityCollection<Invoice> _invoices;
        
        private bool _isDueDaysChanged;
        
        private bool _isNameChanged;
        
        private string _lastUpdatedTime;
        
        private string _name;
        
        private string _quickBooksId;
        
        private string _syncToken;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBusinessAccountIdChanging(Nullable<Guid> value);
        partial void OnBusinessAccountIdChanged();
        partial void OnCreateTimeChanging(string value);
        partial void OnCreateTimeChanged();
        partial void OnDueDaysChanging(Nullable<int> value);
        partial void OnDueDaysChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIsDueDaysChangedChanging(bool value);
        partial void OnIsDueDaysChangedChanged();
        partial void OnIsNameChangedChanging(bool value);
        partial void OnIsNameChangedChanged();
        partial void OnLastUpdatedTimeChanging(string value);
        partial void OnLastUpdatedTimeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnQuickBooksIdChanging(string value);
        partial void OnQuickBooksIdChanged();
        partial void OnSyncTokenChanging(string value);
        partial void OnSyncTokenChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesTerm"/> class.
        /// </summary>
        public SalesTerm()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_SalesTerm", "BusinessAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount BusinessAccount
        {
            get
            {
                if ((this._businessAccount == null))
                {
                    this._businessAccount = new EntityRef<BusinessAccount>(this, "BusinessAccount", this.FilterBusinessAccount);
                }
                return this._businessAccount.Entity;
            }
            set
            {
                BusinessAccount previous = this.BusinessAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("BusinessAccount", value);
                    if ((previous != null))
                    {
                        this._businessAccount.Entity = null;
                        previous.SalesTerms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.BusinessAccountId = value.Id;
                    }
                    else
                    {
                        this.BusinessAccountId = default(Nullable<Guid>);
                    }
                    this._businessAccount.Entity = value;
                    if ((value != null))
                    {
                        value.SalesTerms.Add(this);
                    }
                    this.RaisePropertyChanged("BusinessAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> BusinessAccountId
        {
            get
            {
                return this._businessAccountId;
            }
            set
            {
                if ((this._businessAccountId != value))
                {
                    this.OnBusinessAccountIdChanging(value);
                    this.RaiseDataMemberChanging("BusinessAccountId");
                    this.ValidateProperty("BusinessAccountId", value);
                    this._businessAccountId = value;
                    this.RaiseDataMemberChanged("BusinessAccountId");
                    this.OnBusinessAccountIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Client"/> entity instances.
        /// </summary>
        [Association("SalesTerm_Client", "Id", "SalesTermId")]
        [XmlIgnore()]
        public EntityCollection<Client> Clients
        {
            get
            {
                if ((this._clients == null))
                {
                    this._clients = new EntityCollection<Client>(this, "Clients", this.FilterClients, this.AttachClients, this.DetachClients);
                }
                return this._clients;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateTime' value.
        /// </summary>
        [DataMember()]
        public string CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDays' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DueDays
        {
            get
            {
                return this._dueDays;
            }
            set
            {
                if ((this._dueDays != value))
                {
                    this.OnDueDaysChanging(value);
                    this.RaiseDataMemberChanging("DueDays");
                    this.ValidateProperty("DueDays", value);
                    this._dueDays = value;
                    this.RaiseDataMemberChanged("DueDays");
                    this.OnDueDaysChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Invoice"/> entity instances.
        /// </summary>
        [Association("SalesTerm_Invoice", "Id", "SalesTermId")]
        [XmlIgnore()]
        public EntityCollection<Invoice> Invoices
        {
            get
            {
                if ((this._invoices == null))
                {
                    this._invoices = new EntityCollection<Invoice>(this, "Invoices", this.FilterInvoices, this.AttachInvoices, this.DetachInvoices);
                }
                return this._invoices;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDueDaysChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsDueDaysChanged
        {
            get
            {
                return this._isDueDaysChanged;
            }
            set
            {
                if ((this._isDueDaysChanged != value))
                {
                    this.OnIsDueDaysChangedChanging(value);
                    this.RaiseDataMemberChanging("IsDueDaysChanged");
                    this.ValidateProperty("IsDueDaysChanged", value);
                    this._isDueDaysChanged = value;
                    this.RaiseDataMemberChanged("IsDueDaysChanged");
                    this.OnIsDueDaysChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNameChanged' value.
        /// </summary>
        [DataMember()]
        public bool IsNameChanged
        {
            get
            {
                return this._isNameChanged;
            }
            set
            {
                if ((this._isNameChanged != value))
                {
                    this.OnIsNameChangedChanging(value);
                    this.RaiseDataMemberChanging("IsNameChanged");
                    this.ValidateProperty("IsNameChanged", value);
                    this._isNameChanged = value;
                    this.RaiseDataMemberChanged("IsNameChanged");
                    this.OnIsNameChangedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdatedTime' value.
        /// </summary>
        [DataMember()]
        public string LastUpdatedTime
        {
            get
            {
                return this._lastUpdatedTime;
            }
            set
            {
                if ((this._lastUpdatedTime != value))
                {
                    this.OnLastUpdatedTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedTime");
                    this.ValidateProperty("LastUpdatedTime", value);
                    this._lastUpdatedTime = value;
                    this.RaiseDataMemberChanged("LastUpdatedTime");
                    this.OnLastUpdatedTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuickBooksId' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string QuickBooksId
        {
            get
            {
                return this._quickBooksId;
            }
            set
            {
                if ((this._quickBooksId != value))
                {
                    this.OnQuickBooksIdChanging(value);
                    this.RaiseDataMemberChanging("QuickBooksId");
                    this.ValidateProperty("QuickBooksId", value);
                    this._quickBooksId = value;
                    this.RaiseDataMemberChanged("QuickBooksId");
                    this.OnQuickBooksIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SyncToken' value.
        /// </summary>
        [DataMember()]
        public string SyncToken
        {
            get
            {
                return this._syncToken;
            }
            set
            {
                if ((this._syncToken != value))
                {
                    this.OnSyncTokenChanging(value);
                    this.RaiseDataMemberChanging("SyncToken");
                    this.ValidateProperty("SyncToken", value);
                    this._syncToken = value;
                    this.RaiseDataMemberChanged("SyncToken");
                    this.OnSyncTokenChanged();
                }
            }
        }
        
        private bool FilterBusinessAccount(BusinessAccount entity)
        {
            return (entity.Id == this.BusinessAccountId);
        }
        
        private void AttachClients(Client entity)
        {
            entity.DefaultSalesTerm = this;
        }
        
        private void DetachClients(Client entity)
        {
            entity.DefaultSalesTerm = null;
        }
        
        private bool FilterClients(Client entity)
        {
            return (entity.SalesTermId == this.Id);
        }
        
        private void AttachInvoices(Invoice entity)
        {
            entity.SalesTerm = this;
        }
        
        private void DetachInvoices(Invoice entity)
        {
            entity.SalesTerm = null;
        }
        
        private bool FilterInvoices(Invoice entity)
        {
            return (entity.SalesTermId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Service' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Service : Entity
    {
        
        private EntityRef<Client> _client;
        
        private Guid _clientId;
        
        private bool _generated;
        
        private Guid _id;
        
        private Nullable<Guid> _recurringServiceId;
        
        private EntityRef<RecurringService> _recurringServiceParent;
        
        private EntityCollection<RouteTask> _routeTasks;
        
        private DateTime _serviceDate;
        
        private EntityRef<BusinessAccount> _serviceProvider;
        
        private Guid _serviceProviderId;
        
        private EntityRef<ServiceTemplate> _serviceTemplate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientIdChanging(Guid value);
        partial void OnClientIdChanged();
        partial void OnGeneratedChanging(bool value);
        partial void OnGeneratedChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnRecurringServiceIdChanging(Nullable<Guid> value);
        partial void OnRecurringServiceIdChanged();
        partial void OnServiceDateChanging(DateTime value);
        partial void OnServiceDateChanged();
        partial void OnServiceProviderIdChanging(Guid value);
        partial void OnServiceProviderIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Service"/> class.
        /// </summary>
        public Service()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_Service", "ClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client Client
        {
            get
            {
                if ((this._client == null))
                {
                    this._client = new EntityRef<Client>(this, "Client", this.FilterClient);
                }
                return this._client.Entity;
            }
            set
            {
                Client previous = this.Client;
                if ((previous != value))
                {
                    this.ValidateProperty("Client", value);
                    if ((previous != null))
                    {
                        this._client.Entity = null;
                        previous.ServicesToRecieve.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ClientId = value.Id;
                    }
                    else
                    {
                        this.ClientId = default(Guid);
                    }
                    this._client.Entity = value;
                    if ((value != null))
                    {
                        value.ServicesToRecieve.Add(this);
                    }
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid ClientId
        {
            get
            {
                return this._clientId;
            }
            set
            {
                if ((this._clientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.RaiseDataMemberChanging("ClientId");
                    this.ValidateProperty("ClientId", value);
                    this._clientId = value;
                    this.RaiseDataMemberChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Generated' value.
        /// </summary>
        [DataMember()]
        public bool Generated
        {
            get
            {
                return this._generated;
            }
            set
            {
                if ((this._generated != value))
                {
                    this.OnGeneratedChanging(value);
                    this.RaiseDataMemberChanging("Generated");
                    this.ValidateProperty("Generated", value);
                    this._generated = value;
                    this.RaiseDataMemberChanged("Generated");
                    this.OnGeneratedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecurringServiceId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> RecurringServiceId
        {
            get
            {
                return this._recurringServiceId;
            }
            set
            {
                if ((this._recurringServiceId != value))
                {
                    this.OnRecurringServiceIdChanging(value);
                    this.RaiseDataMemberChanging("RecurringServiceId");
                    this.ValidateProperty("RecurringServiceId", value);
                    this._recurringServiceId = value;
                    this.RaiseDataMemberChanged("RecurringServiceId");
                    this.OnRecurringServiceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RecurringService"/> entity.
        /// </summary>
        [Association("RecurringService_Service", "RecurringServiceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public RecurringService RecurringServiceParent
        {
            get
            {
                if ((this._recurringServiceParent == null))
                {
                    this._recurringServiceParent = new EntityRef<RecurringService>(this, "RecurringServiceParent", this.FilterRecurringServiceParent);
                }
                return this._recurringServiceParent.Entity;
            }
            set
            {
                RecurringService previous = this.RecurringServiceParent;
                if ((previous != value))
                {
                    this.ValidateProperty("RecurringServiceParent", value);
                    if ((previous != null))
                    {
                        this._recurringServiceParent.Entity = null;
                        previous.GeneratedServices.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RecurringServiceId = value.Id;
                    }
                    else
                    {
                        this.RecurringServiceId = default(Nullable<Guid>);
                    }
                    this._recurringServiceParent.Entity = value;
                    if ((value != null))
                    {
                        value.GeneratedServices.Add(this);
                    }
                    this.RaisePropertyChanged("RecurringServiceParent");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteTask"/> entity instances.
        /// </summary>
        [Association("Service_RouteTask", "Id", "ServiceId")]
        [XmlIgnore()]
        public EntityCollection<RouteTask> RouteTasks
        {
            get
            {
                if ((this._routeTasks == null))
                {
                    this._routeTasks = new EntityCollection<RouteTask>(this, "RouteTasks", this.FilterRouteTasks, this.AttachRouteTasks, this.DetachRouteTasks);
                }
                return this._routeTasks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServiceDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ServiceDate
        {
            get
            {
                return this._serviceDate;
            }
            set
            {
                if ((this._serviceDate != value))
                {
                    this.OnServiceDateChanging(value);
                    this.RaiseDataMemberChanging("ServiceDate");
                    this.ValidateProperty("ServiceDate", value);
                    this._serviceDate = value;
                    this.RaiseDataMemberChanged("ServiceDate");
                    this.OnServiceDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_Service", "ServiceProviderId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount ServiceProvider
        {
            get
            {
                if ((this._serviceProvider == null))
                {
                    this._serviceProvider = new EntityRef<BusinessAccount>(this, "ServiceProvider", this.FilterServiceProvider);
                }
                return this._serviceProvider.Entity;
            }
            set
            {
                BusinessAccount previous = this.ServiceProvider;
                if ((previous != value))
                {
                    this.ValidateProperty("ServiceProvider", value);
                    if ((previous != null))
                    {
                        this._serviceProvider.Entity = null;
                        previous.ServicesToProvide.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ServiceProviderId = value.Id;
                    }
                    else
                    {
                        this.ServiceProviderId = default(Guid);
                    }
                    this._serviceProvider.Entity = value;
                    if ((value != null))
                    {
                        value.ServicesToProvide.Add(this);
                    }
                    this.RaisePropertyChanged("ServiceProvider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServiceProviderId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid ServiceProviderId
        {
            get
            {
                return this._serviceProviderId;
            }
            set
            {
                if ((this._serviceProviderId != value))
                {
                    this.OnServiceProviderIdChanging(value);
                    this.RaiseDataMemberChanging("ServiceProviderId");
                    this.ValidateProperty("ServiceProviderId", value);
                    this._serviceProviderId = value;
                    this.RaiseDataMemberChanged("ServiceProviderId");
                    this.OnServiceProviderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ServiceTemplate"/> entity.
        /// </summary>
        [Association("ServiceTemplate_Service", "Id", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public ServiceTemplate ServiceTemplate
        {
            get
            {
                if ((this._serviceTemplate == null))
                {
                    this._serviceTemplate = new EntityRef<ServiceTemplate>(this, "ServiceTemplate", this.FilterServiceTemplate);
                }
                return this._serviceTemplate.Entity;
            }
            set
            {
                ServiceTemplate previous = this.ServiceTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("ServiceTemplate", value);
                    if ((previous != null))
                    {
                        this._serviceTemplate.Entity = null;
                        previous.OwnerService = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.Id;
                    }
                    else
                    {
                        this.Id = default(Guid);
                    }
                    this._serviceTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.OwnerService = this;
                    }
                    this.RaisePropertyChanged("ServiceTemplate");
                }
            }
        }
        
        private bool FilterClient(Client entity)
        {
            return (entity.Id == this.ClientId);
        }
        
        private bool FilterRecurringServiceParent(RecurringService entity)
        {
            return (entity.Id == this.RecurringServiceId);
        }
        
        private void AttachRouteTasks(RouteTask entity)
        {
            entity.Service = this;
        }
        
        private void DetachRouteTasks(RouteTask entity)
        {
            entity.Service = null;
        }
        
        private bool FilterRouteTasks(RouteTask entity)
        {
            return (entity.ServiceId == this.Id);
        }
        
        private bool FilterServiceProvider(BusinessAccount entity)
        {
            return (entity.Id == this.ServiceProviderId);
        }
        
        private bool FilterServiceTemplate(ServiceTemplate entity)
        {
            return (entity.Id == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ServiceTemplate' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class ServiceTemplate : Entity
    {
        
        private EntityCollection<ServiceTemplate> _childrenServiceTemplates;
        
        private EntityCollection<Field> _fields;
        
        private Guid _id;
        
        private EntityRef<Invoice> _invoice;
        
        private short _levelInt;
        
        private string _name;
        
        private EntityRef<Client> _ownerClient;
        
        private Nullable<Guid> _ownerClientId;
        
        private EntityRef<RecurringService> _ownerRecurringService;
        
        private EntityRef<Service> _ownerService;
        
        private EntityRef<BusinessAccount> _ownerServiceProvider;
        
        private Nullable<Guid> _ownerServiceProviderId;
        
        private Nullable<Guid> _ownerServiceTemplateId;
        
        private EntityRef<ServiceTemplate> _parentServiceTemplate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLevelIntChanging(short value);
        partial void OnLevelIntChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOwnerClientIdChanging(Nullable<Guid> value);
        partial void OnOwnerClientIdChanged();
        partial void OnOwnerServiceProviderIdChanging(Nullable<Guid> value);
        partial void OnOwnerServiceProviderIdChanged();
        partial void OnOwnerServiceTemplateIdChanging(Nullable<Guid> value);
        partial void OnOwnerServiceTemplateIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceTemplate"/> class.
        /// </summary>
        public ServiceTemplate()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ServiceTemplate"/> entity instances.
        /// </summary>
        [Association("ServiceTemplate_ServiceTemplate", "Id", "OwnerServiceTemplateId")]
        [XmlIgnore()]
        public EntityCollection<ServiceTemplate> ChildrenServiceTemplates
        {
            get
            {
                if ((this._childrenServiceTemplates == null))
                {
                    this._childrenServiceTemplates = new EntityCollection<ServiceTemplate>(this, "ChildrenServiceTemplates", this.FilterChildrenServiceTemplates, this.AttachChildrenServiceTemplates, this.DetachChildrenServiceTemplates);
                }
                return this._childrenServiceTemplates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Field"/> entity instances.
        /// </summary>
        [Association("ServiceTemplate_Field", "Id", "ServiceTemplateId")]
        [XmlIgnore()]
        public EntityCollection<Field> Fields
        {
            get
            {
                if ((this._fields == null))
                {
                    this._fields = new EntityCollection<Field>(this, "Fields", this.FilterFields, this.AttachFields, this.DetachFields);
                }
                return this._fields;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Invoice"/> entity.
        /// </summary>
        [Association("ServiceTemplate_Invoice", "Id", "Id")]
        [XmlIgnore()]
        public Invoice Invoice
        {
            get
            {
                if ((this._invoice == null))
                {
                    this._invoice = new EntityRef<Invoice>(this, "Invoice", this.FilterInvoice);
                }
                return this._invoice.Entity;
            }
            set
            {
                Invoice previous = this.Invoice;
                if ((previous != value))
                {
                    this.ValidateProperty("Invoice", value);
                    if ((previous != null))
                    {
                        this._invoice.Entity = null;
                        previous.ServiceTemplate = null;
                    }
                    this._invoice.Entity = value;
                    if ((value != null))
                    {
                        value.ServiceTemplate = this;
                    }
                    this.RaisePropertyChanged("Invoice");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LevelInt' value.
        /// </summary>
        [DataMember()]
        public short LevelInt
        {
            get
            {
                return this._levelInt;
            }
            set
            {
                if ((this._levelInt != value))
                {
                    this.OnLevelIntChanging(value);
                    this.RaiseDataMemberChanging("LevelInt");
                    this.ValidateProperty("LevelInt", value);
                    this._levelInt = value;
                    this.RaiseDataMemberChanged("LevelInt");
                    this.OnLevelIntChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Client"/> entity.
        /// </summary>
        [Association("Client_ServiceTemplate", "OwnerClientId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Client OwnerClient
        {
            get
            {
                if ((this._ownerClient == null))
                {
                    this._ownerClient = new EntityRef<Client>(this, "OwnerClient", this.FilterOwnerClient);
                }
                return this._ownerClient.Entity;
            }
            set
            {
                Client previous = this.OwnerClient;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerClient", value);
                    if ((previous != null))
                    {
                        this._ownerClient.Entity = null;
                        previous.ServiceTemplates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerClientId = value.Id;
                    }
                    else
                    {
                        this.OwnerClientId = default(Nullable<Guid>);
                    }
                    this._ownerClient.Entity = value;
                    if ((value != null))
                    {
                        value.ServiceTemplates.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerClient");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerClientId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> OwnerClientId
        {
            get
            {
                return this._ownerClientId;
            }
            set
            {
                if ((this._ownerClientId != value))
                {
                    this.OnOwnerClientIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerClientId");
                    this.ValidateProperty("OwnerClientId", value);
                    this._ownerClientId = value;
                    this.RaiseDataMemberChanged("OwnerClientId");
                    this.OnOwnerClientIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="RecurringService"/> entity.
        /// </summary>
        [Association("ServiceTemplate_RecurringService", "Id", "Id")]
        [XmlIgnore()]
        public RecurringService OwnerRecurringService
        {
            get
            {
                if ((this._ownerRecurringService == null))
                {
                    this._ownerRecurringService = new EntityRef<RecurringService>(this, "OwnerRecurringService", this.FilterOwnerRecurringService);
                }
                return this._ownerRecurringService.Entity;
            }
            set
            {
                RecurringService previous = this.OwnerRecurringService;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerRecurringService", value);
                    if ((previous != null))
                    {
                        this._ownerRecurringService.Entity = null;
                        previous.ServiceTemplate = null;
                    }
                    this._ownerRecurringService.Entity = value;
                    if ((value != null))
                    {
                        value.ServiceTemplate = this;
                    }
                    this.RaisePropertyChanged("OwnerRecurringService");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Service"/> entity.
        /// </summary>
        [Association("ServiceTemplate_Service", "Id", "Id")]
        [XmlIgnore()]
        public Service OwnerService
        {
            get
            {
                if ((this._ownerService == null))
                {
                    this._ownerService = new EntityRef<Service>(this, "OwnerService", this.FilterOwnerService);
                }
                return this._ownerService.Entity;
            }
            set
            {
                Service previous = this.OwnerService;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerService", value);
                    if ((previous != null))
                    {
                        this._ownerService.Entity = null;
                        previous.ServiceTemplate = null;
                    }
                    this._ownerService.Entity = value;
                    if ((value != null))
                    {
                        value.ServiceTemplate = this;
                    }
                    this.RaisePropertyChanged("OwnerService");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="BusinessAccount"/> entity.
        /// </summary>
        [Association("BusinessAccount_ServiceTemplate", "OwnerServiceProviderId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public BusinessAccount OwnerServiceProvider
        {
            get
            {
                if ((this._ownerServiceProvider == null))
                {
                    this._ownerServiceProvider = new EntityRef<BusinessAccount>(this, "OwnerServiceProvider", this.FilterOwnerServiceProvider);
                }
                return this._ownerServiceProvider.Entity;
            }
            set
            {
                BusinessAccount previous = this.OwnerServiceProvider;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerServiceProvider", value);
                    if ((previous != null))
                    {
                        this._ownerServiceProvider.Entity = null;
                        previous.ServiceTemplates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerServiceProviderId = value.Id;
                    }
                    else
                    {
                        this.OwnerServiceProviderId = default(Nullable<Guid>);
                    }
                    this._ownerServiceProvider.Entity = value;
                    if ((value != null))
                    {
                        value.ServiceTemplates.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerServiceProvider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerServiceProviderId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> OwnerServiceProviderId
        {
            get
            {
                return this._ownerServiceProviderId;
            }
            set
            {
                if ((this._ownerServiceProviderId != value))
                {
                    this.OnOwnerServiceProviderIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerServiceProviderId");
                    this.ValidateProperty("OwnerServiceProviderId", value);
                    this._ownerServiceProviderId = value;
                    this.RaiseDataMemberChanged("OwnerServiceProviderId");
                    this.OnOwnerServiceProviderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerServiceTemplateId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> OwnerServiceTemplateId
        {
            get
            {
                return this._ownerServiceTemplateId;
            }
            set
            {
                if ((this._ownerServiceTemplateId != value))
                {
                    this.OnOwnerServiceTemplateIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerServiceTemplateId");
                    this.ValidateProperty("OwnerServiceTemplateId", value);
                    this._ownerServiceTemplateId = value;
                    this.RaiseDataMemberChanged("OwnerServiceTemplateId");
                    this.OnOwnerServiceTemplateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ServiceTemplate"/> entity.
        /// </summary>
        [Association("ServiceTemplate_ServiceTemplate", "OwnerServiceTemplateId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public ServiceTemplate ParentServiceTemplate
        {
            get
            {
                if ((this._parentServiceTemplate == null))
                {
                    this._parentServiceTemplate = new EntityRef<ServiceTemplate>(this, "ParentServiceTemplate", this.FilterParentServiceTemplate);
                }
                return this._parentServiceTemplate.Entity;
            }
            set
            {
                ServiceTemplate previous = this.ParentServiceTemplate;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentServiceTemplate", value);
                    if ((previous != null))
                    {
                        this._parentServiceTemplate.Entity = null;
                        previous.ChildrenServiceTemplates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerServiceTemplateId = value.Id;
                    }
                    else
                    {
                        this.OwnerServiceTemplateId = default(Nullable<Guid>);
                    }
                    this._parentServiceTemplate.Entity = value;
                    if ((value != null))
                    {
                        value.ChildrenServiceTemplates.Add(this);
                    }
                    this.RaisePropertyChanged("ParentServiceTemplate");
                }
            }
        }
        
        private void AttachChildrenServiceTemplates(ServiceTemplate entity)
        {
            entity.ParentServiceTemplate = this;
        }
        
        private void DetachChildrenServiceTemplates(ServiceTemplate entity)
        {
            entity.ParentServiceTemplate = null;
        }
        
        private bool FilterChildrenServiceTemplates(ServiceTemplate entity)
        {
            return (entity.OwnerServiceTemplateId == this.Id);
        }
        
        private void AttachFields(Field entity)
        {
            entity.OwnerServiceTemplate = this;
        }
        
        private void DetachFields(Field entity)
        {
            entity.OwnerServiceTemplate = null;
        }
        
        private bool FilterFields(Field entity)
        {
            return (entity.ServiceTemplateId == this.Id);
        }
        
        private bool FilterInvoice(Invoice entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterOwnerClient(Client entity)
        {
            return (entity.Id == this.OwnerClientId);
        }
        
        private bool FilterOwnerRecurringService(RecurringService entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterOwnerService(Service entity)
        {
            return (entity.Id == this.Id);
        }
        
        private bool FilterOwnerServiceProvider(BusinessAccount entity)
        {
            return (entity.Id == this.OwnerServiceProviderId);
        }
        
        private bool FilterParentServiceTemplate(ServiceTemplate entity)
        {
            return (entity.Id == this.OwnerServiceTemplateId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'SubLocation' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class SubLocation : Entity
    {
        
        private Guid _id;
        
        private Nullable<decimal> _latitude;
        
        private EntityRef<Location> _location;
        
        private Nullable<Guid> _locationId;
        
        private Nullable<decimal> _longitude;
        
        private string _name;
        
        private string _notes;
        
        private int _number;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLatitudeChanging(Nullable<decimal> value);
        partial void OnLatitudeChanged();
        partial void OnLocationIdChanging(Nullable<Guid> value);
        partial void OnLocationIdChanged();
        partial void OnLongitudeChanging(Nullable<decimal> value);
        partial void OnLongitudeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SubLocation"/> class.
        /// </summary>
        public SubLocation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Location"/> entity.
        /// </summary>
        [Association("Location_SubLocation", "LocationId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Location Location
        {
            get
            {
                if ((this._location == null))
                {
                    this._location = new EntityRef<Location>(this, "Location", this.FilterLocation);
                }
                return this._location.Entity;
            }
            set
            {
                Location previous = this.Location;
                if ((previous != value))
                {
                    this.ValidateProperty("Location", value);
                    if ((previous != null))
                    {
                        this._location.Entity = null;
                        previous.SubLocations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LocationId = value.Id;
                    }
                    else
                    {
                        this.LocationId = default(Nullable<Guid>);
                    }
                    this._location.Entity = value;
                    if ((value != null))
                    {
                        value.SubLocations.Add(this);
                    }
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Nullable<Guid> LocationId
        {
            get
            {
                return this._locationId;
            }
            set
            {
                if ((this._locationId != value))
                {
                    this.OnLocationIdChanging(value);
                    this.RaiseDataMemberChanging("LocationId");
                    this.ValidateProperty("LocationId", value);
                    this._locationId = value;
                    this.RaiseDataMemberChanged("LocationId");
                    this.OnLocationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        private bool FilterLocation(Location entity)
        {
            return (entity.Id == this.LocationId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'TextBoxField' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class TextBoxField : Field
    {
        
        private bool _isMultiline;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIsMultilineChanging(bool value);
        partial void OnIsMultilineChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBoxField"/> class.
        /// </summary>
        public TextBoxField()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IsMultiline' value.
        /// </summary>
        [DataMember()]
        public bool IsMultiline
        {
            get
            {
                return this._isMultiline;
            }
            set
            {
                if ((this._isMultiline != value))
                {
                    this.OnIsMultilineChanging(value);
                    this.RaiseDataMemberChanging("IsMultiline");
                    this.ValidateProperty("IsMultiline", value);
                    this._isMultiline = value;
                    this.RaiseDataMemberChanged("IsMultiline");
                    this.OnIsMultilineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'TrackPoint' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class TrackPoint : Entity
    {
        
        private int _compassDirection;
        
        private long _id;
        
        private double _latitude;
        
        private double _longitude;
        
        private Nullable<DateTime> _timestamp;
        
        private EntityRef<UserAccount> _userAccount;
        
        private Guid _userAccountId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompassDirectionChanging(int value);
        partial void OnCompassDirectionChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnTimestampChanging(Nullable<DateTime> value);
        partial void OnTimestampChanged();
        partial void OnUserAccountIdChanging(Guid value);
        partial void OnUserAccountIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackPoint"/> class.
        /// </summary>
        public TrackPoint()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CompassDirection' value.
        /// </summary>
        [DataMember()]
        public int CompassDirection
        {
            get
            {
                return this._compassDirection;
            }
            set
            {
                if ((this._compassDirection != value))
                {
                    this.OnCompassDirectionChanging(value);
                    this.RaiseDataMemberChanging("CompassDirection");
                    this.ValidateProperty("CompassDirection", value);
                    this._compassDirection = value;
                    this.RaiseDataMemberChanged("CompassDirection");
                    this.OnCompassDirectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public long Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public double Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public double Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timestamp' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Timestamp
        {
            get
            {
                return this._timestamp;
            }
            set
            {
                if ((this._timestamp != value))
                {
                    this.OnTimestampChanging(value);
                    this.RaiseDataMemberChanging("Timestamp");
                    this.ValidateProperty("Timestamp", value);
                    this._timestamp = value;
                    this.RaiseDataMemberChanged("Timestamp");
                    this.OnTimestampChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserAccount"/> entity.
        /// </summary>
        [Association("UserAccount_TrackPoint", "UserAccountId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UserAccount UserAccount
        {
            get
            {
                if ((this._userAccount == null))
                {
                    this._userAccount = new EntityRef<UserAccount>(this, "UserAccount", this.FilterUserAccount);
                }
                return this._userAccount.Entity;
            }
            set
            {
                UserAccount previous = this.UserAccount;
                if ((previous != value))
                {
                    this.ValidateProperty("UserAccount", value);
                    if ((previous != null))
                    {
                        this._userAccount.Entity = null;
                        previous.TrackPoints.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserAccountId = value.Id;
                    }
                    else
                    {
                        this.UserAccountId = default(Guid);
                    }
                    this._userAccount.Entity = value;
                    if ((value != null))
                    {
                        value.TrackPoints.Add(this);
                    }
                    this.RaisePropertyChanged("UserAccount");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserAccountId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid UserAccountId
        {
            get
            {
                return this._userAccountId;
            }
            set
            {
                if ((this._userAccountId != value))
                {
                    this.OnUserAccountIdChanging(value);
                    this.RaiseDataMemberChanging("UserAccountId");
                    this.ValidateProperty("UserAccountId", value);
                    this._userAccountId = value;
                    this.RaiseDataMemberChanged("UserAccountId");
                    this.OnUserAccountIdChanged();
                }
            }
        }
        
        private bool FilterUserAccount(UserAccount entity)
        {
            return (entity.Id == this.UserAccountId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'UserAccount' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class UserAccount : Person
    {
        
        private DateTime _creationDate;
        
        private string _emailAddress;
        
        private Nullable<DateTime> _lastActivity;
        
        private EntityCollection<Employee> _ofEmployees;
        
        private EntityCollection<TrackPoint> _trackPoints;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreationDateChanging(DateTime value);
        partial void OnCreationDateChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnLastActivityChanging(Nullable<DateTime> value);
        partial void OnLastActivityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAccount"/> class.
        /// </summary>
        public UserAccount()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                if ((this._creationDate != value))
                {
                    this.OnCreationDateChanging(value);
                    this.RaiseDataMemberChanging("CreationDate");
                    this.ValidateProperty("CreationDate", value);
                    this._creationDate = value;
                    this.RaiseDataMemberChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastActivity' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastActivity
        {
            get
            {
                return this._lastActivity;
            }
            set
            {
                if ((this._lastActivity != value))
                {
                    this.OnLastActivityChanging(value);
                    this.RaiseDataMemberChanging("LastActivity");
                    this.ValidateProperty("LastActivity", value);
                    this._lastActivity = value;
                    this.RaiseDataMemberChanged("LastActivity");
                    this.OnLastActivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("UserAccount_Employee", "Id", "LinkedUserAccountId")]
        [XmlIgnore()]
        public EntityCollection<Employee> OfEmployees
        {
            get
            {
                if ((this._ofEmployees == null))
                {
                    this._ofEmployees = new EntityCollection<Employee>(this, "OfEmployees", this.FilterOfEmployees, this.AttachOfEmployees, this.DetachOfEmployees);
                }
                return this._ofEmployees;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TrackPoint"/> entity instances.
        /// </summary>
        [Association("UserAccount_TrackPoint", "Id", "UserAccountId")]
        [XmlIgnore()]
        public EntityCollection<TrackPoint> TrackPoints
        {
            get
            {
                if ((this._trackPoints == null))
                {
                    this._trackPoints = new EntityCollection<TrackPoint>(this, "TrackPoints", this.FilterTrackPoints, this.AttachTrackPoints, this.DetachTrackPoints);
                }
                return this._trackPoints;
            }
        }
        
        private void AttachOfEmployees(Employee entity)
        {
            entity.LinkedUserAccount = this;
        }
        
        private void DetachOfEmployees(Employee entity)
        {
            entity.LinkedUserAccount = null;
        }
        
        private bool FilterOfEmployees(Employee entity)
        {
            return (entity.LinkedUserAccountId == this.Id);
        }
        
        private void AttachTrackPoints(TrackPoint entity)
        {
            entity.UserAccount = this;
        }
        
        private void DetachTrackPoints(TrackPoint entity)
        {
            entity.UserAccount = null;
        }
        
        private bool FilterTrackPoints(TrackPoint entity)
        {
            return (entity.UserAccountId == this.Id);
        }
    }
    
    /// <summary>
    /// The 'Vehicle' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="CoreDomainContext"/> context.
    /// The <see cref="TechnicianDomainContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class Vehicle : Entity
    {
        
        private Guid _id;
        
        private string _licensePlate;
        
        private string _make;
        
        private Nullable<int> _mileage;
        
        private string _model;
        
        private string _notes;
        
        private EntityRef<Party> _ownerParty;
        
        private Guid _ownerPartyId;
        
        private EntityCollection<RouteVehicle> _routeVehicleToRouteSet;
        
        private string _vehicleId;
        
        private EntityCollection<VehicleMaintenanceLogEntry> _vehicleMaintenanceLog;
        
        private string _vin;
        
        private Nullable<int> _year;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLicensePlateChanging(string value);
        partial void OnLicensePlateChanged();
        partial void OnMakeChanging(string value);
        partial void OnMakeChanged();
        partial void OnMileageChanging(Nullable<int> value);
        partial void OnMileageChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnOwnerPartyIdChanging(Guid value);
        partial void OnOwnerPartyIdChanged();
        partial void OnVehicleIdChanging(string value);
        partial void OnVehicleIdChanged();
        partial void OnVINChanging(string value);
        partial void OnVINChanged();
        partial void OnYearChanging(Nullable<int> value);
        partial void OnYearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle"/> class.
        /// </summary>
        public Vehicle()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LicensePlate' value.
        /// </summary>
        [DataMember()]
        public string LicensePlate
        {
            get
            {
                return this._licensePlate;
            }
            set
            {
                if ((this._licensePlate != value))
                {
                    this.OnLicensePlateChanging(value);
                    this.RaiseDataMemberChanging("LicensePlate");
                    this.ValidateProperty("LicensePlate", value);
                    this._licensePlate = value;
                    this.RaiseDataMemberChanged("LicensePlate");
                    this.OnLicensePlateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Make' value.
        /// </summary>
        [DataMember()]
        public string Make
        {
            get
            {
                return this._make;
            }
            set
            {
                if ((this._make != value))
                {
                    this.OnMakeChanging(value);
                    this.RaiseDataMemberChanging("Make");
                    this.ValidateProperty("Make", value);
                    this._make = value;
                    this.RaiseDataMemberChanged("Make");
                    this.OnMakeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mileage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Mileage
        {
            get
            {
                return this._mileage;
            }
            set
            {
                if ((this._mileage != value))
                {
                    this.OnMileageChanging(value);
                    this.RaiseDataMemberChanging("Mileage");
                    this.ValidateProperty("Mileage", value);
                    this._mileage = value;
                    this.RaiseDataMemberChanged("Mileage");
                    this.OnMileageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Party"/> entity.
        /// </summary>
        [Association("Party_Vehicle", "OwnerPartyId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Party OwnerParty
        {
            get
            {
                if ((this._ownerParty == null))
                {
                    this._ownerParty = new EntityRef<Party>(this, "OwnerParty", this.FilterOwnerParty);
                }
                return this._ownerParty.Entity;
            }
            set
            {
                Party previous = this.OwnerParty;
                if ((previous != value))
                {
                    this.ValidateProperty("OwnerParty", value);
                    if ((previous != null))
                    {
                        this._ownerParty.Entity = null;
                        previous.Vehicles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OwnerPartyId = value.Id;
                    }
                    else
                    {
                        this.OwnerPartyId = default(Guid);
                    }
                    this._ownerParty.Entity = value;
                    if ((value != null))
                    {
                        value.Vehicles.Add(this);
                    }
                    this.RaisePropertyChanged("OwnerParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OwnerPartyId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid OwnerPartyId
        {
            get
            {
                return this._ownerPartyId;
            }
            set
            {
                if ((this._ownerPartyId != value))
                {
                    this.OnOwnerPartyIdChanging(value);
                    this.RaiseDataMemberChanging("OwnerPartyId");
                    this.ValidateProperty("OwnerPartyId", value);
                    this._ownerPartyId = value;
                    this.RaiseDataMemberChanged("OwnerPartyId");
                    this.OnOwnerPartyIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="RouteVehicle"/> entity instances.
        /// </summary>
        [Association("RouteVehicleToVehicleSet", "Id", "VehicleId")]
        [Editable(false)]
        [ReadOnly(true)]
        public EntityCollection<RouteVehicle> RouteVehicleToRouteSet
        {
            get
            {
                if ((this._routeVehicleToRouteSet == null))
                {
                    this._routeVehicleToRouteSet = new EntityCollection<RouteVehicle>(this, "RouteVehicleToRouteSet", this.FilterRouteVehicleToRouteSet, this.AttachRouteVehicleToRouteSet, this.DetachRouteVehicleToRouteSet);
                }
                return this._routeVehicleToRouteSet;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VehicleId' value.
        /// </summary>
        [DataMember()]
        public string VehicleId
        {
            get
            {
                return this._vehicleId;
            }
            set
            {
                if ((this._vehicleId != value))
                {
                    this.OnVehicleIdChanging(value);
                    this.RaiseDataMemberChanging("VehicleId");
                    this.ValidateProperty("VehicleId", value);
                    this._vehicleId = value;
                    this.RaiseDataMemberChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="VehicleMaintenanceLogEntry"/> entity instances.
        /// </summary>
        [Association("Vehicle_VehicleMaintenanceLogEntry", "Id", "VehicleId")]
        [XmlIgnore()]
        public EntityCollection<VehicleMaintenanceLogEntry> VehicleMaintenanceLog
        {
            get
            {
                if ((this._vehicleMaintenanceLog == null))
                {
                    this._vehicleMaintenanceLog = new EntityCollection<VehicleMaintenanceLogEntry>(this, "VehicleMaintenanceLog", this.FilterVehicleMaintenanceLog, this.AttachVehicleMaintenanceLog, this.DetachVehicleMaintenanceLog);
                }
                return this._vehicleMaintenanceLog;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VIN' value.
        /// </summary>
        [DataMember()]
        public string VIN
        {
            get
            {
                return this._vin;
            }
            set
            {
                if ((this._vin != value))
                {
                    this.OnVINChanging(value);
                    this.RaiseDataMemberChanging("VIN");
                    this.ValidateProperty("VIN", value);
                    this._vin = value;
                    this.RaiseDataMemberChanged("VIN");
                    this.OnVINChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Year
        {
            get
            {
                return this._year;
            }
            set
            {
                if ((this._year != value))
                {
                    this.OnYearChanging(value);
                    this.RaiseDataMemberChanging("Year");
                    this.ValidateProperty("Year", value);
                    this._year = value;
                    this.RaiseDataMemberChanged("Year");
                    this.OnYearChanged();
                }
            }
        }
        
        private bool FilterOwnerParty(Party entity)
        {
            return (entity.Id == this.OwnerPartyId);
        }
        
        private void AttachRouteVehicleToRouteSet(RouteVehicle entity)
        {
            entity.Vehicle = this;
        }
        
        private void DetachRouteVehicleToRouteSet(RouteVehicle entity)
        {
            entity.Vehicle = null;
        }
        
        private bool FilterRouteVehicleToRouteSet(RouteVehicle entity)
        {
            return (entity.VehicleId == this.Id);
        }
        
        private void AttachVehicleMaintenanceLog(VehicleMaintenanceLogEntry entity)
        {
            entity.Vehicle = this;
        }
        
        private void DetachVehicleMaintenanceLog(VehicleMaintenanceLogEntry entity)
        {
            entity.Vehicle = null;
        }
        
        private bool FilterVehicleMaintenanceLog(VehicleMaintenanceLogEntry entity)
        {
            return (entity.VehicleId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'VehicleMaintenanceLineItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class VehicleMaintenanceLineItem : Entity
    {
        
        private Nullable<decimal> _cost;
        
        private string _details;
        
        private Guid _id;
        
        private string _type;
        
        private EntityRef<VehicleMaintenanceLogEntry> _vehicleMaintenanceLogEntry;
        
        private Guid _vehicleMaintenanceLogEntryId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCostChanging(Nullable<decimal> value);
        partial void OnCostChanged();
        partial void OnDetailsChanging(string value);
        partial void OnDetailsChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnVehicleMaintenanceLogEntryIdChanging(Guid value);
        partial void OnVehicleMaintenanceLogEntryIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleMaintenanceLineItem"/> class.
        /// </summary>
        public VehicleMaintenanceLineItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Cost' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Details' value.
        /// </summary>
        [DataMember()]
        public string Details
        {
            get
            {
                return this._details;
            }
            set
            {
                if ((this._details != value))
                {
                    this.OnDetailsChanging(value);
                    this.RaiseDataMemberChanging("Details");
                    this.ValidateProperty("Details", value);
                    this._details = value;
                    this.RaiseDataMemberChanged("Details");
                    this.OnDetailsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="VehicleMaintenanceLogEntry"/> entity.
        /// </summary>
        [Association("VehicleMaintenanceLogEntry_VehicleMaintenanceLineItem", "VehicleMaintenanceLogEntryId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public VehicleMaintenanceLogEntry VehicleMaintenanceLogEntry
        {
            get
            {
                if ((this._vehicleMaintenanceLogEntry == null))
                {
                    this._vehicleMaintenanceLogEntry = new EntityRef<VehicleMaintenanceLogEntry>(this, "VehicleMaintenanceLogEntry", this.FilterVehicleMaintenanceLogEntry);
                }
                return this._vehicleMaintenanceLogEntry.Entity;
            }
            set
            {
                VehicleMaintenanceLogEntry previous = this.VehicleMaintenanceLogEntry;
                if ((previous != value))
                {
                    this.ValidateProperty("VehicleMaintenanceLogEntry", value);
                    if ((previous != null))
                    {
                        this._vehicleMaintenanceLogEntry.Entity = null;
                        previous.LineItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.VehicleMaintenanceLogEntryId = value.Id;
                    }
                    else
                    {
                        this.VehicleMaintenanceLogEntryId = default(Guid);
                    }
                    this._vehicleMaintenanceLogEntry.Entity = value;
                    if ((value != null))
                    {
                        value.LineItems.Add(this);
                    }
                    this.RaisePropertyChanged("VehicleMaintenanceLogEntry");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VehicleMaintenanceLogEntryId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid VehicleMaintenanceLogEntryId
        {
            get
            {
                return this._vehicleMaintenanceLogEntryId;
            }
            set
            {
                if ((this._vehicleMaintenanceLogEntryId != value))
                {
                    this.OnVehicleMaintenanceLogEntryIdChanging(value);
                    this.RaiseDataMemberChanging("VehicleMaintenanceLogEntryId");
                    this.ValidateProperty("VehicleMaintenanceLogEntryId", value);
                    this._vehicleMaintenanceLogEntryId = value;
                    this.RaiseDataMemberChanged("VehicleMaintenanceLogEntryId");
                    this.OnVehicleMaintenanceLogEntryIdChanged();
                }
            }
        }
        
        private bool FilterVehicleMaintenanceLogEntry(VehicleMaintenanceLogEntry entity)
        {
            return (entity.Id == this.VehicleMaintenanceLogEntryId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'VehicleMaintenanceLogEntry' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FoundOps.Core.Models.CoreEntities")]
    public sealed partial class VehicleMaintenanceLogEntry : Entity
    {
        
        private string _comments;
        
        private Nullable<DateTime> _date;
        
        private Guid _id;
        
        private EntityCollection<VehicleMaintenanceLineItem> _lineItems;
        
        private Nullable<int> _mileage;
        
        private string _servicedBy;
        
        private EntityRef<Vehicle> _vehicle;
        
        private Guid _vehicleId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommentsChanging(string value);
        partial void OnCommentsChanged();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnMileageChanging(Nullable<int> value);
        partial void OnMileageChanged();
        partial void OnServicedByChanging(string value);
        partial void OnServicedByChanged();
        partial void OnVehicleIdChanging(Guid value);
        partial void OnVehicleIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleMaintenanceLogEntry"/> class.
        /// </summary>
        public VehicleMaintenanceLogEntry()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Comments' value.
        /// </summary>
        [DataMember()]
        public string Comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                if ((this._comments != value))
                {
                    this.OnCommentsChanging(value);
                    this.RaiseDataMemberChanging("Comments");
                    this.ValidateProperty("Comments", value);
                    this._comments = value;
                    this.RaiseDataMemberChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="VehicleMaintenanceLineItem"/> entity instances.
        /// </summary>
        [Association("VehicleMaintenanceLogEntry_VehicleMaintenanceLineItem", "Id", "VehicleMaintenanceLogEntryId")]
        [XmlIgnore()]
        public EntityCollection<VehicleMaintenanceLineItem> LineItems
        {
            get
            {
                if ((this._lineItems == null))
                {
                    this._lineItems = new EntityCollection<VehicleMaintenanceLineItem>(this, "LineItems", this.FilterLineItems, this.AttachLineItems, this.DetachLineItems);
                }
                return this._lineItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mileage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Mileage
        {
            get
            {
                return this._mileage;
            }
            set
            {
                if ((this._mileage != value))
                {
                    this.OnMileageChanging(value);
                    this.RaiseDataMemberChanging("Mileage");
                    this.ValidateProperty("Mileage", value);
                    this._mileage = value;
                    this.RaiseDataMemberChanged("Mileage");
                    this.OnMileageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ServicedBy' value.
        /// </summary>
        [DataMember()]
        public string ServicedBy
        {
            get
            {
                return this._servicedBy;
            }
            set
            {
                if ((this._servicedBy != value))
                {
                    this.OnServicedByChanging(value);
                    this.RaiseDataMemberChanging("ServicedBy");
                    this.ValidateProperty("ServicedBy", value);
                    this._servicedBy = value;
                    this.RaiseDataMemberChanged("ServicedBy");
                    this.OnServicedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Vehicle"/> entity.
        /// </summary>
        [Association("Vehicle_VehicleMaintenanceLogEntry", "VehicleId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Vehicle Vehicle
        {
            get
            {
                if ((this._vehicle == null))
                {
                    this._vehicle = new EntityRef<Vehicle>(this, "Vehicle", this.FilterVehicle);
                }
                return this._vehicle.Entity;
            }
            set
            {
                Vehicle previous = this.Vehicle;
                if ((previous != value))
                {
                    this.ValidateProperty("Vehicle", value);
                    if ((previous != null))
                    {
                        this._vehicle.Entity = null;
                        previous.VehicleMaintenanceLog.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.VehicleId = value.Id;
                    }
                    else
                    {
                        this.VehicleId = default(Guid);
                    }
                    this._vehicle.Entity = value;
                    if ((value != null))
                    {
                        value.VehicleMaintenanceLog.Add(this);
                    }
                    this.RaisePropertyChanged("Vehicle");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VehicleId' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute' is not visible in the client project 'FoundOps.SLClient.Data'. Are you missing an assembly reference?
        // [RoundtripOriginalAttribute()]
        // 
        [DataMember()]
        public Guid VehicleId
        {
            get
            {
                return this._vehicleId;
            }
            set
            {
                if ((this._vehicleId != value))
                {
                    this.OnVehicleIdChanging(value);
                    this.RaiseDataMemberChanging("VehicleId");
                    this.ValidateProperty("VehicleId", value);
                    this._vehicleId = value;
                    this.RaiseDataMemberChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }
        
        private void AttachLineItems(VehicleMaintenanceLineItem entity)
        {
            entity.VehicleMaintenanceLogEntry = this;
        }
        
        private void DetachLineItems(VehicleMaintenanceLineItem entity)
        {
            entity.VehicleMaintenanceLogEntry = null;
        }
        
        private bool FilterLineItems(VehicleMaintenanceLineItem entity)
        {
            return (entity.VehicleMaintenanceLogEntryId == this.Id);
        }
        
        private bool FilterVehicle(Vehicle entity)
        {
            return (entity.Id == this.VehicleId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace FoundOps.Server.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using FoundOps.Core.Models.Account.Extensions;
    using FoundOps.Core.Models.CoreEntities;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("FoundOps-Server-Services-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="WebContextUser"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<WebContextUser> WebContextUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WebContextUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WebContextUser"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WebContextUser"/> entity instances.</returns>
        public EntityQuery<WebContextUser> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<WebContextUser>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WebContextUser"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WebContextUser"/> entity instances.</returns>
        public EntityQuery<WebContextUser> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<WebContextUser>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WebContextUser"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WebContextUser"/> entity instances.</returns>
        public EntityQuery<WebContextUser> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<WebContextUser>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<WebContextUser> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<WebContextUser> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<WebContextUser> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<WebContextUser>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TechnicianDomainService' DomainService.
    /// </summary>
    public sealed partial class TechnicianDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TechnicianDomainContext"/> class.
        /// </summary>
        public TechnicianDomainContext() : 
                this(new WebDomainClient<ITechnicianDomainServiceContract>(new Uri("FoundOps-Server-Services-TechnicianDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TechnicianDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TechnicianDomainService service URI.</param>
        public TechnicianDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ITechnicianDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TechnicianDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TechnicianDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="File"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<File> Files
        {
            get
            {
                return base.EntityContainer.GetEntitySet<File>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Location"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<Location> Locations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Location>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Party"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<Party> Parties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Party>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RouteDestination"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<RouteDestination> RouteDestinations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RouteDestination>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Route"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<Route> Routes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Route>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TrackPoint"/> entity instances that have been loaded into this <see cref="TechnicianDomainContext"/> instance.
        /// </summary>
        public EntitySet<TrackPoint> TrackPoints
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TrackPoint>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="File"/> entity instances using the 'GetFiles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="File"/> entity instances.</returns>
        public EntityQuery<File> GetFilesQuery()
        {
            this.ValidateMethod("GetFilesQuery", null);
            return base.CreateQuery<File>("GetFiles", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Location"/> entity instances using the 'GetLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Location"/> entity instances.</returns>
        public EntityQuery<Location> GetLocationsQuery()
        {
            this.ValidateMethod("GetLocationsQuery", null);
            return base.CreateQuery<Location>("GetLocations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Party"/> entity instances using the 'GetParties' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Party"/> entity instances.</returns>
        public EntityQuery<Party> GetPartiesQuery()
        {
            this.ValidateMethod("GetPartiesQuery", null);
            return base.CreateQuery<Party>("GetParties", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RouteDestination"/> entity instances using the 'GetRouteDestinations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RouteDestination"/> entity instances.</returns>
        public EntityQuery<RouteDestination> GetRouteDestinationsQuery()
        {
            this.ValidateMethod("GetRouteDestinationsQuery", null);
            return base.CreateQuery<RouteDestination>("GetRouteDestinations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Route"/> entity instances using the 'GetRoutes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Route"/> entity instances.</returns>
        public EntityQuery<Route> GetRoutesQuery()
        {
            this.ValidateMethod("GetRoutesQuery", null);
            return base.CreateQuery<Route>("GetRoutes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RouteDestination"/> entity instances using the 'GetTechniciansRouteDestinationsAuthorized' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RouteDestination"/> entity instances.</returns>
        public EntityQuery<RouteDestination> GetTechniciansRouteDestinationsAuthorizedQuery()
        {
            this.ValidateMethod("GetTechniciansRouteDestinationsAuthorizedQuery", null);
            return base.CreateQuery<RouteDestination>("GetTechniciansRouteDestinationsAuthorized", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RouteDestination"/> entity instances using the 'GetTestTechniciansRouteDestinations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RouteDestination"/> entity instances.</returns>
        public EntityQuery<RouteDestination> GetTestTechniciansRouteDestinationsQuery()
        {
            this.ValidateMethod("GetTestTechniciansRouteDestinationsQuery", null);
            return base.CreateQuery<RouteDestination>("GetTestTechniciansRouteDestinations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TrackPoint"/> entity instances using the 'GetTrackPoints' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TrackPoint"/> entity instances.</returns>
        public EntityQuery<TrackPoint> GetTrackPointsQuery()
        {
            this.ValidateMethod("GetTrackPointsQuery", null);
            return base.CreateQuery<TrackPoint>("GetTrackPoints", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertTrackPoint' method of the DomainService.
        /// </summary>
        /// <param name="latitude">The value for the 'latitude' parameter of this action.</param>
        /// <param name="longitude">The value for the 'longitude' parameter of this action.</param>
        /// <param name="timeStamp">The value for the 'timeStamp' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InsertTrackPoint(long latitude, long longitude, DateTime timeStamp, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("latitude", latitude);
            parameters.Add("longitude", longitude);
            parameters.Add("timeStamp", timeStamp);
            this.ValidateMethod("InsertTrackPoint", parameters);
            return this.InvokeOperation("InsertTrackPoint", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertTrackPoint' method of the DomainService.
        /// </summary>
        /// <param name="latitude">The value for the 'latitude' parameter of this action.</param>
        /// <param name="longitude">The value for the 'longitude' parameter of this action.</param>
        /// <param name="timeStamp">The value for the 'timeStamp' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation InsertTrackPoint(long latitude, long longitude, DateTime timeStamp)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("latitude", latitude);
            parameters.Add("longitude", longitude);
            parameters.Add("timeStamp", timeStamp);
            this.ValidateMethod("InsertTrackPoint", parameters);
            return this.InvokeOperation("InsertTrackPoint", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TechnicianDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TechnicianDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ITechnicianDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFiles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetFilesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetFiles", ReplyAction="http://tempuri.org/TechnicianDomainService/GetFilesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFiles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFiles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFiles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFiles' operation.</returns>
            QueryResult<File> EndGetFiles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetLocations", ReplyAction="http://tempuri.org/TechnicianDomainService/GetLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocations' operation.</returns>
            QueryResult<Location> EndGetLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetParties' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetPartiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetParties", ReplyAction="http://tempuri.org/TechnicianDomainService/GetPartiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetParties(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetParties'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetParties'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetParties' operation.</returns>
            QueryResult<Party> EndGetParties(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRouteDestinations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetRouteDestinationsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetRouteDestinations", ReplyAction="http://tempuri.org/TechnicianDomainService/GetRouteDestinationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRouteDestinations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRouteDestinations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRouteDestinations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRouteDestinations' operation.</returns>
            QueryResult<RouteDestination> EndGetRouteDestinations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoutes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetRoutesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetRoutes", ReplyAction="http://tempuri.org/TechnicianDomainService/GetRoutesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRoutes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoutes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoutes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoutes' operation.</returns>
            QueryResult<Route> EndGetRoutes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTechniciansRouteDestinationsAuthorized' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetTechniciansRouteDestinationsAuthori" +
                "zedDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetTechniciansRouteDestinationsAuthori" +
                "zed", ReplyAction="http://tempuri.org/TechnicianDomainService/GetTechniciansRouteDestinationsAuthori" +
                "zedResponse")]
            [WebGet()]
            IAsyncResult BeginGetTechniciansRouteDestinationsAuthorized(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTechniciansRouteDestinationsAuthorized'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTechniciansRouteDestinationsAuthorized'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTechniciansRouteDestinationsAuthorized' operation.</returns>
            QueryResult<RouteDestination> EndGetTechniciansRouteDestinationsAuthorized(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTestTechniciansRouteDestinations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetTestTechniciansRouteDestinationsDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetTestTechniciansRouteDestinations", ReplyAction="http://tempuri.org/TechnicianDomainService/GetTestTechniciansRouteDestinationsRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetTestTechniciansRouteDestinations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTestTechniciansRouteDestinations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTestTechniciansRouteDestinations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTestTechniciansRouteDestinations' operation.</returns>
            QueryResult<RouteDestination> EndGetTestTechniciansRouteDestinations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTrackPoints' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/GetTrackPointsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/GetTrackPoints", ReplyAction="http://tempuri.org/TechnicianDomainService/GetTrackPointsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTrackPoints(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTrackPoints'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTrackPoints'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTrackPoints' operation.</returns>
            QueryResult<TrackPoint> EndGetTrackPoints(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InsertTrackPoint' operation.
            /// </summary>
            /// <param name="latitude">The value for the 'latitude' parameter of this action.</param>
            /// <param name="longitude">The value for the 'longitude' parameter of this action.</param>
            /// <param name="timeStamp">The value for the 'timeStamp' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/InsertTrackPointDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/InsertTrackPoint", ReplyAction="http://tempuri.org/TechnicianDomainService/InsertTrackPointResponse")]
            IAsyncResult BeginInsertTrackPoint(long latitude, long longitude, DateTime timeStamp, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInsertTrackPoint'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInsertTrackPoint'.</param>
            void EndInsertTrackPoint(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TechnicianDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TechnicianDomainService/SubmitChanges", ReplyAction="http://tempuri.org/TechnicianDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class TechnicianDomainContextEntityContainer : EntityContainer
        {
            
            public TechnicianDomainContextEntityContainer()
            {
                this.CreateEntitySet<Block>(EntitySetOperations.None);
                this.CreateEntitySet<Client>(EntitySetOperations.None);
                this.CreateEntitySet<ContactInfo>(EntitySetOperations.None);
                this.CreateEntitySet<Employee>(EntitySetOperations.None);
                this.CreateEntitySet<Field>(EntitySetOperations.None);
                this.CreateEntitySet<File>(EntitySetOperations.None);
                this.CreateEntitySet<Invoice>(EntitySetOperations.None);
                this.CreateEntitySet<LineItem>(EntitySetOperations.None);
                this.CreateEntitySet<Location>(EntitySetOperations.None);
                this.CreateEntitySet<Option>(EntitySetOperations.None);
                this.CreateEntitySet<Party>(EntitySetOperations.None);
                this.CreateEntitySet<PartyRole>(EntitySetOperations.None);
                this.CreateEntitySet<RecurringService>(EntitySetOperations.None);
                this.CreateEntitySet<Region>(EntitySetOperations.None);
                this.CreateEntitySet<Repeat>(EntitySetOperations.None);
                this.CreateEntitySet<Role>(EntitySetOperations.None);
                this.CreateEntitySet<RoleBlock>(EntitySetOperations.None);
                this.CreateEntitySet<Route>(EntitySetOperations.All);
                this.CreateEntitySet<RouteDestination>(EntitySetOperations.All);
                this.CreateEntitySet<RouteEmployee>(EntitySetOperations.None);
                this.CreateEntitySet<RouteTask>(EntitySetOperations.None);
                this.CreateEntitySet<RouteVehicle>(EntitySetOperations.None);
                this.CreateEntitySet<SalesTerm>(EntitySetOperations.None);
                this.CreateEntitySet<Service>(EntitySetOperations.None);
                this.CreateEntitySet<ServiceTemplate>(EntitySetOperations.None);
                this.CreateEntitySet<SubLocation>(EntitySetOperations.None);
                this.CreateEntitySet<TrackPoint>(EntitySetOperations.None);
                this.CreateEntitySet<Vehicle>(EntitySetOperations.None);
            }
        }
    }
}
namespace FoundOps.Server.Services.CoreDomainService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using FoundOps.Common.NET;
    using FoundOps.Core.Models.CoreEntities;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CoreDomainService' DomainService.
    /// </summary>
    public sealed partial class CoreDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDomainContext"/> class.
        /// </summary>
        public CoreDomainContext() : 
                this(new WebDomainClient<ICoreDomainServiceContract>(new Uri("FoundOps-Server-Services-CoreDomainService-CoreDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CoreDomainService service URI.</param>
        public CoreDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ICoreDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CoreDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Address"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Address> Addresses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Address>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Party"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Party> Parties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Party>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Client"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Client> Clients
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Client>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ClientTitle"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<ClientTitle> ClientTitles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ClientTitle>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ContactInfo"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<ContactInfo> ContactInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ContactInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Contact"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Contact> Contacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Contact>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EmployeeHistoryEntry"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<EmployeeHistoryEntry> EmployeeHistoryEntries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EmployeeHistoryEntry>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Field"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Field> Fields
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Field>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="File"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<File> Files
        {
            get
            {
                return base.EntityContainer.GetEntitySet<File>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Invoice"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Invoice> Invoices
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Invoice>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LineItem"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<LineItem> LineItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LineItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Location"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Location> Locations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Location>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Option"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Option> Options
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Option>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Block"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Block> Blocks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Block>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RecurringService"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<RecurringService> RecurringServices
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RecurringService>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Region"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Repeat"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Repeat> Repeats
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Repeat>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Role"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Role> Roles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Role>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RouteDestination"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<RouteDestination> RouteDestinations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RouteDestination>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Route"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Route> Routes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Route>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesTerm"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesTerm> SalesTerms
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesTerm>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Service"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Service> Services
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Service>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ServiceTemplate"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<ServiceTemplate> ServiceTemplates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ServiceTemplate>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SubLocation"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<SubLocation> SubLocations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SubLocation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="RouteTask"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<RouteTask> RouteTasks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RouteTask>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="VehicleMaintenanceLineItem"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<VehicleMaintenanceLineItem> VehicleMaintenanceLineItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<VehicleMaintenanceLineItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="VehicleMaintenanceLogEntry"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<VehicleMaintenanceLogEntry> VehicleMaintenanceLogEntries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<VehicleMaintenanceLogEntry>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Vehicle"/> entity instances that have been loaded into this <see cref="CoreDomainContext"/> instance.
        /// </summary>
        public EntitySet<Vehicle> Vehicles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Vehicle>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BusinessAccount"/> entity instances using the 'BusinessAccountWithClientsForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BusinessAccount"/> entity instances.</returns>
        public EntityQuery<BusinessAccount> BusinessAccountWithClientsForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("BusinessAccountWithClientsForRoleQuery", parameters);
            return base.CreateQuery<BusinessAccount>("BusinessAccountWithClientsForRole", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Business"/> entity instances using the 'BusinessForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Business"/> entity instances.</returns>
        public EntityQuery<Business> BusinessForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("BusinessForRoleQuery", parameters);
            return base.CreateQuery<Business>("BusinessForRole", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserAccount"/> entity instances using the 'CurrentUserAccount' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserAccount"/> entity instances.</returns>
        public EntityQuery<UserAccount> CurrentUserAccountQuery()
        {
            this.ValidateMethod("CurrentUserAccountQuery", null);
            return base.CreateQuery<UserAccount>("CurrentUserAccount", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Address"/> entity instances using the 'GetAddresses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Address"/> entity instances.</returns>
        public EntityQuery<Address> GetAddressesQuery()
        {
            this.ValidateMethod("GetAddressesQuery", null);
            return base.CreateQuery<Address>("GetAddresses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Party"/> entity instances using the 'GetBusinessAccountsForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Party"/> entity instances.</returns>
        public EntityQuery<Party> GetBusinessAccountsForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetBusinessAccountsForRoleQuery", parameters);
            return base.CreateQuery<Party>("GetBusinessAccountsForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Client"/> entity instances using the 'GetClientsForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Client"/> entity instances.</returns>
        public EntityQuery<Client> GetClientsForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetClientsForRoleQuery", parameters);
            return base.CreateQuery<Client>("GetClientsForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ClientTitle"/> entity instances using the 'GetClientTitles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ClientTitle"/> entity instances.</returns>
        public EntityQuery<ClientTitle> GetClientTitlesQuery()
        {
            this.ValidateMethod("GetClientTitlesQuery", null);
            return base.CreateQuery<ClientTitle>("GetClientTitles", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ClientTitle"/> entity instances using the 'GetClientTitlesForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ClientTitle"/> entity instances.</returns>
        public EntityQuery<ClientTitle> GetClientTitlesForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetClientTitlesForRoleQuery", parameters);
            return base.CreateQuery<ClientTitle>("GetClientTitlesForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ContactInfo"/> entity instances using the 'GetContactInfoSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ContactInfo"/> entity instances.</returns>
        public EntityQuery<ContactInfo> GetContactInfoSetQuery()
        {
            this.ValidateMethod("GetContactInfoSetQuery", null);
            return base.CreateQuery<ContactInfo>("GetContactInfoSet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContacts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsQuery()
        {
            this.ValidateMethod("GetContactsQuery", null);
            return base.CreateQuery<Contact>("GetContacts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContactsForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetContactsForRoleQuery", parameters);
            return base.CreateQuery<Contact>("GetContactsForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EmployeeHistoryEntry"/> entity instances using the 'GetEmployeeHistoryEntries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EmployeeHistoryEntry"/> entity instances.</returns>
        public EntityQuery<EmployeeHistoryEntry> GetEmployeeHistoryEntriesQuery()
        {
            this.ValidateMethod("GetEmployeeHistoryEntriesQuery", null);
            return base.CreateQuery<EmployeeHistoryEntry>("GetEmployeeHistoryEntries", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EmployeeHistoryEntry"/> entity instances using the 'GetEmployeeHistoryEntriesForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EmployeeHistoryEntry"/> entity instances.</returns>
        public EntityQuery<EmployeeHistoryEntry> GetEmployeeHistoryEntriesForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetEmployeeHistoryEntriesForRoleQuery", parameters);
            return base.CreateQuery<EmployeeHistoryEntry>("GetEmployeeHistoryEntriesForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployeesForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetEmployeesForRoleQuery", parameters);
            return base.CreateQuery<Employee>("GetEmployeesForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Field"/> entity instances using the 'GetFields' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Field"/> entity instances.</returns>
        public EntityQuery<Field> GetFieldsQuery()
        {
            this.ValidateMethod("GetFieldsQuery", null);
            return base.CreateQuery<Field>("GetFields", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="File"/> entity instances using the 'GetFilesForParty' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="File"/> entity instances.</returns>
        public EntityQuery<File> GetFilesForPartyQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetFilesForPartyQuery", parameters);
            return base.CreateQuery<File>("GetFilesForParty", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Invoice"/> entity instances using the 'GetInvoices' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Invoice"/> entity instances.</returns>
        public EntityQuery<Invoice> GetInvoicesQuery()
        {
            this.ValidateMethod("GetInvoicesQuery", null);
            return base.CreateQuery<Invoice>("GetInvoices", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LineItem"/> entity instances using the 'GetLineItem' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LineItem"/> entity instances.</returns>
        public EntityQuery<LineItem> GetLineItemQuery()
        {
            this.ValidateMethod("GetLineItemQuery", null);
            return base.CreateQuery<LineItem>("GetLineItem", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LocationField"/> entity instances using the 'GetLocationFields' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LocationField"/> entity instances.</returns>
        public EntityQuery<LocationField> GetLocationFieldsQuery()
        {
            this.ValidateMethod("GetLocationFieldsQuery", null);
            return base.CreateQuery<LocationField>("GetLocationFields", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Location"/> entity instances using the 'GetLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Location"/> entity instances.</returns>
        public EntityQuery<Location> GetLocationsQuery()
        {
            this.ValidateMethod("GetLocationsQuery", null);
            return base.CreateQuery<Location>("GetLocations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Location"/> entity instances using the 'GetLocationsToAdministerForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Location"/> entity instances.</returns>
        public EntityQuery<Location> GetLocationsToAdministerForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetLocationsToAdministerForRoleQuery", parameters);
            return base.CreateQuery<Location>("GetLocationsToAdministerForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Option"/> entity instances using the 'GetOptions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Option"/> entity instances.</returns>
        public EntityQuery<Option> GetOptionsQuery()
        {
            this.ValidateMethod("GetOptionsQuery", null);
            return base.CreateQuery<Option>("GetOptions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionsField"/> entity instances using the 'GetOptionsField' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionsField"/> entity instances.</returns>
        public EntityQuery<OptionsField> GetOptionsFieldQuery()
        {
            this.ValidateMethod("GetOptionsFieldQuery", null);
            return base.CreateQuery<OptionsField>("GetOptionsField", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionsField"/> entity instances using the 'GetOptionsFields' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionsField"/> entity instances.</returns>
        public EntityQuery<OptionsField> GetOptionsFieldsQuery()
        {
            this.ValidateMethod("GetOptionsFieldsQuery", null);
            return base.CreateQuery<OptionsField>("GetOptionsFields", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Party"/> entity instances using the 'GetPartys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Party"/> entity instances.</returns>
        public EntityQuery<Party> GetPartysQuery()
        {
            this.ValidateMethod("GetPartysQuery", null);
            return base.CreateQuery<Party>("GetPartys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Block"/> entity instances using the 'GetPublicBlocks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Block"/> entity instances.</returns>
        public EntityQuery<Block> GetPublicBlocksQuery()
        {
            this.ValidateMethod("GetPublicBlocksQuery", null);
            return base.CreateQuery<Block>("GetPublicBlocks", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RecurringService"/> entity instances using the 'GetRecurringServicesForServiceProvider' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RecurringService"/> entity instances.</returns>
        public EntityQuery<RecurringService> GetRecurringServicesForServiceProviderQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetRecurringServicesForServiceProviderQuery", parameters);
            return base.CreateQuery<RecurringService>("GetRecurringServicesForServiceProvider", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegionsForServiceProvider' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        public EntityQuery<Region> GetRegionsForServiceProviderQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetRegionsForServiceProviderQuery", parameters);
            return base.CreateQuery<Region>("GetRegionsForServiceProvider", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Repeat"/> entity instances using the 'GetRepeats' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Repeat"/> entity instances.</returns>
        public EntityQuery<Repeat> GetRepeatsQuery()
        {
            this.ValidateMethod("GetRepeatsQuery", null);
            return base.CreateQuery<Repeat>("GetRepeats", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Role"/> entity instances using the 'GetRoles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Role"/> entity instances.</returns>
        public EntityQuery<Role> GetRolesQuery()
        {
            this.ValidateMethod("GetRolesQuery", null);
            return base.CreateQuery<Role>("GetRoles", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RouteDestination"/> entity instances using the 'GetRouteDestinations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RouteDestination"/> entity instances.</returns>
        public EntityQuery<RouteDestination> GetRouteDestinationsQuery()
        {
            this.ValidateMethod("GetRouteDestinationsQuery", null);
            return base.CreateQuery<RouteDestination>("GetRouteDestinations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Route"/> entity instances using the 'GetRouteLogForServiceProvider' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Route"/> entity instances.</returns>
        public EntityQuery<Route> GetRouteLogForServiceProviderQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetRouteLogForServiceProviderQuery", parameters);
            return base.CreateQuery<Route>("GetRouteLogForServiceProvider", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Route"/> entity instances using the 'GetRoutesForServiceProviderOnDay' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <param name="dateOfRoutes">The value for the 'dateOfRoutes' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Route"/> entity instances.</returns>
        public EntityQuery<Route> GetRoutesForServiceProviderOnDayQuery(Guid roleId, DateTime dateOfRoutes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            parameters.Add("dateOfRoutes", dateOfRoutes);
            this.ValidateMethod("GetRoutesForServiceProviderOnDayQuery", parameters);
            return base.CreateQuery<Route>("GetRoutesForServiceProviderOnDay", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesTerm"/> entity instances using the 'GetSalesTerms' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesTerm"/> entity instances.</returns>
        public EntityQuery<SalesTerm> GetSalesTermsQuery()
        {
            this.ValidateMethod("GetSalesTermsQuery", null);
            return base.CreateQuery<SalesTerm>("GetSalesTerms", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Service"/> entity instances using the 'GetServicesForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Service"/> entity instances.</returns>
        public EntityQuery<Service> GetServicesForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetServicesForRoleQuery", parameters);
            return base.CreateQuery<Service>("GetServicesForRole", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ServiceTemplate"/> entity instances using the 'GetServiceTemplatesForServiceProvider' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ServiceTemplate"/> entity instances.</returns>
        public EntityQuery<ServiceTemplate> GetServiceTemplatesForServiceProviderQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetServiceTemplatesForServiceProviderQuery", parameters);
            return base.CreateQuery<ServiceTemplate>("GetServiceTemplatesForServiceProvider", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SubLocation"/> entity instances using the 'GetSubLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SubLocation"/> entity instances.</returns>
        public EntityQuery<SubLocation> GetSubLocationsQuery()
        {
            this.ValidateMethod("GetSubLocationsQuery", null);
            return base.CreateQuery<SubLocation>("GetSubLocations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TextBoxField"/> entity instances using the 'GetTextBoxFields' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TextBoxField"/> entity instances.</returns>
        public EntityQuery<TextBoxField> GetTextBoxFieldsQuery()
        {
            this.ValidateMethod("GetTextBoxFieldsQuery", null);
            return base.CreateQuery<TextBoxField>("GetTextBoxFields", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RouteTask"/> entity instances using the 'GetUnroutedRouteTasks' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <param name="selectedDate">The value for the 'selectedDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RouteTask"/> entity instances.</returns>
        public EntityQuery<RouteTask> GetUnroutedRouteTasksQuery(Guid roleId, DateTime selectedDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            parameters.Add("selectedDate", selectedDate);
            this.ValidateMethod("GetUnroutedRouteTasksQuery", parameters);
            return base.CreateQuery<RouteTask>("GetUnroutedRouteTasks", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="VehicleMaintenanceLineItem"/> entity instances using the 'GetVehicleMaintenanceLineItem' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="VehicleMaintenanceLineItem"/> entity instances.</returns>
        public EntityQuery<VehicleMaintenanceLineItem> GetVehicleMaintenanceLineItemQuery()
        {
            this.ValidateMethod("GetVehicleMaintenanceLineItemQuery", null);
            return base.CreateQuery<VehicleMaintenanceLineItem>("GetVehicleMaintenanceLineItem", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="VehicleMaintenanceLineItem"/> entity instances using the 'GetVehicleMaintenanceLineItemsForParty' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="VehicleMaintenanceLineItem"/> entity instances.</returns>
        public EntityQuery<VehicleMaintenanceLineItem> GetVehicleMaintenanceLineItemsForPartyQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetVehicleMaintenanceLineItemsForPartyQuery", parameters);
            return base.CreateQuery<VehicleMaintenanceLineItem>("GetVehicleMaintenanceLineItemsForParty", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="VehicleMaintenanceLogEntry"/> entity instances using the 'GetVehicleMaintenanceLog' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <param name="vehicleId">The value for the 'vehicleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="VehicleMaintenanceLogEntry"/> entity instances.</returns>
        public EntityQuery<VehicleMaintenanceLogEntry> GetVehicleMaintenanceLogQuery(Guid roleId, Guid vehicleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            parameters.Add("vehicleId", vehicleId);
            this.ValidateMethod("GetVehicleMaintenanceLogQuery", parameters);
            return base.CreateQuery<VehicleMaintenanceLogEntry>("GetVehicleMaintenanceLog", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="VehicleMaintenanceLogEntry"/> entity instances using the 'GetVehicleMaintenanceLogForParty' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="VehicleMaintenanceLogEntry"/> entity instances.</returns>
        public EntityQuery<VehicleMaintenanceLogEntry> GetVehicleMaintenanceLogForPartyQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetVehicleMaintenanceLogForPartyQuery", parameters);
            return base.CreateQuery<VehicleMaintenanceLogEntry>("GetVehicleMaintenanceLogForParty", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Vehicle"/> entity instances using the 'GetVehiclesForParty' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Vehicle"/> entity instances.</returns>
        public EntityQuery<Vehicle> GetVehiclesForPartyQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetVehiclesForPartyQuery", parameters);
            return base.CreateQuery<Vehicle>("GetVehiclesForParty", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Party"/> entity instances using the 'PartyForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Party"/> entity instances.</returns>
        public EntityQuery<Party> PartyForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("PartyForRoleQuery", parameters);
            return base.CreateQuery<Party>("PartyForRole", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Party"/> entity instances using the 'PartyToAdministerForRole' query.
        /// </summary>
        /// <param name="roleId">The value for the 'roleId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Party"/> entity instances.</returns>
        public EntityQuery<Party> PartyToAdministerForRoleQuery(Guid roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("PartyToAdministerForRoleQuery", parameters);
            return base.CreateQuery<Party>("PartyToAdministerForRole", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ContactInfoLabelsForParty' method of the DomainService.
        /// </summary>
        /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ContactInfoLabelsForParty(Guid currentPartyId, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPartyId", currentPartyId);
            this.ValidateMethod("ContactInfoLabelsForParty", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ContactInfoLabelsForParty", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ContactInfoLabelsForParty' method of the DomainService.
        /// </summary>
        /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ContactInfoLabelsForParty(Guid currentPartyId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPartyId", currentPartyId);
            this.ValidateMethod("ContactInfoLabelsForParty", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ContactInfoLabelsForParty", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ContactInfoTypesForParty' method of the DomainService.
        /// </summary>
        /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ContactInfoTypesForParty(Guid currentPartyId, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPartyId", currentPartyId);
            this.ValidateMethod("ContactInfoTypesForParty", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ContactInfoTypesForParty", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ContactInfoTypesForParty' method of the DomainService.
        /// </summary>
        /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> ContactInfoTypesForParty(Guid currentPartyId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("currentPartyId", currentPartyId);
            this.ValidateMethod("ContactInfoTypesForParty", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("ContactInfoTypesForParty", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TryGeocode' method of the DomainService.
        /// </summary>
        /// <param name="searchText">The value for the 'searchText' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<GeocoderResult>> TryGeocode(string searchText, Action<InvokeOperation<IEnumerable<GeocoderResult>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchText", searchText);
            this.ValidateMethod("TryGeocode", parameters);
            return ((InvokeOperation<IEnumerable<GeocoderResult>>)(this.InvokeOperation("TryGeocode", typeof(IEnumerable<GeocoderResult>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'TryGeocode' method of the DomainService.
        /// </summary>
        /// <param name="searchText">The value for the 'searchText' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<GeocoderResult>> TryGeocode(string searchText)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchText", searchText);
            this.ValidateMethod("TryGeocode", parameters);
            return ((InvokeOperation<IEnumerable<GeocoderResult>>)(this.InvokeOperation("TryGeocode", typeof(IEnumerable<GeocoderResult>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CoreDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CoreDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICoreDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'BusinessAccountWithClientsForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/BusinessAccountWithClientsForRoleDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/BusinessAccountWithClientsForRole", ReplyAction="http://tempuri.org/CoreDomainService/BusinessAccountWithClientsForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginBusinessAccountWithClientsForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBusinessAccountWithClientsForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBusinessAccountWithClientsForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'BusinessAccountWithClientsForRole' operation.</returns>
            QueryResult<BusinessAccount> EndBusinessAccountWithClientsForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'BusinessForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/BusinessForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/BusinessForRole", ReplyAction="http://tempuri.org/CoreDomainService/BusinessForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginBusinessForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginBusinessForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginBusinessForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'BusinessForRole' operation.</returns>
            QueryResult<Business> EndBusinessForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ContactInfoLabelsForParty' operation.
            /// </summary>
            /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/ContactInfoLabelsForPartyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/ContactInfoLabelsForParty", ReplyAction="http://tempuri.org/CoreDomainService/ContactInfoLabelsForPartyResponse")]
            IAsyncResult BeginContactInfoLabelsForParty(Guid currentPartyId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginContactInfoLabelsForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginContactInfoLabelsForParty'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ContactInfoLabelsForParty' operation.</returns>
            IEnumerable<string> EndContactInfoLabelsForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ContactInfoTypesForParty' operation.
            /// </summary>
            /// <param name="currentPartyId">The value for the 'currentPartyId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/ContactInfoTypesForPartyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/ContactInfoTypesForParty", ReplyAction="http://tempuri.org/CoreDomainService/ContactInfoTypesForPartyResponse")]
            IAsyncResult BeginContactInfoTypesForParty(Guid currentPartyId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginContactInfoTypesForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginContactInfoTypesForParty'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'ContactInfoTypesForParty' operation.</returns>
            IEnumerable<string> EndContactInfoTypesForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CurrentUserAccount' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/CurrentUserAccountDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/CurrentUserAccount", ReplyAction="http://tempuri.org/CoreDomainService/CurrentUserAccountResponse")]
            [WebGet()]
            IAsyncResult BeginCurrentUserAccount(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCurrentUserAccount'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCurrentUserAccount'.</param>
            /// <returns>The 'QueryResult' returned from the 'CurrentUserAccount' operation.</returns>
            QueryResult<UserAccount> EndCurrentUserAccount(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAddresses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetAddressesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetAddresses", ReplyAction="http://tempuri.org/CoreDomainService/GetAddressesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAddresses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAddresses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAddresses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAddresses' operation.</returns>
            QueryResult<Address> EndGetAddresses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBusinessAccountsForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetBusinessAccountsForRoleDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetBusinessAccountsForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetBusinessAccountsForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetBusinessAccountsForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBusinessAccountsForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBusinessAccountsForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBusinessAccountsForRole' operation.</returns>
            QueryResult<Party> EndGetBusinessAccountsForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClientsForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetClientsForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetClientsForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetClientsForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetClientsForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClientsForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClientsForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClientsForRole' operation.</returns>
            QueryResult<Client> EndGetClientsForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClientTitles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetClientTitlesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetClientTitles", ReplyAction="http://tempuri.org/CoreDomainService/GetClientTitlesResponse")]
            [WebGet()]
            IAsyncResult BeginGetClientTitles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClientTitles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClientTitles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClientTitles' operation.</returns>
            QueryResult<ClientTitle> EndGetClientTitles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClientTitlesForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetClientTitlesForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetClientTitlesForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetClientTitlesForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetClientTitlesForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClientTitlesForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClientTitlesForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClientTitlesForRole' operation.</returns>
            QueryResult<ClientTitle> EndGetClientTitlesForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactInfoSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetContactInfoSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetContactInfoSet", ReplyAction="http://tempuri.org/CoreDomainService/GetContactInfoSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactInfoSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactInfoSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactInfoSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactInfoSet' operation.</returns>
            QueryResult<ContactInfo> EndGetContactInfoSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContacts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetContactsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetContacts", ReplyAction="http://tempuri.org/CoreDomainService/GetContactsResponse")]
            [WebGet()]
            IAsyncResult BeginGetContacts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContacts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContacts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContacts' operation.</returns>
            QueryResult<Contact> EndGetContacts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetContactsForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetContactsForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetContactsForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactsForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactsForRole' operation.</returns>
            QueryResult<Contact> EndGetContactsForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeeHistoryEntries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntries", ReplyAction="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeeHistoryEntries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeeHistoryEntries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeeHistoryEntries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeeHistoryEntries' operation.</returns>
            QueryResult<EmployeeHistoryEntry> EndGetEmployeeHistoryEntries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeeHistoryEntriesForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntriesForRoleDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntriesForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetEmployeeHistoryEntriesForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeeHistoryEntriesForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeeHistoryEntriesForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeeHistoryEntriesForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeeHistoryEntriesForRole' operation.</returns>
            QueryResult<EmployeeHistoryEntry> EndGetEmployeeHistoryEntriesForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetEmployees", ReplyAction="http://tempuri.org/CoreDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeesForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetEmployeesForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetEmployeesForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetEmployeesForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeesForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeesForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeesForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeesForRole' operation.</returns>
            QueryResult<Employee> EndGetEmployeesForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFields' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetFieldsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetFields", ReplyAction="http://tempuri.org/CoreDomainService/GetFieldsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFields(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFields'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFields'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFields' operation.</returns>
            QueryResult<Field> EndGetFields(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilesForParty' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetFilesForPartyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetFilesForParty", ReplyAction="http://tempuri.org/CoreDomainService/GetFilesForPartyResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilesForParty(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilesForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilesForParty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilesForParty' operation.</returns>
            QueryResult<File> EndGetFilesForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInvoices' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetInvoicesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetInvoices", ReplyAction="http://tempuri.org/CoreDomainService/GetInvoicesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInvoices(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInvoices'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInvoices'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInvoices' operation.</returns>
            QueryResult<Invoice> EndGetInvoices(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLineItem' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetLineItemDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetLineItem", ReplyAction="http://tempuri.org/CoreDomainService/GetLineItemResponse")]
            [WebGet()]
            IAsyncResult BeginGetLineItem(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLineItem'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLineItem'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLineItem' operation.</returns>
            QueryResult<LineItem> EndGetLineItem(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocationFields' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetLocationFieldsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetLocationFields", ReplyAction="http://tempuri.org/CoreDomainService/GetLocationFieldsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocationFields(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocationFields'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocationFields'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocationFields' operation.</returns>
            QueryResult<LocationField> EndGetLocationFields(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetLocations", ReplyAction="http://tempuri.org/CoreDomainService/GetLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocations' operation.</returns>
            QueryResult<Location> EndGetLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocationsToAdministerForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetLocationsToAdministerForRoleDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetLocationsToAdministerForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetLocationsToAdministerForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocationsToAdministerForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocationsToAdministerForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocationsToAdministerForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocationsToAdministerForRole' operation.</returns>
            QueryResult<Location> EndGetLocationsToAdministerForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetOptionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetOptions", ReplyAction="http://tempuri.org/CoreDomainService/GetOptionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptions' operation.</returns>
            QueryResult<Option> EndGetOptions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptionsField' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetOptionsFieldDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetOptionsField", ReplyAction="http://tempuri.org/CoreDomainService/GetOptionsFieldResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptionsField(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptionsField'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptionsField'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptionsField' operation.</returns>
            QueryResult<OptionsField> EndGetOptionsField(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptionsFields' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetOptionsFieldsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetOptionsFields", ReplyAction="http://tempuri.org/CoreDomainService/GetOptionsFieldsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptionsFields(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptionsFields'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptionsFields'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptionsFields' operation.</returns>
            QueryResult<OptionsField> EndGetOptionsFields(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPartys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetPartysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetPartys", ReplyAction="http://tempuri.org/CoreDomainService/GetPartysResponse")]
            [WebGet()]
            IAsyncResult BeginGetPartys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPartys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPartys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPartys' operation.</returns>
            QueryResult<Party> EndGetPartys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPublicBlocks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetPublicBlocksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetPublicBlocks", ReplyAction="http://tempuri.org/CoreDomainService/GetPublicBlocksResponse")]
            [WebGet()]
            IAsyncResult BeginGetPublicBlocks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPublicBlocks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPublicBlocks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPublicBlocks' operation.</returns>
            QueryResult<Block> EndGetPublicBlocks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRecurringServicesForServiceProvider' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRecurringServicesForServiceProviderDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRecurringServicesForServiceProvider", ReplyAction="http://tempuri.org/CoreDomainService/GetRecurringServicesForServiceProviderRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetRecurringServicesForServiceProvider(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRecurringServicesForServiceProvider'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRecurringServicesForServiceProvider'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRecurringServicesForServiceProvider' operation.</returns>
            QueryResult<RecurringService> EndGetRecurringServicesForServiceProvider(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRegionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRegions", ReplyAction="http://tempuri.org/CoreDomainService/GetRegionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegionsForServiceProvider' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRegionsForServiceProviderDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRegionsForServiceProvider", ReplyAction="http://tempuri.org/CoreDomainService/GetRegionsForServiceProviderResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegionsForServiceProvider(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegionsForServiceProvider'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegionsForServiceProvider'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegionsForServiceProvider' operation.</returns>
            QueryResult<Region> EndGetRegionsForServiceProvider(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRepeats' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRepeatsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRepeats", ReplyAction="http://tempuri.org/CoreDomainService/GetRepeatsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRepeats(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRepeats'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRepeats'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRepeats' operation.</returns>
            QueryResult<Repeat> EndGetRepeats(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRolesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRoles", ReplyAction="http://tempuri.org/CoreDomainService/GetRolesResponse")]
            [WebGet()]
            IAsyncResult BeginGetRoles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoles' operation.</returns>
            QueryResult<Role> EndGetRoles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRouteDestinations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRouteDestinationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRouteDestinations", ReplyAction="http://tempuri.org/CoreDomainService/GetRouteDestinationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRouteDestinations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRouteDestinations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRouteDestinations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRouteDestinations' operation.</returns>
            QueryResult<RouteDestination> EndGetRouteDestinations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRouteLogForServiceProvider' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRouteLogForServiceProviderDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRouteLogForServiceProvider", ReplyAction="http://tempuri.org/CoreDomainService/GetRouteLogForServiceProviderResponse")]
            [WebGet()]
            IAsyncResult BeginGetRouteLogForServiceProvider(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRouteLogForServiceProvider'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRouteLogForServiceProvider'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRouteLogForServiceProvider' operation.</returns>
            QueryResult<Route> EndGetRouteLogForServiceProvider(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRoutesForServiceProviderOnDay' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="dateOfRoutes">The value for the 'dateOfRoutes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetRoutesForServiceProviderOnDayDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetRoutesForServiceProviderOnDay", ReplyAction="http://tempuri.org/CoreDomainService/GetRoutesForServiceProviderOnDayResponse")]
            [WebGet()]
            IAsyncResult BeginGetRoutesForServiceProviderOnDay(Guid roleId, DateTime dateOfRoutes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRoutesForServiceProviderOnDay'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRoutesForServiceProviderOnDay'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRoutesForServiceProviderOnDay' operation.</returns>
            QueryResult<Route> EndGetRoutesForServiceProviderOnDay(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesTerms' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetSalesTermsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetSalesTerms", ReplyAction="http://tempuri.org/CoreDomainService/GetSalesTermsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesTerms(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesTerms'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesTerms'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesTerms' operation.</returns>
            QueryResult<SalesTerm> EndGetSalesTerms(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetServicesForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetServicesForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetServicesForRole", ReplyAction="http://tempuri.org/CoreDomainService/GetServicesForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginGetServicesForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetServicesForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetServicesForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetServicesForRole' operation.</returns>
            QueryResult<Service> EndGetServicesForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetServiceTemplatesForServiceProvider' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetServiceTemplatesForServiceProviderDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetServiceTemplatesForServiceProvider", ReplyAction="http://tempuri.org/CoreDomainService/GetServiceTemplatesForServiceProviderRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetServiceTemplatesForServiceProvider(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetServiceTemplatesForServiceProvider'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetServiceTemplatesForServiceProvider'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetServiceTemplatesForServiceProvider' operation.</returns>
            QueryResult<ServiceTemplate> EndGetServiceTemplatesForServiceProvider(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSubLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetSubLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetSubLocations", ReplyAction="http://tempuri.org/CoreDomainService/GetSubLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSubLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSubLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSubLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSubLocations' operation.</returns>
            QueryResult<SubLocation> EndGetSubLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTextBoxFields' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetTextBoxFieldsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetTextBoxFields", ReplyAction="http://tempuri.org/CoreDomainService/GetTextBoxFieldsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTextBoxFields(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTextBoxFields'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTextBoxFields'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTextBoxFields' operation.</returns>
            QueryResult<TextBoxField> EndGetTextBoxFields(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnroutedRouteTasks' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="selectedDate">The value for the 'selectedDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetUnroutedRouteTasksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetUnroutedRouteTasks", ReplyAction="http://tempuri.org/CoreDomainService/GetUnroutedRouteTasksResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnroutedRouteTasks(Guid roleId, DateTime selectedDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnroutedRouteTasks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnroutedRouteTasks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnroutedRouteTasks' operation.</returns>
            QueryResult<RouteTask> EndGetUnroutedRouteTasks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVehicleMaintenanceLineItem' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItemDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItem", ReplyAction="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItemResponse")]
            [WebGet()]
            IAsyncResult BeginGetVehicleMaintenanceLineItem(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVehicleMaintenanceLineItem'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVehicleMaintenanceLineItem'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVehicleMaintenanceLineItem' operation.</returns>
            QueryResult<VehicleMaintenanceLineItem> EndGetVehicleMaintenanceLineItem(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVehicleMaintenanceLineItemsForParty' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItemsForPartyDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItemsForParty", ReplyAction="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLineItemsForPartyRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetVehicleMaintenanceLineItemsForParty(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVehicleMaintenanceLineItemsForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVehicleMaintenanceLineItemsForParty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVehicleMaintenanceLineItemsForParty' operation.</returns>
            QueryResult<VehicleMaintenanceLineItem> EndGetVehicleMaintenanceLineItemsForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVehicleMaintenanceLog' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="vehicleId">The value for the 'vehicleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLogDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLog", ReplyAction="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLogResponse")]
            [WebGet()]
            IAsyncResult BeginGetVehicleMaintenanceLog(Guid roleId, Guid vehicleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVehicleMaintenanceLog'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVehicleMaintenanceLog'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVehicleMaintenanceLog' operation.</returns>
            QueryResult<VehicleMaintenanceLogEntry> EndGetVehicleMaintenanceLog(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVehicleMaintenanceLogForParty' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLogForPartyDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLogForParty", ReplyAction="http://tempuri.org/CoreDomainService/GetVehicleMaintenanceLogForPartyResponse")]
            [WebGet()]
            IAsyncResult BeginGetVehicleMaintenanceLogForParty(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVehicleMaintenanceLogForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVehicleMaintenanceLogForParty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVehicleMaintenanceLogForParty' operation.</returns>
            QueryResult<VehicleMaintenanceLogEntry> EndGetVehicleMaintenanceLogForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetVehiclesForParty' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/GetVehiclesForPartyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/GetVehiclesForParty", ReplyAction="http://tempuri.org/CoreDomainService/GetVehiclesForPartyResponse")]
            [WebGet()]
            IAsyncResult BeginGetVehiclesForParty(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetVehiclesForParty'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetVehiclesForParty'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetVehiclesForParty' operation.</returns>
            QueryResult<Vehicle> EndGetVehiclesForParty(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PartyForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/PartyForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/PartyForRole", ReplyAction="http://tempuri.org/CoreDomainService/PartyForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginPartyForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPartyForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPartyForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'PartyForRole' operation.</returns>
            QueryResult<Party> EndPartyForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PartyToAdministerForRole' operation.
            /// </summary>
            /// <param name="roleId">The value for the 'roleId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/PartyToAdministerForRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/PartyToAdministerForRole", ReplyAction="http://tempuri.org/CoreDomainService/PartyToAdministerForRoleResponse")]
            [WebGet()]
            IAsyncResult BeginPartyToAdministerForRole(Guid roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPartyToAdministerForRole'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPartyToAdministerForRole'.</param>
            /// <returns>The 'QueryResult' returned from the 'PartyToAdministerForRole' operation.</returns>
            QueryResult<Party> EndPartyToAdministerForRole(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'TryGeocode' operation.
            /// </summary>
            /// <param name="searchText">The value for the 'searchText' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/TryGeocodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/TryGeocode", ReplyAction="http://tempuri.org/CoreDomainService/TryGeocodeResponse")]
            IAsyncResult BeginTryGeocode(string searchText, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginTryGeocode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginTryGeocode'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'TryGeocode' operation.</returns>
            IEnumerable<GeocoderResult> EndTryGeocode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CoreDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CoreDomainService/SubmitChanges", ReplyAction="http://tempuri.org/CoreDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CoreDomainContextEntityContainer : EntityContainer
        {
            
            public CoreDomainContextEntityContainer()
            {
                this.CreateEntitySet<Address>(EntitySetOperations.None);
                this.CreateEntitySet<Block>(EntitySetOperations.None);
                this.CreateEntitySet<Client>(EntitySetOperations.All);
                this.CreateEntitySet<ClientTitle>(EntitySetOperations.All);
                this.CreateEntitySet<Contact>(EntitySetOperations.All);
                this.CreateEntitySet<ContactInfo>(EntitySetOperations.All);
                this.CreateEntitySet<Employee>(EntitySetOperations.All);
                this.CreateEntitySet<EmployeeHistoryEntry>(EntitySetOperations.All);
                this.CreateEntitySet<Field>(EntitySetOperations.All);
                this.CreateEntitySet<File>(EntitySetOperations.All);
                this.CreateEntitySet<Invoice>(EntitySetOperations.All);
                this.CreateEntitySet<LineItem>(EntitySetOperations.All);
                this.CreateEntitySet<Location>(EntitySetOperations.All);
                this.CreateEntitySet<Option>(EntitySetOperations.All);
                this.CreateEntitySet<Party>(EntitySetOperations.All);
                this.CreateEntitySet<PartyRole>((EntitySetOperations.Add | EntitySetOperations.Remove));
                this.CreateEntitySet<RecurringService>(EntitySetOperations.All);
                this.CreateEntitySet<Region>(EntitySetOperations.All);
                this.CreateEntitySet<Repeat>(EntitySetOperations.All);
                this.CreateEntitySet<Role>(EntitySetOperations.None);
                this.CreateEntitySet<RoleBlock>((EntitySetOperations.Add | EntitySetOperations.Remove));
                this.CreateEntitySet<Route>(EntitySetOperations.All);
                this.CreateEntitySet<RouteDestination>(EntitySetOperations.All);
                this.CreateEntitySet<RouteEmployee>((EntitySetOperations.Add | EntitySetOperations.Remove));
                this.CreateEntitySet<RouteTask>(EntitySetOperations.All);
                this.CreateEntitySet<RouteVehicle>((EntitySetOperations.Add | EntitySetOperations.Remove));
                this.CreateEntitySet<SalesTerm>(EntitySetOperations.All);
                this.CreateEntitySet<Service>(EntitySetOperations.All);
                this.CreateEntitySet<ServiceTemplate>(EntitySetOperations.All);
                this.CreateEntitySet<SubLocation>(EntitySetOperations.All);
                this.CreateEntitySet<Vehicle>(EntitySetOperations.All);
                this.CreateEntitySet<VehicleMaintenanceLineItem>(EntitySetOperations.All);
                this.CreateEntitySet<VehicleMaintenanceLogEntry>(EntitySetOperations.All);
            }
        }
    }
}
namespace FoundOps.SLClient.Data
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using FoundOps.Core.Models.Account.Extensions;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new WebContextUser User
        {
            get
            {
                return ((WebContextUser)(base.User));
            }
        }
    }
}
