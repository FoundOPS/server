<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Windows.Scheduling.Core</name>
    </assembly>
    <members>
        <member name="M:Telerik.Windows.Core.EditableObjectBase`1.Copy">
            <summary>
            	<b>Deep</b> copies this instance.
            </summary>
            <returns>
            A <b>deep</b> copy of the current object.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Core.EditableObjectBase`1.CopyFrom(`0)">
            <summary>
            	<b>Deep</b> copies all properties from <paramref name="other"/> to this <see cref="!:IAppointment"/>.
            </summary>
            <param name="other">The <see cref="!:IAppointment"/> which properties are copied.</param>
        </member>
        <member name="M:Telerik.Windows.Core.EditableObjectBase`1.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Core.EditableObjectBase`1.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last System.ComponentModel.IEditableObject.BeginEdit() call.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Core.EditableObjectBase`1.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last System.ComponentModel.IEditableObject.BeginEdit()
            or System.ComponentModel.IBindingList.AddNew() call into the underlying object.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Core.HierarchicalCollectionAdapterBase">
            <summary>
            This class wraps a hierarchical collection with observable collection, containing the flattened items, wrapped in HierarchicalItem.
            This collection doesn't track the source collection for changes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.#ctor(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Core.HierarchicalCollectionAdapterBase"/> class. It doesn't track the source hierarchical 
            collection for changes.
            </summary>
            <param name="sourceCollection">The hierarchical collection to be flattened.</param>
        </member>
        <member name="M:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.GetChildren(System.Object)">
            <summary>
            When overridden in the inherited class, this method returns all the children of the provided item.
            </summary>
            <param name="item">The item, which children are to be retrieved.</param>
            <returns>All the children of the provided item.</returns>
        </member>
        <member name="M:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.InitializeWrapper(Telerik.Windows.Core.HierarchicalItem,System.Object)">
            <summary>
            When overridden in the inherited class, this method is used to perform additional initializations to the newly created wrapper.
            It is the best place to initialize the <see cref="P:Telerik.Windows.Core.HierarchicalItem.IsExpanded"/> and <see cref="P:Telerik.Windows.Core.HierarchicalItem.CanExpand"/> properties.
            This method is called when a new wrapper is initialized. In the base method only the SourceItem is set and 
            an event handler is hooked to the PropertyChanged event to track changes in the IsExpanded property.
            </summary>
            <param name="wrapper">The wrapper that was created for the item.</param>
            <param name="item">The item that have been wrapped.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.System#Collections#Generic#IEnumerable{Telerik#Windows#Core#HierarchicalItem}#GetEnumerator" -->
        <member name="M:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="E:Telerik.Windows.Core.HierarchicalCollectionAdapterBase.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Core.SynchronizedCollection`1">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Core.IndexTree">
            <summary>
            An index tree structure, used to store non-negative double values and query for a cumulative value up
            to an index or index that reaches a given value. Add and remove operations are expensive.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Core.IndexTree"/> class.
            </summary>
            <param name="capacity">The capacity of the tree.</param>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Core.IndexTree"/> class. Has complexity of N.
            </summary>
            <param name="capacity">The capacity of the tree.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the given index. Worst complexity is
            (N-InsertIndex) + Log(N)*NonDefaultsInRange(N-InsertIndex).
            </summary>
            <param name="index">The index at which to remove the item.</param>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.Add(System.Double)">
            <summary>
            Adds a value in the end of the index tree. Constant or N complexity, depending on whether capacity
            expansion will be needed.
            </summary>
            <param name="value">The value that will be added.</param>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.Insert(System.Int32,System.Double)">
            <summary>
            Inserts a value at the given index. Will cheaply enqueue an item if possibe. Worst complexity is
            (N-InsertIndex) + Log(N)*NonDefaultsIn(N-InsertIndex).
            </summary>
            <param name="value">The value that will be inserted.</param>
            <param name="index">The index at which it will be inserted.</param>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.System#Collections#Generic#IEnumerable{System#Double}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.CumulativeIndex(System.Double)">
            <summary>
            Returns the index of the element that reaches the given value. Has complexity of log(N).
            </summary>
            <param name="value">The value that needs to be reached.</param>
            <returns>The index of the item that reached the given value.</returns>
        </member>
        <member name="M:Telerik.Windows.Core.IndexTree.CumulativeValue(System.Int32)">
            <summary>
            Gets or sets the value that has built up for the items up to a given end index. Has complexity of log(N).
            </summary>
            <param name="endIndex">The index of the item for which to return the cumulative value.</param>
            <returns>The cumulative value for all items up to and including a given index.</returns>
        </member>
        <member name="P:Telerik.Windows.Core.IndexTree.Count">
            <summary>
            Gets the number of items in the index tree. Has complexity of 0.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Core.IndexTree.Capacity">
            <summary>
            Gets the numer of items that the index tree can accomodate before resizing is needed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Core.IndexTree.Item(System.Int32)">
            <summary>
            Returns the value for a given index. Has constant complexity for get and log(N) complexity for set.
            </summary>
            <param name="index">The index to get the value for.</param>
            <returns>The value for the given index.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Telerik.Windows.Controls.Internal.MouseInteractionHelperBase" -->
        <member name="T:Telerik.Windows.Controls.Internal.InteractionHelperBase">
            <summary>
            Abstract base class for all interaction helpers. The purpose of the interaction helpers is to hook to low-level control-related events and to
            translate them to high-level logical events and notify a provided observer for these events.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.InteractionHelperBase.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the InteractionHelperBase class.
            </summary>
            <param name="target">The target to which to hook the events.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.InteractionHelperBase.HookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method hooks the events to the target of the helper.
            </summary>
            <param name="target">The target to which to hook the events to.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.InteractionHelperBase.UnhookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method unhooks the events from the target of the helper.
            </summary>
            <param name="target">The target from which to unhook the events.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelperBase.#ctor(System.Windows.FrameworkElement,Telerik.Windows.Rendering.ILogicalCanvasRenderingHelper,Telerik.Windows.Rendering.ILogicalCanvasRenderingHelper)">
            <summary>
            Initializes an instance of the <see cref="T:Telerik.Windows.Controls.Internal.MouseInteractionHelperBase"/> class.
            </summary>
            <param name="target">The target to which events to hook the helper to.</param>
            <param name="horizontalRenderingHelper">The helper to be used to convert the coordinates on X axis.</param>
            <param name="verticalRenderingHelper">The helper to be used to convert the coordinates on Y axis.</param>
            <param name="observer">The observer to be notified.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelperBase.ConvertVerticalOffsetToLogicalCoordinates(System.Double)">
            <summary>
            Converts physical coordinates at the screen to logical, depending on the logic implemented in the verticalRenderingHelper. This method works with 
            local screen coordinates and reflects also the scroll offset.
            </summary>
            <param name="offset">The local value at the Y axis to be calculated. The method uses the Viewport property of the target if it is a <see cref="!:VirtualizedPanel"/>.</param>
            <returns>The converted logical value.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelperBase.ConvertHorizontalOffsetToLogicalCoordinates(System.Double)">
            <summary>
            Converts physical coordinates at the screen to logical, depending on the logic implemented in the horizontalRenderingHelper. This method works with 
            local screen coordinates and reflects also the scroll offset.
            </summary>
            <param name="offset">The local value at the X axis to be calculated. The method uses the Viewport property of the target if it is a <see cref="!:VirtualizedPanel"/>.</param>
            <returns>The converted logical value.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.Drop(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Object,System.Type,System.DateTime)">
            <summary>
            When overriden in a derived class allows custom code in the Drop event.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.GetItemType(System.Windows.FrameworkElement)">
            <summary>
            Returns the Type of the items in the provided control.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.GetItemsOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Returns IEnumerable containing only items from the provided Type.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.GetInferredItemType(System.Collections.IEnumerable)">
            <summary>
            Returns the type of the items in the provided collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.GetItemsFromDataObject(System.Object,System.Type)">
            <summary>
            Retrieves items from the specified data object only of the specified type.
            </summary>
            <param name="data"></param>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.DataConverter">
            <summary>
            Gets or sets the IDataObjectProvider instance that will be used in the drag-drop operations.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Internal.DragAndDropInteractionHelper.DragDropBehavior">
            <summary>
            Gets or sets the DragDropBehavior that will be used in the drag-drop operations.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Controls.Internal.KeyboardInteractionHelper">
            <summary>
            This class hooks to the target's keyboard events and notifies a specified observer for them translating the physical coordinates to logical.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.KeyboardInteractionHelper.Hook(System.Windows.FrameworkElement,Telerik.Windows.Rendering.ILogicalCanvasKeyObserver)">
            <summary>
            Hooks a <see cref="T:Telerik.Windows.Controls.Internal.KeyboardInteractionHelper"/> to the specified target and a mouse observer. When a keyboard event is fired on the target
            it will be translated to a high-level event with high-level parameters and the corresponding method of the observer will be called.
            </summary>
            <param name="target">The target to which events to hook the helper to.</param>
            <param name="observer">The observer to be notified.</param>
            <returns>The interaction helper created as a result of the operation. Null if the action have failed.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.KeyboardInteractionHelper.HookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method hooks the events to the target of the helper.
            </summary>
            <param name="target">The target to which to hook the events to.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.KeyboardInteractionHelper.UnhookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method unhooks the events from the target of the helper.
            </summary>
            <param name="target">The target from which to unhook the events.</param>
        </member>
        <member name="T:Telerik.Windows.Controls.Internal.MouseInteractionHelper">
            <summary>
            This class hooks to the target's mouse events and notifies a specified observer for them translating the physical coordinates to logical.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelper.Hook(Telerik.Windows.Rendering.LogicalCanvasPanel,Telerik.Windows.Rendering.ILogicalCanvasMouseObserver)">
            <summary>
            Hooks a <see cref="T:Telerik.Windows.Controls.Internal.MouseInteractionHelper"/> to the specified target and a mouse observer. When a mouse event is fired on the target
            it will be translated to a high-level event with high-level parameters and the corresponding method of the observer will be called.
            </summary>
            <param name="target">The target to which events to hook the helper to.</param>
            <param name="observer">The observer to be notified.</param>
            <returns>The interaction helper created as a result of the operation. Null if the action have failed.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelper.Hook(System.Windows.FrameworkElement,Telerik.Windows.Rendering.ILogicalCanvasRenderingHelper,Telerik.Windows.Rendering.ILogicalCanvasRenderingHelper,Telerik.Windows.Rendering.ILogicalCanvasMouseObserver)">
            <summary>
            Hooks a MouseInteractionHelper to the specified target and a mouse observer. When a mouse event is fired on the target
            it will be translated to a high-level event with high-level parameters and the corresponding method of the observer will be called.
            This method accepts two helpers that translate physical to logical coordinates.
            </summary>
            <param name="target">The target to which events to hook the helper to.</param>
            <param name="horizontalRenderingHelper">The helper to be used to convert the coordinates on X axis.</param>
            <param name="verticalRenderingHelper">The helper to be used to convert the coordinates on Y axis.</param>
            <param name="observer">The observer to be notified.</param>
            <returns>The interaction helper created as a result of the operation. Null if the action have failed.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelper.HookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method hooks the events to the target of the helper.
            </summary>
            <param name="target">The target to which to hook the events to.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Internal.MouseInteractionHelper.UnhookEvents(System.Windows.FrameworkElement)">
            <summary>
            When overridden in the derived class, this method unhooks the events from the target of the helper.
            </summary>
            <param name="target">The target from which to unhook the events.</param>
        </member>
        <member name="P:Telerik.Windows.Controls.WeekDaysGenerator.FirstDay">
            <Summary>Gets or sets FirstWorkingDay and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Controls.WeekDaysGenerator.DaysCount">
            <Summary>Gets or sets WorkingDaysCount and notifies for changes</Summary>
        </member>
        <member name="T:Telerik.Windows.Controls.Scheduling.IMouseOverHighlightItem">
            <summary>
            Implement this interface on items, which need MouseOverHighlightHelper.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SelectorItemBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SelectorItemBase.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.GotFocus"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SelectorItemBase.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.LostFocus"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="P:Telerik.Windows.Rendering.TreeContainer.TreeItemProxy.IsExpanded">
            <Summary>Gets or sets IsExpanded and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Rendering.TreeContainer.TreeItemProxy.CanExpand">
            <Summary>Gets or sets CanExpand and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Rendering.TreeContainer.TreeItemProxy.Level">
            <Summary>Gets or sets Level and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Rendering.TreeContainer.TreeItemProxy.SourceItem">
            <Summary>Gets or sets SourceItem and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Rendering.ICellsRenderingStatistics.ItemsCount">
            <summary>
            The count of the items for which the statistics are held.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Rendering.IRenderingStatistics.InsertStatsForItems(System.Int32,System.Int32)">
            <summary>
            Inserts a new item with the currently calculated default values at a specified index.
            </summary>
            <param name="index">The index in which to be inserted the new item.</param>
        </member>
        <member name="M:Telerik.Windows.Rendering.IRenderingStatistics.RemoveStatsForItems(System.Int32,System.Int32)">
            <summary>
            Removes an item from the specified index.
            </summary>
            <param name="index">The index to be removed.</param>
        </member>
        <member name="M:Telerik.Windows.Rendering.Tree.TreeRenderingHelper.GetNextItemIndexOfSameOrUpperLevel(System.Collections.Generic.IList{Telerik.Windows.Core.HierarchicalItem},System.Int32)">
            <summary>
            This method retrieves the index of the next item that has the same or upper level then the item with specified index.
            </summary>
            <param name="dataSource"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Rendering.Tree.TreeRenderingHelper.GetNextItemIndexOfSameOrUpperLevel(Telerik.Windows.Core.HierarchicalItem,System.Int32)">
            <summary>
            This method retrieves the index of the next item that has the same or upper level then the item with specified index.
            </summary>
            <param name="dataSource"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Rendering.Virtualization.RecyclingContext.GetAllGeneratedContainers">
            <summary>
            This method if for test purposes only!
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.HeaderedTickContainer.TickProxy.FormattedValue">
            <Summary>Gets or sets FormattedValue and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.HeaderedTickContainer.TickProxy.DateTime">
            <Summary>Gets or sets DateTime and notifies for changes</Summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.GroupsDataSource.Reset(System.Collections.IEnumerable,System.Collections.Generic.IEnumerable{Telerik.Windows.Data.Grouping.IGroupDescription})">
            <summary>
            Resets the groups data source. This method should be called when the grouping is changed, or the items source collection is replaced.
            Data source observes the items collection for collection changes.
            </summary>
            <param name="items"></param>
            <param name="groupDescriptions"></param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.IteractionState.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.IteractionState.IsControlDown">
            <summary>
            Gets or sets the state of the Control key in the moment when the DragDropState was created.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.IteractionState.IsShiftDown">
            <summary>
            Gets or sets the state of the Shift key in the moment when the DragDropState was created.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.IteractionState.DestinationSlot">
            <summary>
            Gets or sets the destination slot.
            </summary>
            <value>
            The destination slot.
            </value>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.IteractionState.EditingEngine">
            <summary>
            Gets or sets the editing engine.
            </summary>
            <value>
            The editing engine.
            </value>
        </member>
        <member name="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1">
            <summary>
            Abstract class representing the drag and drop state during drag drop operations.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1"/> class.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.ItemTypeProperty">
            <summary>
            Identifies the ItemType dependency property. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.GetDragDropEffects(`0)">
            <summary>
            Returns the DragDropEffects for the current drag drop operation. The return value affects the mouse cursor.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
            <remarks>
            This method is called only in the context of the drop target control.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CanDrop(`0)">
            <summary>
            Returns a value specifying whether the drag operation can be started.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
            <returns>True if the drag operation can be completed, otherwise false.</returns>
            <remarks>
            This method is called only in the context of the drag source control.
            </remarks>
            <summary>
            Determines whether this instance can drop the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns>
              <c>true</c> if this instance can drop the specified state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CanDrop(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            Determines whether this instance can drop the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns>
              <c>true</c> if this instance can drop the specified state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CanStartDrag(`0)">
            <summary>
            Determines whether this instance [can start drag] the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns>
              <c>true</c> if this instance [can start drag] the specified state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CanStartDrag(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            Determines whether this instance [can start drag] the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns>
              <c>true</c> if this instance [can start drag] the specified state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.Drop(`0)">
            <summary>
            Drops the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.Drop(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            Drops the specified state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.BeginEdit(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState,System.Object)">
            <summary>
            Begins the edit.
            </summary>
            <param name="state">The state.</param>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.TryCommitEdit(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            Tries to commit the edit operation.If fails the edit operation will be canceled.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CopyDraggedItems(`0)">
            <summary>
            Copies the items that are dragged in the operation specified by the provided ListBoxDragDropState.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.DragDropCanceled(`0)">
            <summary>
            When overridden in a derived class cleans up a cancelled drag operation. This method is called only in the context of the drag source control.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
            <remarks>
            This method is called only when the drag operation is cancelled by the user. If this method is called, the source's DragDropCompleted and 
            target's Drop methods are not called.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.DragDropCanceled(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            Drags the drop canceled.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.DragDropCompleted(`0)">
            <summary>
            Drags the drop completed.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.DragDropCompleted(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            When overridden in a derived class completes the drag operation. This method is called only in the context of the drag source control.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
            <remarks>
            When the drag source and the drop target are the same control, this method is called after Drop. 
            This method is called only when the drag operation completed successfuly. If this method is called, DragDropCanceled is not called.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.CoerceDraggedItems(Telerik.Windows.Controls.Scheduling.SchedulingDragDropState)">
            <summary>
            When overriden in a derived class, filters the dragged items collection if necessary.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
            <returns>The filtered dragged items.</returns>
            <remarks>
            This method is called immediately before the drag operation starts.
            Only the Items property of the DragDropState is valid.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.RemoveItems(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Helper method that removes the specified items from the source list.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.InsertItems(System.Collections.IList,System.Int32,System.Collections.IEnumerable)">
            <summary>
            Helper method that inserts the specified items in the source list, at the specified index. If index==-1, adds the items at the end of the list.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.IsMovingItems(`0)">
            <summary>
            Returns true if the dragged items should be removed from the source list, otherwise false.
            </summary>
            <param name="state">DragDropState that provides context for the current operation.</param>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.ItemType">
            <summary>
            Gets or sets the Type of the items that can be accepted by the host control. This is a dependency property.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropBehavior`1.AllowReorder">
            <summary>
            Gets or sets the value specifying whether the ListBoxDragDropBehavior can reorder itms or not.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropPayload">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState"/> class.
            </summary>
            <param name="draggedItems">The dragged items.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.#ctor(System.Collections.IList,System.Collections.IList,System.Int32,System.Boolean,System.Boolean,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState"/> class.
            </summary>
            <param name="destinationSource">The destination source.</param>
            <param name="draggedItems">The dragged items.</param>
            <param name="insertIndex">Index of the insert.</param>
            <param name="isControlDown">if set to <c>true</c> [is control down].</param>
            <param name="isShiftDown">if set to <c>true</c> [is shift down].</param>
            <param name="sourceItemsSource">The source items source.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.GetItems">
            <summary>
            Gets the dragged items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.DraggedItems">
            <summary>
            Gets or sets the items that are being dragged.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.SourceItemsSource">
            <summary>
            Gets or sets the drag source control ItemsSource. This property is null when the state represents the context of the drop target control.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.DestinationItemsSource">
            <summary>
            Gets or sets the drop target control ItemsSource. This property is null when the state represents the context of the drag source control.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.IsSameControl">
            <summary>
            Gets a value that specifies whether the drag source and the drop target are the same control.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.InsertIndex">
            <summary>
            Gets or sets the index at which the dragged items will be inserted. A value -1 means that the items should be added at the end of the items source.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.TimeToDrop">
            <summary>
            Gets the time to drop coresponding to the mouse cursor's position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingDragDropState.DraggedItem">
            <summary>
            Gets the dragged item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingResizeBehavior`1.BeginEdit(Telerik.Windows.Controls.Scheduling.SchedulingResizeState,System.Object)">
            <summary>
            Begins the edit.
            </summary>
            <param name="state">The state.</param>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingResizeBehavior`1.TryCommitEdit(Telerik.Windows.Controls.Scheduling.SchedulingResizeState)">
            <summary>
            Tries to commit the edit operation.If fails the edit operation will be canceled.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Telerik.Windows.Controls.Scheduling.SchedulingResizeState">
            <summary>
            Provides a context for a drag-drop operation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingResizeState"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingResizeState"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.GetItems">
            <summary>
            Gets the items that are resized.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.IsResizeFromEnd">
            <summary>
            Gets or sets a value indicating whether this instance is resize from end.
            </summary>
            <value>
            	<c>true</c> if this instance is resize from end; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.ResizedItem">
            <summary>
            Gets or sets the items that are being dragged.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SchedulingResizeState.TimeToDrop">
            <summary>
            Gets the time to drop coresponding to the mouse cursor's position.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Controls.Scheduling.Slot">
            <summary>
            Class reprsenting destination slot of the dragged item.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.Slot.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.Slot.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.MouseOverHighlightHelper.HighlightedItem">
            <Summary>Gets or sets HighlightedItem and notifies for changes.</Summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingSelectionBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingSelectionBehavior"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.SchedulingSelectionBehavior.#ctor(Telerik.Windows.Controls.KeyboardModifiersState)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.SchedulingSelectionBehavior"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.SpecialSlotsSettings.SlotGenerator">
            <Summary>Gets or sets SlotGenerator and notifies for changes</Summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.TimeLineSettings.ToPixels(System.Int64)">
            <summary>
            Converts offset in ticks to pixels where the zero tick (with value 0) corresponds to the 0 pixels offset.
            </summary>
            <param name="offsetTicks">The offset to be converted where 0 is the base value.</param>
            <returns>The offset converted to pixels.</returns>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.TimeLineSettings.ToTicks(System.Double)">
            <summary>
            Converts offset in pixels to ticks offset where the zero tick (with value 0) corresponds to the 0 pixels offset.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.TimeLineSettings.Rounder">
            <Summary>Gets or sets Rounder and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.VisibleRangeSettings.VisibleRange">
            <Summary>Gets or sets VisibleRange and notifies for changes</Summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.VisibleRangeSettings.TimeLineRangesGenerator">
            <Summary>Gets or sets TimeLineFilteringBehavior and notifies for changes</Summary>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.TimeRulerLine.IntervalsProperty">
            <summary>
            Identifies the Intervals dependency property. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.TimeRulerLine.MinTickLengthProperty">
            <summary>
            Identifies the MinTickLength dependency property. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.TimeRulerLine.HeightProperty">
            <summary>
            Identifies the Height dependency property. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.TimeRulerLine.Intervals">
            <summary>
            Gets or sets the Intervals. This is a dependency property.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.TimeRulerLine.MinTickLength">
            <summary>
            Gets or sets the MinTickLength. This is a dependency property.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.TimeRulerLine.Height">
            <summary>
            Gets or sets the Height of the time ruler line. This is a dependency property.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.VisibleRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.VisibleRange"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.VisibleRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Controls.Scheduling.VisibleRange"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.VisibleRange.StartProperty">
            <summary>
            Identifies the VisibleRangeStart dependency property. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Controls.Scheduling.VisibleRange.EndProperty">
            <summary>
            Identifies the VisibleRangeEnd dependency property. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Controls.Scheduling.VisibleRange.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event. This method is called when a property of this control is changed.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="E:Telerik.Windows.Controls.Scheduling.VisibleRange.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.VisibleRange.Start">
            <summary>
            Gets or sets the Start of the range. This is a dependency property.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Controls.Scheduling.VisibleRange.End">
            <summary>
            Gets or sets the End of the range. This is a dependency property.
            </summary>
        </member>
    </members>
</doc>
