<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Windows.Diagrams.Core</name>
    </assembly>
    <members>
        <member name="T:Telerik.Windows.Diagrams.Core.BaseCollection`1">
            <summary>
            An observable collection which splits the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event into seprarate events.
            </summary>
            <typeparam name="T">
            The type on which the collection is based.
            </typeparam>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.BaseCollection`1.raiseEventsByDefault">
            <summary>
            By default the events will be raised.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BaseCollection`1"/> class.
            </summary>
            <param name="raiseEventsByDefault">
            The raise events by default.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">
            The item to be added.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Add(`0,System.Boolean)">
            <summary>
            Adds and new item to the collection and specifies whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </summary>
            <param name="item">
            The item to add to the collection.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Clear(System.Boolean)">
            <summary>
            Clears this collection.
            </summary>
            <param name="raise">
             Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this collection.
            </summary>
            <param name="index">
            The index at which the item should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Insert(System.Int32,`0,System.Boolean)">
            <summary>
            Inserts an item to this collection.
            </summary>
            <param name="index">
            The index at which the item should be inserted.
            </param>
            <param name="item">
            The item to insert.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemInserted"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Remove(`0)">
            <summary>
            Removes an item from this collection.
            </summary>
            <param name="item">
            The item to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.Remove(`0,System.Boolean)">
            <summary>
            Removes an item from this collection.
            </summary>
            <param name="item">
            The item to remove.
            </param>
            <param name="raise">
            Whether to raise the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved"/> event.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseAdding(`0)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded"/> event.
            </summary>
            <param name="item">
            The item to which the event refers.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseClearing">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared"/> event.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseInserting(`0)">
            <summary>
            Raises the ItemInserted event.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BaseCollection`1.RaiseRemoving(`0)">
            <summary>
            Raises the <see cref="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved"/> event.
            </summary>
            <param name="item">
            The item to which the event refers.
            </param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.Cleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemAdded">
            <summary>
            Occurs when an item is added.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemInserted">
            <summary>
            Occurs when an item is inserted.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.BaseCollection`1.ItemRemoved">
            <summary>
            Occurs when an item is removed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2">
            <summary>
            Helper class to extract a <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/> from a <see cref="T:Telerik.Windows.Diagrams.Core.IGraph"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.connections">
            <summary>
            The connections being mapped.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.linkMap">
            <summary>
            The mapping to/from the original connection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.nodeMap">
            <summary>
            The mapping to/from the original nodes.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.nodes">
            <summary>
            The nodes being mapped.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2"/> class.
            </summary>
            <param name="diagramControl">
            The diagram control.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.CreateNode(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Creates a <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> from a given <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Integrate">
            <summary>
            Integrates the graph information into the elements.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.CreateLink(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Creates a link.
            </summary>
            <param name="link">
            The link.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Integrate(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Integrates the graph information into the elements.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Integrate(Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Integrates the node information.
            </summary>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.GetInLinks(Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            The get in links.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.GetOutLinks(Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Gets the outgoing links.
            </summary>
            <param name="node">
            The node under consideration.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IgnoredLinks">
            <summary>
            Gets IgnoredLinks.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.IgnoredLinksMap">
            <summary>
            Gets IgnoredLinksMap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Links">
            <summary>
            Gets the Links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.Nodes">
            <summary>
            Gets the nodes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramToGraphAdapter`2.DiagramControl">
            <summary>
            Gets or sets DiagramControl.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Edge`2">
            <summary>
            Generic implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.IEdge`2"/> interface.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IEdge`2">
            <summary>
            Graph analysis link description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.Clone">
            <summary>
            Returns a shallow copy of this link.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.GetComplementaryNode(Telerik.Windows.Diagrams.Core.INode{`0,`1})">
            <summary>
            Gets the other node of this link.
            </summary>
            <param name="node">
            The complementary node which defines this link.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IEdge`2.Reverse">
            <summary>
            Inverts this link by changing its direction.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Id">
            <summary>
            Gets or sets the identifier of this link.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Sink">
            <summary>
            Gets or sets the sink of this link, i.e. the node at the end of the link.
            </summary>
            <value>
            The sink node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Source">
            <summary>
            Gets or sets the source of this link, i.e. the node at the beginning of the link.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IEdge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Edge`2.reversed">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.IsReversed"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.Clone">
            <summary>
            Returns a (shallow) clone of this link.
            </summary>
            <remarks>
            The following properties are being cloned: 
            <list type="bullet">
            <item>
            <description>The identifier (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Id">Id</see>)</description></item>
            <item>
            <description>The weight (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Weight">Weight</see>)</description></item>
            <item>
            <description>The segment index (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.SegmentIndex">SegmentIndex</see>)</description></item>
            <item>
            <description>The points (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Points">Points</see>).</description></item></list>
            </remarks>
            <returns>
            A clone of this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetComplementaryNode(Telerik.Windows.Diagrams.Core.INode{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}})">
            <summary>
            Returns the opposite or complementary node of the given one.
            </summary>
            <param name="node">
            The node whose complement is looked for.
            </param>
            <returns>
            <c>null</c> if the node is not part of this link, otherwise the opposite or complementary node with respect to this link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.Create(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Initializes this link with the given <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> link.
            </summary>
            <param name="connection">
            The connection on which this link is based.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetBounds">
            <summary>
            Gets the bounding rectangle of this entity.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.GetOppositeNode(Telerik.Windows.Diagrams.Core.Node{`0,`1})">
            <summary>
            Returns the node at the opposite end of the link.
            </summary>
            <param name="node">
            The a Node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.SetPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Sets the control points (<see cref="P:Telerik.Windows.Diagrams.Core.Edge`2.Points"/>) of this link.
            </summary>
            <param name="points">
            The points defining this link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Edge`2.Reverse">
            <summary>
            Reverses the direction of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.NumberOfVirtualNodes">
            <summary>
            Gets or sets the number of virtual nodes which have been inserted during the process of breaking layer-crossing links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.IsReversed">
            <summary>
            Gets wheter link has been reversed (using the <see cref="M:Telerik.Windows.Diagrams.Core.Edge`2.Reverse"/> method).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Connection">
            <summary>
            Gets the associated <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> object.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Points">
            <summary>
            Gets or sets the points defining the link.
            </summary>
            <remarks>This also defines eventually the <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> visual if it's a polyline or some other multi-point visual.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.PropertyBag">
            <summary>
            Gets or sets the dictionary of runtime/layout properties.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.SegmentIndex">
            <summary>
            Gets or sets index of the segment.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Weight">
            <summary>
            Gets the weight of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Id">
            <summary>
            Gets or sets identifier.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Sink">
            <summary>
            Gets the destination (target, end) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.Source">
            <summary>
            Gets the source (origin, start) node of this link.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Edge`2.OutgoingLink">
            <summary>
            Gets or sets whether this is an outgoing link.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Graph`2">
            <summary>
            Default implementation/inheritance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class in function of analysis and layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphBase`2">
            <summary>
            Base graph class for the various incarnations in the graph analysis.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The graph is directed by default (<code lang="C#">IsDirected =
            true</code>)</description></item>
            <item>
            <description>The adjacency structure is not centralized but resides in the
            Outgoing and Incoming collection attached to the
            Nodes.</description></item></list>
            </remarks>
            <typeparam name="TNode">The data type of the node which should be an
            implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.INode`2">INode{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
            <typeparam name="TLink">The data type of the edge which should be an
            implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.IEdge`2">IEdge{TNode,TLink}</see>
            interface and have a parameterless constructor.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Graph`2">Graph{TNodeData,TLinkData}</seealso>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GraphBase`2.isDirected">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.#ctor(Telerik.Windows.Diagrams.Core.GraphBase{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphBase`2"/> class.
            </summary>
            <param name="graph">The graph content to start with. Note that references will be added, not clones.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">
            <summary>
            Adds a link to this graph.
            </summary>
            <param name="source">
            The source of the link.
            </param>
            <param name="sink">
            The sink of the link.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`1)">
            <summary>
            Adds the givven link to the graph. It will add the sink and source nodes to the <see cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Nodes"/> collection if they are not yet
            part of it.
            </summary>
            <param name="link">
            The link to add.
            </param>
            <returns>
            The added link.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddNode(`0)">
            <summary>
            Adds the given node to the graph.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddNodes(`0[])">
            <summary>
            Adds a series of nodes to the graph.
            </summary>
            <param name="nodes">
            The nodes.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreConnected(`0,`0,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="n">A node.</param>
            <param name="m">Another node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
            <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreConnected(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns whether the given nodes are connected in one direction or the other.
            </summary>
            <remarks>
            Because the structure allows multigraphs the connectedness means there is at
            least one link between the given nodes.
            </remarks>
            <param name="i">The id of the first node.</param>
            <param name="j">The id of the second node.</param>
            <param name="strict">If set to <c>true</c> the first node has to be the source of the link and the second the sink..</param>
            <returns>
              <c>true</c> If there is a link connecting the given nodes with the first one as source and the second as sink, <c>false</c> if both options have to be considered.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AssignIdentifiers">
            <summary>
            Assigns to each link and node an identifier based on their collection listIndex.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindEdge(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds the edge with the specified identifiers.
            </summary>
            <param name="i">The id of the source.</param>
            <param name="j">The id of the sink.</param>
            <param name="strict">If set to <c>true</c> the found link has to go from i to j.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindNode(System.Int32)">
            <summary>
            Finds the node with the specified identifier.
            </summary>
            <param name="id">The id to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindTreeRoot">
            <summary>
            Attempts to find a tree root by looking at the longest paths in the graph.
            </summary>
            <remarks>The algorithms looks for all shortest paths between all vertices, which means it will also function for disconnected graphs but will return the root
            of the tree with longest path.</remarks>
            <returns>A tree root or <c>null</c> is none was found.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetBoundingRectangle``2(System.Boolean)">
            <summary>
            Returns the bounding rectangle of this layout graph.
            </summary>
            <param name="includeLinks">The include Links.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetConnectedComponents">
            <summary>
            Returns the connected components of this graph.
            </summary>
            <returns>
            The list of connected components.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.GetNextIdInNodes(System.Int32)">
            <summary>
            Gets the next identifier of the nodes sequence.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.HaveUniqueIdentifiers">
            <summary>
            Ensures the unique identifiers.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.EnsureUniqueIdentifiers">
            <summary>
            Ensures that the graph nodes all have a unique identifier assigned.
            </summary>
            <remarks>If the nodes do have unique identifiers nothing will be altered.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.NumberOfComponents">
            <summary>
            Returns the number of (connected) components.
            </summary>
            <example>
            The following example create two components; 
            <para> </para>
            <code lang="C#">var g = new GraphBase&lt;Node, Edge&gt;();
            for (var i = 0; i &lt; 4; i++) g.AddNode(new Node(1, true));
            g.AddLink(g.Nodes[0], g.Nodes[1]);
            g.AddLink(g.Nodes[2], g.Nodes[3]);
            var count = g.NumberOfComponents();</code>
            .</example>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.NumberOfComponents(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            Returns the number of connected components.
            </summary>
            <param name="componentMap">The component map as a dictionary where the key is the node identifier and the value is the number of the connected component to which the node belongs.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveAllLinksFrom(`0)">
            <summary>
            Detaches all links from from the given node and removes them from the graph structure.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveLink(`1)">
            <summary>
            Removes the link.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RemoveNode(`0)">
            <summary>
            Removes the given node from this graph.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.RenumberNodes(System.Int32)">
            <summary>
            Assigns a new identifier to the nodes.
            </summary>
            <param name="startId">The number to start the numbering from.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinkListString">
            <summary>
            Returns a string representation of the incidence structure of this graph.
            </summary>
            <example>
            A diagram with links between identifier 1 and 2, 2 and 3, 3 and 4 will result in
            a string
            <para><code lang="C#">{"1,2", "2,3",
            "3,4"}</code></para>.
            </example>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinksList">ToLinksList</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinksList">
            <summary>
            Returns the links structure of this graph as a list of identifier tuples.
            </summary>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToLinkListString"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.TopologicalSort(System.Boolean)">
            <summary>
            Is a linear ordering of its vertices such that, for every edge uv, u comes
            before v in the ordering. See Wikipedia for example;
            http://en.wikipedia.org/wiki/Topological_sorting.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>The sorting is not unique.</description></item>
            <item>
            <description>The graph has to be acyclic in order to have a topological
            sort.</description></item>
            <item>
            <description>The sorting works on disconnected
            graphs.</description></item></list>
            </remarks>
            <param name="forceNewIdentifier"></param>
            <returns>
            The topologically sorted sequence of node identifiers or <c>null</c> is the graph has cycles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.ShortestPaths">
            <summary>
            Gets the shortests path lengths between each two vertices.
            </summary>
            <returns>
            A dictionary keyed with the node id's and value equal to the path lengths.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AreInSameComponent(System.Int32,System.Int32)">
            <summary>
            Returns whether the two nodes with specified ide's are the in same component.
            </summary>
            <param name="id1">The id1.</param>
            <param name="id2">The id2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.DijkstraShortestPath(System.Int32,System.Int32)">
            <summary>
            Returns the shortest path between two nodes using the Dijkstra algorithm.
            </summary>
            <param name="sourceId">From id.</param>
            <param name="targetId">To id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.FindLongestPath">
            <summary>
            Finds the longest path in this (directed acyclic) graph.
            </summary>
            <returns>A list of identifiers corresponding to the path, or <c>null</c> if the graph has cycles.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AssignConnectedComponent(System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Iteratively assigns a component listIndex to the connected nodes of the given node.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>Initially the Indices collection needs to
            be initialized with -1 to set the nodes which haven't been
            visited.</description>
            </item>
            <item>
            <description>The visiting process is really a DFT of the connected nodes
            starting from a given node and keeping track of the visited item via the
            assigned component map.</description>
            </item>
            </list>
            </remarks>
            <param name="componentMap">
            The indices is the list of component indices mapped to the node indices.
            </param>
            <param name="listIndex">
            The node id being assigned currently.
            </param>
            <param name="componentIndex">
            Index of the current component.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphBase`2.TopologicalSort(System.Int32,System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Int32@)">
            <summary>
            Iterative function helping with the topological sort, see the public overload of TopologicalSort.
            </summary>
            <param name="nodeId">The current node id.</param>
            <param name="result">The result of the sorting (up to this point).</param>
            <param name="handledSequence">The handled sequence.</param>
            <param name="visitSequence">The visit sequence.</param>
            <param name="handledCounter">The handled counter.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsConnected">
            <summary>
            Gets whether this graph is connected.
            See also this article;  http://en.wikipedia.org/wiki/Connected_graph. 
            </summary>
            <remarks>
            A graph is connected if every two vertices are connected by a path. A connected
            graph has only one component.
            </remarks>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsAcyclic">
            <summary>
            Gets whether the graph is acyclic.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If there are no cycles in a graph it's acyclic. A cycle means a
            closed path or loop.</description></item>
            <item>
            <description>See also the article;
            http://en.wikipedia.org/wiki/Directed_acyclic_graph
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsHamiltonian">
            <summary>
            Gets whether the graph is hamiltonian.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>An Hamitonian cycle is a cycle which contains all nodes of the
            graph. If there is at least one such cycle the graph is called
            Hamiltonian.</description></item>
            <item>
            <description>See also the article;http://en.wikipedia.org/wiki/Hamiltonian_graph
            .</description></item></list>
            </remarks>
            <value>
            <c>true</c> if this instance is acyclic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Links">
            <summary>
            Gets or sets the links of this graph.
            </summary>
            <value>
            The links collection.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected">
            <summary>
            Gets whether this graph is directed.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphBase`2.Nodes">
            <summary>
            Gets or sets the nodes of this graph.
            </summary>
            <value>
            The nodes collection.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Graph`2.#ctor(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean)">
            <summary>
            Initializes a new instance of the Graph class.
            </summary>
            <param name="diagramControl">
            The diagram Control.
            </param>
            <param name="full">
            Transfers the full incidence structure to the <see cref="T:Telerik.Windows.Diagrams.Core.Graph`2"/>.
            </param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.DiagramControl">
            <summary>
            Gets DiagramControl.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.IgnoredLinks">
            <summary>
            Gets or sets IgnoredLinks.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.IgnoredLinksMap">
            <summary>
            Gets or sets IgnoredLinksMap.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Graph`2.Root">
            <summary>
            Gets the root ControlShape of this Graph (assuming that the Graph is tree).
            If there is no root ControlShape, returns null.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphExtensions">
            <summary>
            The static graph-analysis related extensions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Clone(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             Returns a shallow clone from the given collection.
            </summary>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Edge{``0,``1}})">
            <summary>
             Returns a shallow clone from the given collection.
            </summary>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateArray(System.Int32,System.Int32)">
            <summary>
            Returns an array of the specified size.
            </summary>
            <param name="size">
            The size.
            </param>
            <param name="value">
            The Graph value of the elements in the array.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateDictionary``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Int32)">
            <summary>
            Creates a dictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateBiDictionary``2(Telerik.Windows.Diagrams.Core.GraphBase{``0,``1},System.Int32)">
            <summary>
            Creates a bidictionary with keys equal to the (supposedly unique) identifiers and value equal to the provided initial value.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
            <param name="graph">The graph.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.CreateArray(System.Int32,System.Int32,System.Int32)">
            <summary>
             Returns an array of the specified size.
            </summary>
            <param name="dim1">
            The first dimension.
            </param>
            <param name="dim2">
            The second dimension.
            </param>
            <param name="value">
            The Graph value of the elements.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.MoveGraph``2(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{``0,``1},Telerik.Windows.Diagrams.Core.Edge{``0,``1}},System.Double,System.Double)">
            <summary>
            Offsets the specified graph.
            </summary>
            <param name="layoutGraph">
            The layout Graph.
            </param>
            <param name="xoffset">
            The horizontal offset.
            </param>
            <param name="yoffset">
            The vertical offset.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.MoveLink``2(Telerik.Windows.Diagrams.Core.Edge{``0,``1},System.Windows.Point)">
            <summary>
            Moves link.
            </summary>
            <param name="edge">
            The layout link.
            </param>
            <param name="p">
            The delta to move.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Offset(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the given rectangle.
            </summary>
            <param name="rect">
            The rect.
            </param>
            <param name="x">
            The horizontal offset.
            </param>
            <param name="y">
            The vertical offset.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Position(System.Windows.Rect)">
            <summary>
            Returns the position of the given rectangle.
            </summary>
            <param name="r">
            The rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.UnionEmptyRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            If the first supplied rectangle has width or height zero the second rectangle will be returned. Otherwise the
            standard union of two rectangles will be used.
            </summary>
            <param name="r1">
            A rectangle.
            </param>
            <param name="r2">
            Another rectangle.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.UnionRects(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns the smallest possible rectangle containing
            both of the specified rectangles.
            </summary>
            <param name="a">
            The first rectangle.
            </param>
            <param name="b">
            The second rectangle.
            </param>
            <returns>
            The union of the rectangles.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Clone``2(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Node{``0,``1}})">
            <summary>
             Returns a shallow clone from the given collection.
            </summary>
            <param name="list">
            The collection to clone.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.Split``2(Telerik.Windows.Diagrams.Core.Graph{``0,``1},System.Boolean)">
            <summary>
            Splits the specified FusedLayoutGraph to its interconnected subgraphs.
            </summary>
            <param name="graph">
            The layout Graph.
            </param>
            <param name="split">
            The split.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.OffsetConnectionPoints``2(Telerik.Windows.Diagrams.Core.Edge{``0,``1},System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Offsets the link's points by the specified amount.
            </summary>
            <param name="edge">
            The layout link.
            </param>
            <param name="xOffset">
            The horizontal offset.
            </param>
            <param name="yOffset">
            The vertical offset.
            </param>
            <param name="beginId">
            The index inside the point collection from which to start the offset.
            </param>
            <param name="endId">
            The index inside the point collection where the offset should end.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphExtensions.SplitGraph``2(Telerik.Windows.Diagrams.Core.Graph{``0,``1})">
            <summary>
            Separates the various graph components from the given graph.
            </summary>
            <param name="graph">
            The Graph which should be separated.
            </param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2">
            <summary>
            A mapping (functor actually) from one graph to another.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphMorphism`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2"/> class. 
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphMorphism`2"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.EdgeMorphism">
            <summary>
            Gets or sets the edge morphism between the links.
            </summary>
            <value>
            The edge morphism.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.Graph">
            <summary>
            Gets or sets the target of the morphism.
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphMorphism`2.NodeMorphism">
            <summary>
            Gets or sets the node morphism between the nodes.
            </summary>
            <value>
            The node morphism.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphPath`2">
            <summary>
            A path consists of a series of adjacent links.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphPath`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.#ctor(Telerik.Windows.Diagrams.Core.GraphPath{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphPath`2"/> class.
            </summary>
            <param name="path">The path from which a clone will be taken as a starting point for this path.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.Add(`1,`0)">
            <summary>
            Adds a links and a node to this path.
            </summary>
            <param name="edge">
            The layout link.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.AddLink(`1)">
            <summary>
            Adds a link to this path.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.AddNode(`0)">
            <summary>
            Adds a node to this path.
            </summary>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphPath`2.Reverse">
            <summary>
            Reverses the nodes sequence.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Nodes">
            <summary>
            Gets or sets the nodes of this path.
            </summary>
            <value>
            The nodes this path is made of.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.PathLength">
            <summary>
            Gets length of this path (i.e. the amount of links).
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Elements">
            <summary>
            Gets or sets the collection of nodes and links this path is made of.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphPath`2.Links">
            <summary>
            Gets or sets the links of this path.
            </summary>
            <value>
            The links this path is made of.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HashtableDictionary">
            <summary>
            An object-object dictionary which returns null in case a key is not found (the normal dictionary does throw an exception in this case).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HashtableDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.HashtableDictionary"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HashtableDictionary.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.INode`2">
            <summary>
            Graph analysis node description.
            </summary>
            <typeparam name="TNode">
            The type of the node.
            </typeparam>
            <typeparam name="TLink">
            The type of the link.
            </typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Node`2"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.Clone">
            <summary>
            Returns a shallow copy of this node.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.GetNeighbors">
            <summary>
            Gets the nodes adjacent to this node.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.INode`2.RemoveLink(`1)">
            <summary>
            Removes a link from this node.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.AllLinks">
            <summary>
            Gets all links bounds to this node.
            </summary>
            <value>
            All links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle.
            </summary>
            <remarks>
            This defines the location as well as the size of the shape as a result of a layout process.
            </remarks>
            <value>
            The bounding rectangle.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Id">
            <summary>
            Gets or sets the (supposed unique) identifier.
            </summary>
            <value>
            The identifier of this node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Incoming">
            <summary>
            Gets the incoming links, i.e. the links towards this node.
            </summary>
            <value>
            The incoming links.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.Outgoing">
            <summary>
            Gets the outgoing links, i.e. the links leaving this node.
            </summary>
            <value>
            The outgoing.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.INode`2.IsDirected">
            <summary>
            Gets or sets a value indicating whether this node is part of directed graph.
            </summary>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Node`2">
            <summary>
            Default implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> interface.
            </summary>
            <typeparam name="TNodeData">The type of the payload.</typeparam>
            <typeparam name="TLinkData">The type of the link data.</typeparam>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Edge`2"/>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Node`2.incoming">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming"/> field.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Node`2.outgoing">
            <summary>
            The <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/> field.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="shape">
            The shape this node is based on.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="shape">The shape.</param>
            <param name="isDirected">If set to <c>true</c> [is directed].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Node`2"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="isDirected">If set to <c>true</c> the links are considered as directed and <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/> is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/> or <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming"/> collections.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.Clone">
            <summary>
            Returns a (shallow) copy of this node.
            </summary>
            <returns>
            Returns a copy of this node, including the references of incoming and outgoing edges.
            It does not however clone beyond these collections.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.GetNeighbors">
            <summary>
            Returns the neighbors of this node.
            </summary>
            <returns>
            The nodes which are directly linked to the current one.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveLink(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes a link.
            </summary>
            <param name="link">
            The link.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.AddIncomingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Adds an incoming link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.AddOutgoingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Adds an outgoing link.
            </summary>
            <param name="edge">
            The link to add.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveIncomingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes an incoming edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.RemoveOutgoingEdge(Telerik.Windows.Diagrams.Core.Edge{`0,`1})">
            <summary>
            Removes the given outgoing edge.
            </summary>
            <param name="edge">
            The edge to remove.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.TransferBoundsToAssociatedShape">
            <summary>
            Transfers the bounds to the associated shape, if possibile.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.TransferCenterToAssociatedShape">
            <summary>
            Transfers the center to the associated shape, if possible.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.GetBoundsFromAssociatedShape">
            <summary>
            Gets the bounds from the associated shape, if possible.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Node`2.GetCenterFromAssociatedShape">
            <summary>
            Gets the bounds from the associated shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Data">
            <summary>
            Gets or sets the data or payload carried by this node.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.AssociatedShape">
            <summary>
            Get the shape associated with this layout shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Center">
            <summary>
            Gets or sets the geometric center of this ControlShape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Degree">
            <summary>
            Returns the total number of links attached.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">
            <summary>
            Gets all the links of this node.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Id">
            <summary>
            Gets or sets Id.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming">
            <summary>
            Get the node's incoming links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)"/> method in
            order to update the related properties (<see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks"/>,
            <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)"/>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing">
            <summary>
            Get the node's outgoing links.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the node is directed (i.e. <c>IsDirected = true</c>) then this collection is the same as the <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see> collection.</description></item>
            <item>
            <description>Do not add links to this collection but use the <see cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">GraphBase{TNode,TLink}.AddLink(TNode,TNode)</see>
            method in order to update the related properties (<see cref="P:Telerik.Windows.Diagrams.Core.Node`2.AllLinks">AllLinks</see>, <see cref="P:Telerik.Windows.Diagrams.Core.Node`2.Outgoing">Outgoing</see>...).</description></item></list>
            </remarks>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.GraphBase`2.AddLink(`0,`0)">AddLink(TNode,TNode)</seealso>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.Node`2.Incoming">Incoming</seealso>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Node`2.IsDirected">
            <summary>
            Gets whether this node's links are directed.
            </summary>
            <seealso cref="P:Telerik.Windows.Diagrams.Core.GraphBase`2.IsDirected"/>
            <value>
            	<c>true</c> if this instance is directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathFinder`2">
            <summary>
            Utility class to help find paths and cycles in a graph.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathFinder`2.FindLongestPath(Telerik.Windows.Diagrams.Core.Graph{`0,`1})">
            <summary>
            Finds the longest path in the graph.
            </summary>
            <param name="graph">The layout graph which contains all the info we need.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling">
            <summary>
            The path coupling contains a trail of the computation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.Current">
            <summary>
            Gets or sets Current.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathFinder`2.PathCoupling.New">
            <summary>
            Gets or sets New.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.op_Equality(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.op_Inequality(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.ItemRect">
            <summary>
            Gets or sets the item rect.
            </summary>
            <value>
            The item rect.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectorInfo.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.TreeNode`1">
            <summary>
            Classic tree node implementation.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeNode`1.#ctor(Telerik.Windows.Diagrams.Core.TreeNode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.TreeNode`1.#ctor(Telerik.Windows.Diagrams.Core.TreeNode{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Children">
            <summary>
            Gets or sets the children of this node.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Data">
            <summary>
            Gets or sets the data (payload).
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.TreeNode`1.Parent">
            <summary>
            Gets or sets the parent of this node.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Twig`2">
            <summary>
            Data bucket similar to a <see cref="T:Telerik.Windows.Diagrams.Core.TreeNode`1"/> but based on a link rather than a parent property.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <typeparam name="TLink">The type of the link.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Twig`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Twig`2"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Twig`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Twig`2"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="link">The link.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Twig`2.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Twig`2.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>
            The link.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ChangeSourceCommand">
            <summary>
            The change source undoable command.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphCommandBase">
            <summary>
            Base implementation of the <see cref="T:Telerik.Windows.Diagrams.Core.ICommand"/> undoredo interface.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ICommand">
            <summary>
            Describes and undoredo unit of work.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Redo">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.Execute(System.Object)">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICommand.CanExecute(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ICommand.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphCommandBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.#ctor(System.String,Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphCommandBase"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="diagramItem">The graph item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute.
            </summary>
            <returns>
              <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphCommandBase.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphCommandBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphCommandBase.DiagramItem">
            <summary>
            Gets the graph item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ChangeSourceCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connection">The connection.</param>
            <param name="oldSourceShape">The old source shape.</param>
            <param name="newSourceShape">The new source shape.</param>
            <param name="newSourcePoint">The new source point.</param>
            <param name="undoAction">The undo action.</param>
            <param name="redoAction">The redo action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeSourceCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ChangeTargetCommand">
            <summary>
            The change target undoable command.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ChangeTargetCommand"/> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="connection">The connection.</param>
            <param name="oldTargetShape">The old target shape.</param>
            <param name="newTargetShape">The new target shape.</param>
            <param name="newTargetPoint">The new target point.</param>
            <param name="undoAction">The undo action.</param>
            <param name="redoAction">The redo action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ChangeTargetCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphController">
            <summary>
            Main MVC controller. The view type is based on an interface in function of platform independence.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IServiceLocator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.RoutingService">
            <summary>
            Gets the connection routing service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.AlignmentService">
            <summary>
            Gets the selection service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.SelectionService">
            <summary>
            Gets the selection service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.DraggingService">
            <summary>
            Gets the dragging service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.UndoRedoService">
            <summary>
            Gets the undo redo service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.HitTestService">
            <summary>
            Gets the hit test service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.ItemRelationService">
            <summary>
            Gets the item relation service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.SerializationService">
            <summary>
            Gets the serialization service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.RotationService">
            <summary>
            Gets the rotation service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.ResizingService">
            <summary>
            Gets the resizing service.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IServiceLocator.ManipulationPointService">
            <summary>
            Gets the manipulation point service.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISerializable">
            <summary>
            Represents a serializable item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializable.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISerializable.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when Items collection changes.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnGraphSourceChanged(Telerik.Windows.Diagrams.Core.IGraphSource)">
            <summary>
            Called when graph source changeds.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AddConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Adds the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AddShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Adds the shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.RemoveConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Removes the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.RemoveShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Removes the shape from the diagram.
            </summary>
            <param name="shape">The shape to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> the action will be recorded in the undo stack.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphController"/> class.
            </summary>
            <param name="graph">The graph internal.</param>
            <param name="containerGenerator">The container generator.</param>		
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ActivateTool(Telerik.Windows.Diagrams.Core.MouseTool)">
            <summary>
            Activates the tool.
            </summary>
            <param name="mouseTool">The mouse tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.AlignSelectedShapes(Telerik.Windows.Diagrams.Core.Alignment)">
            <summary>
            Aligns the selected shapes to the most left/top/right/bottom edge defined by the selection bounds.
            </summary>
            <param name="alignment">Determins whether alignment should be calculated towards left/top/right/bottom edge.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SnapSelectedShapes">
            <summary>
            Snaps the selected items based on the snap value.
            The action is enclosed in a undoable command and supports undo/redo.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ChangeTool(System.String)">
            <summary>
            Changes the tool.
            </summary>
            <param name="toolName">Label of the tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Layout(Telerik.Windows.Diagrams.Core.SugiyamaSettings)">
            <summary>
            Layouts the diagram.
            </summary>
            <param name="settings">The parametrization of the layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.ForceRealization">
            <summary>
            Forces the realization.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Called when key down event is fired.
            </summary>
            <param name="e">The key args.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the left mouse buttonis down.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the mouse moves.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Called when the mouse left button is up.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Clear(System.Boolean)">
            <summary>
            Clears the diagram and resets the document.
            </summary>
            <remarks>
            The diagram is not saved prior to this reset. You need to handle in the
            application the eventual necessity to save (or request the user) the diagram
            before this.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Copy">
            <summary>
            Creates a copy of the diagram in the clipboard.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Paste">
            <summary>
            Pastes a diagram, serialized in the clipboard.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.DeleteItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Deletes the items.
            </summary>
            <param name="itemsToDelete">The items to delete.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.CutItems">
            <summary>
            Cuts the items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.BringToFront(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Brings the selected items to front.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.BringForward(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Brings the selected items forward.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SendBackward(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Sends selected items backward.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SendToBack(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Sends selected items to back.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.OnViewportChanged">
            <summary>
            Called when the bounds have changed.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.SelectItem(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Selects a specific item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.DeselectItem(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Deselects a specific item.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Deserializes the specified info.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Save">
            <summary>
            Returns the serialized diagram as an XML-string.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.Load(System.String)">
            <summary>
            Loads the serialized diagram.
            </summary>
            <param name="serializationValue">A string supposedly containing some XML representing a serialized diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.IsInViewport(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Checks if the diagram item is in the viewport.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphController.GetIsolatedStoreOverride">
            <summary>
            Gets the isolated storage store.
            </summary>
            <returns>Returns the isolated storage store.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphController.IsServiceManipulating">
            <summary>
            Gets a value indicating that any of the services is manipulating upon user action.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Alignment">
            <summary>
            Represents alignment options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Left">
            <summary>
            Left align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Center">
            <summary>
            Center align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Right">
            <summary>
            Right align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Top">
            <summary>
            Top align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Middle">
            <summary>
            Middle align.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Alignment.Bottom">
            <summary>
            Bottom align.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CapType">
            <summary>
            The type of the connection's cap.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow1">
            <summary>
            Arrow1 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow1Filled">
            <summary>
            Arrow1 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow2">
            <summary>
            Arrow2 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow2Filled">
            <summary>
            Arrow2 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow3">
            <summary>
            Arrow3 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow4">
            <summary>
            Arrow4 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow4Filled">
            <summary>
            Arrow4 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow5">
            <summary>
            Arrow5 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow5Filled">
            <summary>
            Arrow5 filled type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow6">
            <summary>
            Arrow6 type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CapType.Arrow6Filled">
            <summary>
            Arrow6 filled type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectorPosition">
            <summary>
            Orientation of the connector point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto">
            <summary>
            The connection's connector is calculated.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Left">
            <summary>
            The connection is bound to the left of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Top">
            <summary>
            The connection is bound to the top of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Right">
            <summary>
            The connection is bound to the right of the shape.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Bottom">
            <summary>
            The connection is bound to the bottom of the shape.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IRouter">
            <summary>
            Represents a connection router.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.InflatedRectRouter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.InflatedRectRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.ConnectorInfo,Telerik.Windows.Diagrams.Core.ConnectorInfo,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns>
            The points of the route.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.InflatedRectRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CommandNames">
            <summary>
            Names of commands (undoable actions).
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddShape">
            <summary>
            The AddShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddShapes">
            <summary>
            The AddShapes action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveShape">
            <summary>
            The RemoveShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveShapes">
            <summary>
            The RemoveShapes action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddConnection">
            <summary>
            The AddConnection action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.AddConnections">
            <summary>
            The AddConnections action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveConnection">
            <summary>
            The RemoveConnection action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RemoveConnections">
            <summary>
            The RemoveConnections action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.MoveItem">
            <summary>
            The MoveItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.MoveItems">
            <summary>
            The MoveItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ResizeShape">
            <summary>
            The ResizeShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ResizeShapes">
            <summary>
            The ResizeShapes action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.BringToFront">
            <summary>
            The BringToFront action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.BringForward">
            <summary>
            The BringForward action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.SendBackward">
            <summary>
            The SendBackward action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.SendToBack">
            <summary>
            The SendToBack action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DeleteItems">
            <summary>
            The DeleteItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.PasteItems">
            <summary>
            The PasteItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RotateItem">
            <summary>
            The RotateItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.RotateItems">
            <summary>
            The RotateItems action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.EditItem">
            <summary>
            The EditItem action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ChangeSource">
            <summary>
            The ChangeSource action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.ChangeTarget">
            <summary>
            The AddShape action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.CommandNames.DiagramLayout">
            <summary>
            The DiagramLayout action.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CompositeCommand">
            <summary>
            Represents a composite command.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand">
            <summary>
            Base class for undoable actions based on delegates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand"/> class.
            </summary>
            <param name="name">The name or title of the command.</param>
            <param name="execute">The redo or execute method.</param>
            <param name="undo">The undo or rollback method.</param>
            <param name="canExecute">The method returning whether the command can be executed.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Redo">
            <summary>
            Executes an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Execute(System.Object)">
            <summary>
            Executes an undoable action.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.CanExecute(System.Object)">
            <summary>
            Gets a value indicating whether this command can be executed.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoableDelegateCommand.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.#ctor(System.String,System.Action{System.Object},System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CompositeCommand"/> class.
            </summary>
            <param name="name">The name or title of the composite action.</param>
            <param name="execute">The execute action.</param>
            <param name="undo">The undo action.</param>
            <param name="canExecute">The CanExecute action.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Redo">
            <summary>
            Executes and undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.Undo(System.Object)">
            <summary>
            Unwinds an undoable action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Returns whether this command can be executed.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CompositeCommand.AddCommand(Telerik.Windows.Diagrams.Core.ICommand)">
            <summary>
            Adds commands to the composite command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MoveItemCommand">
            <summary>
            Undoable move action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IDiagramItem,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.MoveItemCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="shape">The shape.</param>
            <param name="oldLocation">The old location.</param>
            <param name="newLocation">The new location.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.MoveItemCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand">
            <summary>
            Undoable shape manipulation action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.#ctor(System.String,Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point,System.Windows.Size,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="shape">The shape.</param>
            <param name="oldPosition">The old position.</param>
            <param name="oldSize">The old size.</param>
            <param name="oldAngle">The old angle.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Execute(System.Object)">
            <summary>
            Executes the specified state.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulateShapeCommand.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionType">
            <summary>
            The type of the connection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionType.Straight">
            <summary>
            Straight connection type.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionType.Polyline">
            <summary>
            Polyline connection type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramConstants">
            <summary>
            Global constants.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.StartDragDelta">
            <summary>
            The minimum distance to start a drag action.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ResizingDelta">
            <summary>
            The delta around the resizing thumbs that is considered close.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.SingleItemMinimumResizingSize">
            <summary>
            The minimum resizing size of a single item.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MultipleItemsMinimumResizingSize">
            <summary>
            The minimum resizing size of multiple items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ConnectorManipulationDistance">
            <summary>
            The distance, around which manipulation of connectos is enabled.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ConnectionNearShapeDistance">
            <summary>
            The distance, whithin which the shape's connectors are visible.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DiagramItemSelectionMargin">
            <summary>
            The distance around each item which is considered selectable.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.InflatedRouterMinimumMargin">
            <summary>
            The margin around the shapes, which the <see cref="T:Telerik.Windows.Diagrams.Core.InflatedRectRouter"/> inflates the shapes with.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.SnappingValue">
            <summary>
            The default snapping value.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.RoutingGridSize">
            <summary>
            The routing grid size.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.Epsilon">
            <summary>
            A small value to compare floating numbers in the layout.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.AssemblyQualifyingNameSeparator">
            <summary>
            The separator for assembly qualifying names.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.ShapeToConnectorOffset">
            <summary>
            The offset between the shape and the connector.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.InitialZoomLevel">
            <summary>
            The default zooming step.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DefaultZoomFactor">
            <summary>
            The default zooming step.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MaximumZoomFactor">
            <summary>
            The maximum zoom factor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MinimumZoomFactor">
            <summary>
            The minimum zoom factor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.MouseMovedThreshold">
            <summary>
            The minimum mouse move threshold.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DefaultDropWidth">
            <summary>
            The default width of a droppped shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DefaultDropHeight">
            <summary>
            The default height of a droppped shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DefaultCellSize">
            <summary>
            Gets or sets the Default cell size.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramConstants.DefaultLineThickness">
            <summary>
            Gets or sets the default line thickness.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ExecuteAction">
            <summary>
            Represents the execute action of the command.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Execute">
            <summary>
            Execute action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Undo">
            <summary>
            Undo action.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ExecuteAction.Redo">
            <summary>
            Redo action.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointType">
            <summary>
            The type of a manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Default">
            <summary>
            Default (middle) point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.First">
            <summary>
            The first manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Last">
            <summary>
            The last manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Corner">
            <summary>
            The corner point of a segmented line.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.MiddleLine">
            <summary>
            The middle point of a line.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointType.Connector">
            <summary>
            Connector point.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Orientation">
            <summary>
            Enumeration of orientations or directions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Orientation.Horizontal">
            <summary>
            The horizontal orientation.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Orientation.Vertical">
            <summary>
            The vertical orientation.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramPropertyName">
            <summary>
            Properties names.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Position">
            <summary>
            Position property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Source">
            <summary>
            Source property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Target">
            <summary>
            Target property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.StartPoint">
            <summary>
            StartPoint property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.EndPoint">
            <summary>
            EndPoint property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.Bounds">
            <summary>
            Bounds property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsVisible">
            <summary>
            Visibility property.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.RotationAngle">
            <summary>
            RotationAngle.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramPropertyName.IsSelected">
            <summary>
            Selected.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizeDirection">
            <summary>
            Resizing directions.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.NorthWestSouthEast">
            <summary>
            NorthWest to SouthEast.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.NorthEastSouthWest">
            <summary>
            NorthEast to SouthWest.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.SouthEastNorthWest">
            <summary>
            SouthEast to NorthWest.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ResizeDirection.SouthWestNorthEast">
            <summary>
            SouthWest to NorthEast.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionMode">
            <summary>
            Represents the selection mode options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Single">
            <summary>
            Single selection mode - only one selected item is allowed.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Multiple">
            <summary>
            Multiple selection mode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.Extended">
            <summary>
            Extended selection mode.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionMode.None">
            <summary>
            No selection - no selected items are allowed.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionState">
            <summary>
            Represents selection state options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.None">
            <summary>
            None.
            </summary>	 
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.Single">
            <summary>
            Single state.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SelectionState.Multiple">
            <summary>
            Multiple state.
            </summary>		
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeConnectionType">
            <summary>
            Represents the connections types.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Outgoing">
            <summary>
            Outgoing connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Incoming">
            <summary>
            Incoming connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ShapeConnectionType.Both">
            <summary>
            Both incoming and outgoing connections.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramEvent">
            <summary>
            Diagram events.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeAdded">
            <summary>
             The shape added event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeRemoved">
            <summary>
            The shape removed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionAdded">
            <summary>
            The connection added event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionRemoved">
            <summary>
            The connection removed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeSerializing">
            <summary>
            The shape serializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeDeserializing">
            <summary>
            The shape deserializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeClicked">
            <summary>
            The shape clicked event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ShapeDoubleClicked">
            <summary>
            The shape double-clicked event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionSerializing">
            <summary>
            The connection serializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.MetadataSerialized">
            <summary>
            The metadata serialized event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.MetadataDeserialized">
            <summary>
            The metadata deserialized event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionDeserializing">
            <summary>
            The connection deserializing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionAttaching">
            <summary>
            The connection attaching event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionDetaching">
            <summary>
            The connection detaching event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionAttached">
            <summary>
            The connection attached event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ConnectionDetached">
            <summary>
            The connection detached event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Rotate">
            <summary>
            The rotation event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.RotateDelta">
            <summary>
            RotateDelta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Rotating">
            <summary>
            The rotating event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Resize">
            <summary>
            The resize event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.ResizeDelta">
            <summary>
            The resize delta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Resizing">
            <summary>
            The resizing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Drag">
            <summary>
            The drag event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.DragDelta">
            <summary>
            DragDelta event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Dragging">
            <summary>
            The dragging event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.SelectionBoundsChanged">
            <summary>
            The selection bounds changed event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Selecting">
            <summary>
            Before select event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.Select">
            <summary>
            Select event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.CommandExecuting">
            <summary>
            The command executing event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DiagramEvent.CommandExecuted">
            <summary>
            The command executed event.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.InteractionEvent">
            <summary>
            Interaction events.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseDown">
            <summary>
            Mouse down event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseMove">
            <summary>
            Mouse move event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.MouseUp">
            <summary>
            Mouse up event.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.InteractionEvent.CollectionChanged">
            <summary>
            Collection changed event.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectSelectionMode">
            <summary>
            The rect selection options.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectSelectionMode.Full">
            <summary>
            Full selection mode - the bounds of the item should be fully inside the rect selection.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectSelectionMode.Partial">
            <summary>
            Partial selection mode - the bounds of the item should ovelap with the rect selection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingEventArgs">
            <summary>
            Event args that can be canceled.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1">
            <summary>
            Generic args that can be canceled.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T">T.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GenericEventArgs`1.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>
            The entity.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>True</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs">
            <summary>
            Represents Command event args.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.CommandEventArgs">
            <summary>
            Represents Command event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CommandEventArgs.#ctor(Telerik.Windows.Diagrams.Core.ICommand,Telerik.Windows.Diagrams.Core.ExecuteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CommandEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CommandEventArgs.ExecuteAction">
            <summary>
            Gets the execute action.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs.#ctor(Telerik.Windows.Diagrams.Core.ICommand,Telerik.Windows.Diagrams.Core.ExecuteAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.CancellableCommandEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.CancelingGenericEventArgs`1"/> is cancel.
            </summary>
            <value>
              <c>True</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramItemsEventArgs.Items">
            <summary>
            Gets the rotating items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingEventArgs">
            <summary>
            Represent dragging event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KeyArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyArgs.#ctor(System.Windows.Input.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyArgs"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.KeyArgs.#ctor(System.Windows.Input.Key,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.KeyArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="isFocusWithinItem">The isFocusWithinItem parameter.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.KeyArgs.IsFocusWithinItem">
            <summary>
            Gets or sets whether the focus is in some of the diagram items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointActivatedEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointerArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerArgs.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="transformedPoint">The transformed point.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PointerArgs.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PointerArgs.TransformedPoint">
            <summary>
            Gets or sets the transformed point.
            </summary>
            <value>
            The transformed point.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.OldBounds">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.BoundsChangedEventArgs.NewBounds">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.#ctor(System.Windows.Point,System.Windows.Point,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PropertyEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PropertyEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PropertyEventArgs"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PropertyEventArgs.PropertyName">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs">
            <summary>
            Represent resizing event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingEventArgs.#ctor(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingEventArgs"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotatingEventArgs.#ctor(System.Double,System.Double,System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotatingEventArgs"/> class.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotatingEventArgs.OldAngle">
            <summary>
            Gets the old angle.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotatingEventArgs.NewAngle">
            <summary>
            Gets the new angle.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs"/> class.
            </summary>
            <param name="removedItems">The removed items.</param>
            <param name="addedItems">The added items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets the removed items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.AddedItems">
            <summary>
            Gets the added items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramSelectionChangedEventArgs.Handled">
            <summary>
            Gets or sets the Handled property.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionEventArgs">
            <summary>
            Selection event args.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SelectionEventArgs"/> class.
            </summary>
            <param name="removedItems">The removed items.</param>
            <param name="addedItems">The added items.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionEventArgs.RemovedItems">
            <summary>
            Gets the removed items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionEventArgs.AddedItems">
            <summary>
            Gets the added items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1">
            <summary>
            Serialization event args.
            </summary>
            <typeparam name="T">The type of the serialized object.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1.#ctor(`0,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="serializationInfo">The serialization info.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationEventArgs`1.SerializationInfo">
            <summary>
            Gets the serialization info.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ColorExtension">
            <summary>
            A collection of utilities related to color.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorExtension.op_Implicit(System.UInt32)~Telerik.Windows.Diagrams.Core.ColorExtension">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Telerik.Windows.Diagrams.Core.ColorExtension"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorExtension.op_Implicit(Telerik.Windows.Diagrams.Core.ColorExtension)~System.Windows.Media.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Windows.Diagrams.Core.ColorExtension"/> to <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorExtension.op_Implicit(Telerik.Windows.Diagrams.Core.ColorExtension)~System.Windows.Media.Brush">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Windows.Diagrams.Core.ColorExtension"/> to <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorExtension.ToBrush(Telerik.Windows.Diagrams.Core.ColorExtension)">
            <summary>
            Converts ColorExtension to Brush.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorExtension.op_Implicit(Telerik.Windows.Diagrams.Core.ColorExtension)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Telerik.Windows.Diagrams.Core.ColorExtension"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KnownColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.AliceBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.AntiqueWhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Aqua">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Aquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Azure">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Beige">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Bisque">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Black">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.BlanchedAlmond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Blue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.BlueViolet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Brown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.BurlyWood">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.CadetBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Chartreuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Chocolate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Coral">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.CornflowerBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.CornSilk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Crimson">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Cyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkCyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkGoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkKhaki">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkMagenta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkOliveGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkOrange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkOrchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkRed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkSalmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkSlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkSlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DarkViolet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DeepPink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DeepSkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DimGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.DodgerBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Firebrick">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.FloralWhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.ForestGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Fuchsia">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Gainsboro">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.GhostWhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Gold">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Goldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Gray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Green">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.GreenYellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Honeydew">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.HotPink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.IndianRed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Indigo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Ivory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Khaki">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Lavender">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LavenderBlush">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LawnGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LemonChiffon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightCoral">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightCyan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightGoldenrodYellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightLightGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightPink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightSalmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightSkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightSlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightSteelBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LightYellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Lime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.LimeGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Linen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Magenta">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Maroon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumAquamarine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumOrchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumPurple">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumSeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumSlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumSpringGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MediumVioletRed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MidnightBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MintCream">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.MistyRose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Moccasin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.NavajoWhite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Navy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.OldLace">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Olive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.OliveDrab">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Orange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.OrangeRed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Orchid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PaleGoldenrod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PaleGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PaleTurquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PaleVioletRed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PapayaWhip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PeachPuff">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Peru">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Pink">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Plum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.PowderBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Purple">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Red">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.RosyBrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.RoyalBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SaddleBrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Salmon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SandyBrown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SeaShell">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Sienna">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Silver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SkyBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SlateBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SlateGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Snow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SpringGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.SteelBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Tan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Teal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Thistle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Tomato">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Turquoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Violet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Wheat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.White">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.WhiteSmoke">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.Yellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownColors.YellowGreen">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ColorUtilities">
            <summary>
            Static helper class related to color.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ColorUtilities.NamedColorsRgb">
            <summary>
            The ARGB values corresponding to the <see cref="F:Telerik.Windows.Diagrams.Core.ColorUtilities.NamedColors"/>.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ColorUtilities.NamedColors">
            <summary>
            Know color names taken over from .Net.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Froms the ARGB.
            </summary>
            <param name="alfa">The alfa.</param>
            <param name="red">The red.</param>
            <param name="green">The green.</param>
            <param name="blue">The blue.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Returns a color based on its HSL value.
            </summary>
            <param name="hue">The hue.</param>
            <param name="saturation">The saturation.</param>
            <param name="luminance">The luminance.</param>
            <returns>The corresponding color.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.RgbToHsl(System.Windows.Media.Color)">
            <summary>
            Given a Color (RGB Struct) in range of 0-255
            Return H,S,L in the range [0,1].
            </summary>
            <param name="colorRgb">The RGB.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ByteArrayToHexString(System.Byte[])">
            <summary>
            Converts the given byte arrary to a color in the format #AARRGGBB.
            </summary>
            <param name="value">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.HexStringToByteArray(System.String)">
            <summary>
            Converts the #AARRGGBB string color to a byte array.
            </summary>
            <param name="color">The hex string value of the color.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.HexStringFromSolidColor(System.Windows.Media.Color)">
            <summary>
            
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ColorToString(System.Windows.Media.Color)">
            <summary>
            Converts the specified color to a format #AARRGGBB. Use the <see cref="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ColorToString(System.Windows.Media.Color)"/> to convert a string back to a color.
            </summary>
            <param name="color">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.StringToColor(System.String)">
            <summary>
            Converts the specified string value to Color.
            </summary>
            <param name="value">
            The string value to convert from.
            </param>
            <returns>
            A Color value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ParseToBrush(System.String)">
            <summary>
            Parses to brush.
            </summary>
            <param name="hexValue">The hex string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ColorFromBrush(System.Windows.Media.Brush,System.Windows.Media.Color)">
            <summary>
            Colors from brush.
            </summary>
            <param name="brush">The brush.</param>
            <param name="def">The def.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ColorFromString(System.String)">
            <summary>
            Colors from string.
            </summary>
            <param name="hexValue">The hex string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.Sum(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Adds the two given colors.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.ToValue(System.Windows.Media.Color)">
            <summary>
            Returns the unsigned integer value of the color.
            </summary>
            <param name="color">The color.</param>                
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.Parse(System.Int32)">
            <summary>
            Parses the specified value and converts it to a color.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>        
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.FromAngle(System.Double)">
            <summary>
            Creates a color from an angle.
            </summary>
            <param name="value">The angle in degrees.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.Multiply(System.Windows.Media.Color,System.Double)">
            <summary>
            Multiplies/scales the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="factor">The factor.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorUtilities.Parse(System.String)">
            <summary>
            Parses the specified color string (e.g. '#FF4B4578').
            </summary>
            <param name="value">The string representation of the color.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorUtilities.RandomBlues">
            <summary>
            Gets a random shade of blue.
            </summary>
            <value>The random blue color.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorUtilities.RandomBrush">
            <summary>
            Gets the random brush where the color is picked from the known colors.
            </summary>
            <value>The random brush.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ColorVector">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorVector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ColorVector"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ColorVector.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ColorVector"/> class.
            </summary>
            <param name="a">A.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorVector.A">
            <summary>
            Gets or sets the A.
            </summary>
            <value>
            The A.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorVector.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorVector.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>
            The G.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ColorVector.B">
            <summary>
            Gets or sets the B.
            </summary>
            <value>
            The B.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionUtilities">
            <summary>
            Utilities for connections.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.CalculateMiddlePointOfLine(System.Tuple{System.Windows.Point,System.Windows.Point},System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Calculates the middle point of line.
            </summary>
            <param name="connectionEnds">The connection end points.</param>
            <param name="connectionPoints">The points of interest (points where the line is curved/segmented).</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.CalculateMoveablePoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the moveable points.
            </summary>
            <param name="connectionStart">The connection start point.</param>
            <param name="connectionEnd">The connection end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.TransformConnectionPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Transforms the points of interest.
            </summary>
            <param name="conection">The conection.</param>
            <param name="globalCoordinates">If set to <c>true</c> points will be transformed to global coordinates. If set to false, then the coordinates will be relative to the connection.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetConnectionEndPoints(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.ConnectorPosition,Telerik.Windows.Diagrams.Core.ConnectorPosition,System.Boolean)">
            <summary>
            Gets the connection end points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="sourceConnectorPosition">The source connector position.</param>
            <param name="targetConnectorPosition">The target connector position.</param>
            <param name="useConnectionCoordinates">If set to <c>true</c> the points will be in global coordinates. If set to false, then the coordinates will be relative to the connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetNeighborManipulationPoints(Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint)">
            <summary>
            Gets the neighboring manipulation points.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.GetClosestManipulationCornerPoints(Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint)">
            <summary>
            Gets the closest corner manipulation points.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionUtilities.IsFloating(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Determines whether the specified connection is floating.
            </summary>
            <param name="connection">The connection.</param>
            <returns>
              <c>true</c> If the specified connection is floating; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DashStyle">
            <summary>
            Defines the dash style of a <see cref="T:Telerik.Windows.Diagrams.Core.Pen"/>.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.#ctor(System.Windows.Media.DoubleCollection,System.Double)">
            <summary>
            Initializes a new instance of the DashStyle class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.#ctor">
            <summary>
            Initializes a new instance of the DashStyle class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.#ctor(System.Double,System.Windows.Media.DoubleCollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DashStyle"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="dashes">The dashes.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.FromId(System.Int32)">
            <summary>
            Returns the dashstyle with the specified identifier (if it exists).
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.Clone">
            <summary>
            Creates an exact copy of this pen.
            </summary>
            <returns>An instance of the Pen class.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DashStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Offset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Dashes">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that is used to outline shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DashStyle.Id">
            <summary>
            Gets or sets the unique identifier of the style.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HslColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.op_Equality(Telerik.Windows.Diagrams.Core.HslColor,Telerik.Windows.Diagrams.Core.HslColor)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.op_Inequality(Telerik.Windows.Diagrams.Core.HslColor,Telerik.Windows.Diagrams.Core.HslColor)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="color1">The color1.</param>
            <param name="color2">The color2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HslColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Hue">
            <summary>
            Gets or sets the hue.
            </summary>
            <value>
            The hue.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Saturation">
            <summary>
            Gets or sets the saturation.
            </summary>
            <value>
            The saturation.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HslColor.Luminance">
            <summary>
            Gets or sets the luminance.
            </summary>
            <value>
            The luminance.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.KnownBrushes">
            <summary>
            KnownBrushes contains predefined Brush objects. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Black">
            <summary>
            A solid black brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Gray">
            <summary>
            A solid gray brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.White">
            <summary>
            A solid white brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Red">
            <summary>
            A solid red brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Green">
            <summary>
            A solid green brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Cyan">
            <summary>
            A solid cyan brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Yellow">
            <summary>
            A solid yellow brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Blue">
            <summary>
            A solid blue brush.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.LightYellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.LightGoldenrodYellow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.SteelBlue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.Silver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.DimGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.LightGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.LightLightGray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.SeaGreen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.KnownBrushes.BlueWhiteGradient">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointData">
            <summary>
            Structure wrapping point and its manipulation type.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.#ctor(System.Windows.Point,Telerik.Windows.Diagrams.Core.ManipulationPointType)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointData"/> struct.
            </summary>
            <param name="point">The point.</param>
            <param name="pointType">Type of the point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.op_Equality(Telerik.Windows.Diagrams.Core.ManipulationPointData,Telerik.Windows.Diagrams.Core.ManipulationPointData)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.op_Inequality(Telerik.Windows.Diagrams.Core.ManipulationPointData,Telerik.Windows.Diagrams.Core.ManipulationPointData)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointData.Point">
            <summary>
            Returns the point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointData.PointType">
            <summary>
            Returns the manipulation type.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Pen">
            <summary>
            The pen implementatin for Silverlight.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Pen"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Pen"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.#ctor(System.Windows.Media.Brush,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Pen"/> class.
            </summary>
            <param name="brush">The brush.</param>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.#ctor(System.Windows.Media.Brush,System.Double,Telerik.Windows.Diagrams.Core.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Pen"/> class.
            </summary>
            <param name="brush">The brush of the pen.</param>
            <param name="thickness">The thickness of the pen.</param>
            <param name="dashStyle">The dash style of the pen.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.Clone">
            <summary>
            Creates an exact copy of this pen.
            </summary>
            <returns>An instance of the Pen class.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Pen.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Pen.Brush">
            <summary>
            Gets or sets the Brush object that defines the appearance of this pen.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Pen.Thickness">
            <summary>
            Gets or sets the width of the pen.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Pen.DashStyle">
            <summary>
            Gets or sets the style used for dashed pens.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointExtensions">
            <summary>
            Extensions for the Point class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.IsXBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether [is X between] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if [is X between] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointExtensions.IsYBetween(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines whether [is Y between] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="firstPoint">The first point.</param>
            <param name="secondPoint">The second point.</param>
            <returns>
              <c>true</c> if [is Y between] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectExtensions">
            <summary>
            Extensions on the Rect class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsInBounds(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets whether the Rect is fully in bounds of the hosting rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="hostingRect">The hosting rect.</param>
            <returns>Returns true if the rect is fully inside the boudns fo the hosting rect.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IsBigger(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether the specified rect is bigger.
            </summary>
            <param name="rect">The rect.</param>
            <param name="targetRect">The target rect.</param>
            <returns>
              <c>true</c> if the specified rect is bigger; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Rotate(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotates the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Rotate(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotatates the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="rotationPoint">The rotation point.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopLeft(System.Windows.Rect)">
            <summary>
            Returns the top-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopRight(System.Windows.Rect)">
            <summary>
            Returns the top-right point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomRight(System.Windows.Rect)">
            <summary>
            Returns the bottom-right corner of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomLeft(System.Windows.Rect)">
            <summary>
            Returns the bottom-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterLeft(System.Windows.Rect)">
            <summary>
            Centers the left.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterTop(System.Windows.Rect)">
            <summary>
            Centers the top.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterRight(System.Windows.Rect)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterBottom(System.Windows.Rect)">
            <summary>
            Centers the bottom.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RotationPoint(System.Windows.Rect)">
            <summary>
            Returns the bottom-left point of the rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Center(System.Windows.Rect)">
            <summary>
            Returns the center of the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterX(System.Windows.Rect)">
            <summary>
            Centers the X.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterY(System.Windows.Rect)">
            <summary>
            Centers the Y.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Tops the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.TopRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Tops the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Bottoms the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.BottomLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Bottoms the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Center(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterLeft(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the left.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterTop(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the top.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterRight(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the right.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.CenterBottom(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Centers the bottom.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.RotationPoint(System.Windows.Rect,System.Double,System.Windows.Point)">
            <summary>
            Rotations the point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="angle">The angle.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.AroundPoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Arounds the point.
            </summary>
            <param name="originPoint">The origin point.</param>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.Contains(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Determines whether [contains] [the specified rect].
            </summary>
            <param name="rect">The rect.</param>
            <param name="point">The point.</param>
            <param name="angle">The angle.</param>
            <returns>
              <c>true</c> if [contains] [the specified rect]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.IntersectsWith(System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Intersectses the with.
            </summary>
            <param name="rect">The rect.</param>
            <param name="shapeBounds">The shape bounds.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectExtensions.ToSize(System.Windows.Rect)">
            <summary>
            Toes the size.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RectExtensions.RotateTransform">
            <summary>
            Simple RotateTransform.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationExtensions">
            <summary>
            Utilities related to (de)serialization.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.ToXml(System.Windows.Media.Brush)">
            <summary>
            Converts the given brush to XML.
            </summary>
            <param name="brush">The brush to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.FromXml(System.String)">
            <summary>
            Convert the given XML-string to a brush, if possible.
            </summary>
            <param name="serializationValue">The XML as string.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Converts the given XML to a brush, if possible.
            </summary>
            <param name="element">The XML element representing a brush.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetBrushInfo(System.Windows.Media.Brush,System.String)">
            <summary>
            Converts the brush to a serialized form which can be added to the buckets of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/>.
            </summary>
            <param name="brush">The brush.</param>
            <param name="nodeName">Name of the node.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetBrush(System.Object,System.String)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetBrush(System.Object,System.String)">
            <summary>
            Returns a brush from the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> data.
            </summary>
            <param name="data">The data representing a brush; which can be a simple color or a gradient..</param>
            <param name="nodeName">Name of the node.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Gets the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> of the <see cref="T:Telerik.Windows.Diagrams.Core.IDiagramItem"/>.
            </summary>
            <param name="item">The item to dehydrate.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the serializationInfo.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.GetSerializationInfo(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Gets the serializationInfo.
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IDiagramItem,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="item">The item.</param>
            <param name="info">The serialization item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="shape">The shape.</param>
            <param name="info">The serialization info.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationExtensions.SetFromSerializationInfo(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Sets from serialization info.
            </summary>
            <param name="connection">The connection.</param>
            <param name="info">The serialization info.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeUtilities">
            <summary>
            Utility class for shapes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Telerik.Windows.Diagrams.Core.ShapeUtilities"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetDistanceToConnector(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.ConnectorPosition,System.Windows.Point)">
            <summary>
            Gets the distance to connector.
            </summary>
            <param name="shape">The shape.</param>
            <param name="position">The position.</param>
            <param name="relativePoint">The relative point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetClosestConnectorPosition(Telerik.Windows.Diagrams.Core.IShape,System.Windows.Point)">
            <summary>
            Gets the closest connector position.
            </summary>
            <param name="shape">The shape.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeUtilities.GetConnectorPoint(Telerik.Windows.Diagrams.Core.ConnectorPosition,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connector point.
            </summary>
            <param name="position">The position.</param>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Utils">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Utils.Epsilon">
            <summary>
            An infinitesimal value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsNanOrInfinity(System.Double)">
            <summary>
            Gets whether the value is double or infinity.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectsWith(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Returns whether the given rectangle intersects the current one.
            </summary>
            <param name="r1">The first rectangle.</param>
            <param name="r2">The queried rectangle which potentially intersects.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Offsets the current rectangle with the specified values.
            </summary>
            <param name="rect">The rectangle to offset.</param>
            <param name="x">The horizontal offset.</param>
            <param name="y">The vertical offset.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.CreateRectangle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates the rectangle.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToRoot(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Returns the coordinates of the given point with respect to the root application. 
            The given point should be the coordinates with respect to the given framework element.
            </summary>
            <param name="frameworkElement">A framework element with respect to which the point is given.</param>
            <param name="point">A point with respect to the given framework element.</param>
            <returns>The coordinates of the point with respect to the root visual.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.PointToScreen(System.Windows.UIElement,System.Windows.Point)">Another alias for the same method.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointToScreen(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Returns the coordinates of the given point with respect to the root application. 
            The given point should be the coordinates with respect to the given framework element.
            </summary>
            <param name="element">An element with respect to which the point is given.</param>
            <param name="point">A point with respect to the given framework element.</param>
            <returns>The coordinates of the point with respect to the root visual.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.ToRoot(System.Windows.FrameworkElement,System.Windows.Point)">Another alias for the same method.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointFromScreen(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Returns the coordinates of the given point with respect to the given element.
            The given coordinates should be with respect to the root visual.
            </summary>
            <param name="element">A UI element.</param>
            <param name="point">A point with coordinates with respect to the root visual.</param>
            <returns>The coordinates with respect to the given element.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.FromRoot(System.Windows.FrameworkElement,System.Windows.Point)">Another alias for the same method.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FromRoot(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Returns the coordinates of the given point with respect to the given element.
            The given coordinates should be with respect to the root visual.
            </summary>
            <param name="element">A UI element.</param>
            <param name="point">A point with coordinates with respect to the root visual.</param>
            <returns>The coordinates with respect to the given element.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.PointFromScreen(System.Windows.UIElement,System.Windows.Point)">Another alias for the same method.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.BinarySearchIntersection(System.Windows.FrameworkElement,System.Windows.Point,System.Windows.Point)">
            <summary>
            Iterative/recursive search for the point between the two given points where the given element is crossed.
            The inside and outside points represent a line which is iterative subdivided in two to find where the given
            element is hit. The recursion stops when the division is less than five pixels (i.e. the error Margin).
            </summary>
            <param name="element">The element to search for.</param>
            <param name="insidePoint">The inside point.</param>
            <param name="outsidePoint">The outside point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetTopLeftPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the minimum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBottomRightPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Gets a point from the maximum X and Y values from the specified points.
            </summary>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MiddlePoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returs the middle point between the given points.
            </summary>
            <param name="p1">A point.</param>
            <param name="p2">Another point.</param>
            <returns>Halfway between the two given points.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Double,System.Double,System.Double)">
            <summary>
            Returns zero within the given interval and +/-1 whether the value is above or below the interval.
            </summary>
            <param name="value">The argument of the function.</param>
            <param name="lower">The lower value of the interval.</param>
            <param name="upper">The upper value of the interval.</param>
            <returns>Zero, -1 or +1 whether the value is below, resp. inside, resp. above the interval.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the <see cref="M:Telerik.Windows.Diagrams.Core.Utils.StairValue(System.Double,System.Double,System.Double)"/> of the x,y values of the given point with.
            respect to the boundaries of the specified rectangle.
            </summary>
            <param name="p">The point to test.</param>
            <param name="rectangle">The rectangle which acts as the domain of the stair function.</param>
            <returns>Zero, -1 or +1 whether the coordinate is below, resp. inside, resp. above the boundary of the rectangle.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateBezierCurve(System.Windows.Point[],System.Int32,System.Int32)">
            <summary>
            Computes an approximation of a Bezier segment by a polyline (list of points).
            </summary>
            <param name="bezierPoints">The points defining the Bezier curve.</param>
            <param name="index">The index at which the four Bezier start.</param>
            <param name="quality">The quality of the approximation.</param>
            <returns>The approximation as a list points (polyline).</returns>        
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreLinesIntersecting(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Returns whether the line (line segments) intersect and returns in the crossingPoint the actual crossing
            point if they do.
            </summary>
            <param name="a">The first point of the first line.</param>
            <param name="b">The second point of the first line.</param>
            <param name="c">The first point of the second line.</param>
            <param name="d">The second point of the second line.</param>
            <param name="crossingPoint">The crossing point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.BarycentricPercentageFromPoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns the barycentric coordinates as percentages with respect to the given rectangle.
            </summary>
            <param name="realPoint">The real point.</param>
            <param name="rectangle">The rectangle which acts as a barycentric coordinate system.</param>
            <returns>The percentages wrapped in a Point.</returns>
            <see cref="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">The complementary method.</see>        
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the specified points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceSquared(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the squared distance between the given points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindLinesIntersection(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Finds the intersection point of the lines defined by the point pairs.
            </summary>
            <returns>
            The intersection point. If acceptNaN is <c>true</c> a <c>double.NaN</c> is returned if they don't intersect.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Inflate(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Inflates the given rectangle with the specified amount.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.InvertPoint(System.Windows.Point)">
            <summary>
            Inverts the point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorHorizontally(Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Returns the mirrored vector with respect to the X-coordinate.
            </summary>
            <param name="v">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorVertically(Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Returns the mirrored vector with respect to the Y-coordinate.
            </summary>
            <param name="v">The vector to mirror.</param>
            <returns>The mirrored vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Size)">
            <summary>
            Given a percentage and a rectangle this will return the coordinates corresponding to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="size">The size from which the point will be extracted.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns> 
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PointFromBarycentricPercentage(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Given a percentage and a rectangle this will return the coordinates corresponding
            to the percentages given.
            </summary>
            <param name="percentage">A couple of values in percentage, e.g. a value of (50,50) will return the center of the rectangle.</param>
            <param name="rectangle">The rectangle which acts as the barycentric system.</param>
            <returns>The point corresponding to the barycentric coordinates.</returns>         
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.CopyTo``1(``0[],System.Collections.Generic.IList{``0})">
            <summary>
            Copies the content of the given array into the specified list.
            </summary>
            <typeparam name="T">The type type.</typeparam>
            <param name="sourceArray">The source array.</param>
            <param name="distinationList">The distination list.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToDegrees(System.Double)">
            <summary>
            Converts the specified value from radians to degrees.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToRadians(System.Double)">
            <summary>
            Converts the specified value from degrees to radians.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToRect(System.Windows.Size)">
            <summary>
            Return a rectangle located a (0.0) with the specified size.
            </summary>
            <param name="size">The s.</param>
            <returns>A rectangle located at the (0.0).</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Add(System.Windows.Media.PathFigure,System.Windows.Media.PathSegment,System.Windows.Point)">
            <summary>
            Adds the given <see cref="T:System.Windows.Media.PathSegment"/> to the path figure and sets the starting point at the same time.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="segment">The segment.</param>
            <param name="startPoint">The start point.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Add(System.Windows.Media.PathFigure,System.Windows.Media.PathSegment)">
            <summary>
            Adds the given <see cref="T:System.Windows.Media.PathSegment"/> to the path figure.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="segment">The segment.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Add(System.Windows.Point,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Adds the specified point and vector together.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Vector">The Vector struct and its operations.</seealso>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>The augmented point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds the specified points together.
            </summary>
            <param name="point">A point.</param>
            <param name="p2">The p2.</param>
            <returns>
            The augmented point.
            </returns>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.Vector">The Vector struct and its operations.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Snap(System.Windows.Point,System.Int32)">
            <summary>
            Snaps a point by changing the X and Y coordinates to divide by the snapping value.
            </summary>
            <param name="point">The point.</param>
            <param name="snappingValue">The snapping value.</param>
            <returns>Returns the snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Snap(System.Double,System.Int32)">
            <summary>
            Snaps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="snappingValue">The snapping value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Add(System.Windows.Media.PathGeometry,System.Windows.Media.PathFigure)">
            <summary>
            Adds the given figure to the geometry.
            </summary>
            <param name="pathGeometry">The path geometry.</param>
            <param name="pathFigure">The path figure.</param>
            <returns>The resulting path geometry.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddArc(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an arc to the path figure.
            </summary>
            <param name="path">The figure.</param>
            <param name="x">The x-coordinate of the bounding rectangle.</param>
            <param name="y">The y-coordinate of the bounding rectangle.</param>
            <param name="w">The width of the bounding rectangle.</param>
            <param name="h">The height of the bounding rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweep">The sweeping angle of the arc.</param>
            <param name="startPoint">If set to <c>true</c> the starting point will be set.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddArc(System.Windows.Media.PathFigure,System.Windows.Rect,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds the arc.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="rectangle">The bounding rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweep">The sweeping angle of the arc.</param>
            <param name="setStartingPoint">If set to <c>true</c> the starting point will be set.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddBezier(System.Windows.Media.PathFigure,System.Double[])">
            <summary>
            Adds a bezier segment to the path.
            </summary>
            <param name="path">The path.</param>
            <param name="points">The eight values specifying the eight coordinates of the four Bezier points.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddBeziers(System.Windows.Media.PathFigure,System.Windows.Point[])">
            <summary>
            Adds a bezier segment to the path.
            </summary>
            <param name="figure">The figure.</param>
            <param name="points">The points defining the Bezier segment.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddLine(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a line to the path.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddLine(System.Windows.Media.PathFigure,System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds a line to the path.
            </summary>
            <param name="pathFigure">The path figure.</param>
            <param name="p1">The start point of the line.</param>
            <param name="p2">The end point of the line.</param>
            <returns>The augmented path figure.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddPolyLine(System.Windows.Media.PathFigure,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Adds a polyline to the figure.
            </summary>
            <param name="figure">The figure.</param>
            <param name="points">The points defining the polyline.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddPolyLine(System.Windows.Media.PathFigure,System.Windows.Media.PointCollection)">
            <summary>
            Adds a polyline to the figure.
            </summary>
            <param name="figure">The figure.</param>
            <param name="collection">The points defining the polyline.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddRoundRect(System.Windows.Media.PathFigure,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a rounded rectangle to the path figure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AddRoundRect(System.Windows.Media.PathFigure,System.Windows.Rect,System.Double,System.Boolean)">
            <summary>
            Adds a rounded rectangle to the path figure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateArc(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Approximates the arc.
            </summary>
            <param name="topLeft">The topLeft.</param>
            <param name="bottomRight">The bottomRight.</param>
            <param name="startAngle">The angle in degrees at which the arc starts.</param>
            <param name="endAngle">The angle in degrees at which the arc ends.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius of the rounding.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateRoundedRectangle(System.Windows.Rect,System.Double)">
            <summary>
            Approximates the rounded rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreIntersecting(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Checks if the specified rectangle and circle intersect.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ApproximateBezierCurve(System.Windows.Point[],System.Int32)">
            <summary>
            Approximates the bezier curve.
            </summary>
            <param name="bezierPoints">The bezier points.</param>
            <param name="quality">The quality.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ArcPoint(System.Windows.Rect,System.Double)">
            <summary>
            Returns the point at an angle on the ellipse with axes specified by the given rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.BetweenOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tells you whether the given value sits in the specified interval.
            </summary>
            <param name="value">The value.</param>
            <param name="lower">The lower.</param>
            <param name="upper">The upper.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistancePoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates the point of the specified line segment which determines the distance from the specified point to the line segment.
            That is, the perpendicular projection onto the segment.
            </summary>
            <param name="p">The point outside the segment.</param>
            <param name="a">The first point defining the segment.</param>
            <param name="b">The second point defining the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)">
            <summary>
            Converts the Cartesian coordinates to polar coordinates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsCounterClockWise(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines, given three points, if when travelling from the first to
            the second to the third, we travel in a counterclockwise direction.
            </summary>
            <remarks>
            1 if the movement is in a counterclockwise direction, -1 if not.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Clone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones the specified list.
            </summary>
            <param name="list">The list to clone.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Clone(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Clones the specified list.
            </summary>
            <param name="doubles">The list to clone.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Double,System.Double,System.Double)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Given an interval and a value this will output the value which is closer to the given value.
            </summary>
            <param name="value">The value.</param>
            <param name="choice1">The first choice.</param>
            <param name="choice2">The second choice.</param>
            <param name="nearestValue">The nearest value.</param>
            <param name="otherValue">The other value.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Closer(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point of the interval which sits the closest to the given point.
            </summary>
            <param name="point">The point seeking the closes neighbor.</param>
            <param name="p1">The first point in the interval.</param>
            <param name="p2">The second point in the interval.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Constrain(System.Double,System.Double,System.Double)">
            <summary>
            Constrains the specified value to the given interval.
            </summary>
            <param name="value">The value to constrain.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ConvertPolylineToBezier(System.Collections.ObjectModel.Collection{System.Windows.Point})">
            <summary>
            The opposite of the approximation method, this attempts to smoothen out the polyline to a Bezier curve.
            </summary>
            <param name="points">The polyline.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToBezierCurve(System.Windows.Point,System.Collections.IList)">
            <summary>
            Returns the shortest distance to the Bezier curve.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToPolyline(System.Windows.Point,System.Collections.IList)">
            <summary>
            Returns the shortest distance to the polyline.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToPolyline(System.Windows.Point,System.Collections.IList,System.Int32@)">
            <summary>
            Returns the shortest distance to the polyline.
            </summary>
            <param name="point">The point.</param>
            <param name="polyline">The polyline.</param>
            <param name="closestSegmentToPoint">The closest segment to point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToLineSegment(System.Windows.Point,System.Collections.IList,System.Double)">
            <summary>
            Distances to line segment.
            </summary>
            <param name="point">The point.</param>
            <param name="polyline">The polyline.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Distance(System.Windows.Point)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
            <param name="p">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Distance(System.Double,System.Double)">
            <summary>
            Returns the distance of the point to the origin.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToLineSquared(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Distances to line squared.
            </summary>
            <param name="p">The p.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToSegmentSquared(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance of a point to a segment. If the projection
            of the point on the segment is outside the segment the distance is
            the distance to the closest point of the segment. This in effect defines
            some kind of elliptic neighborhood around the segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance from the given point to the line (segment).
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds the parent of the given object which has a specific type.
            </summary>
            <typeparam name="T">The type of parent.</typeparam>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Push(System.Windows.Point,Telerik.Windows.Diagrams.Core.Vector,System.Double)">
            <summary>
            Pushes the specified start point onwards in the direction specified by the vector and a length given.
            </summary>
            <param name="start">The start.</param>
            <param name="unitVector">The unit vector.</param>
            <param name="distance">The distance to push.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.FromLtrd(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new rectangle from the lefttop and rightbottom coordinates.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MiddlePoint(System.Windows.Rect)">
            <summary>
            Returns the center point of the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPoint(System.Windows.Rect,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculate the intersection point between an ellipse and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPointOnEllipse(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculate the intersection point between a polyline and a line segment.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetProjections(System.Windows.Point,System.Windows.Rect,System.Windows.Point[])">
            <summary>
            Gets the projected points of the specified point on the given rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectionPointOnRectangle(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Calculates the intersection point between the specified
            rectangle and the line segment defined by the specified
            points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Intersect(System.Windows.Point[])">
            <summary>
            Determines whether the specified line segments intersect.
            </summary>
            <returns>
            True if the segments intersect, false if not.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsInRightOpenInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is in right open interval] [the specified v].
            </summary>
            <param name="v">The v.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>
              <c>True</c> f [is in right open interval] [the specified v]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsInClosedInterval(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is in closed interval] [the specified v].
            </summary>
            <param name="v">The v.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>
              <c>True</c> if [is in closed interval] [the specified v]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectsLineSegment(System.Windows.Rect,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Intersectses the line segment.
            </summary>
            <param name="rect">The rect.</param>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IntersectsLine(System.Windows.Rect,System.Collections.IList)">
            <summary>
            Intersects the polyline segment.
            </summary>
            <param name="rect"></param>
            <param name="polyline"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Invert(System.Windows.Media.Matrix)">
            <summary>
            Inverts the matrix.
            </summary>
            <param name="m">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Limit(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Moves the given point into the rectangle by taking the rectangle's intervals as limiting values for
            the point's coordinates.
            </summary>
            <param name="p">Any point.</param>
            <param name="rectangle">A rectangle which acts as limiting container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.LoadImage(System.IO.Stream)">
            <summary>
            Loads an image from the specified stream.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Multiplies the given matrices.
            </summary>
            <param name="m1">A matrix.</param>
            <param name="m2">Another matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NearestPoint(System.Windows.Point,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Nearests the point.
            </summary>
            <param name="point">The point.</param>
            <param name="points">The points.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NewRect(System.Windows.Point,System.Double)">
            <summary>
            Creates a new rectangle based on the middle point rather than the LT origin.
            </summary>
            <param name="center">The center of the rectangle.</param>
            <param name="size">The size of the new rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.NewRect(System.Windows.Point,System.Windows.Size)">
            <summary>
            News the rect.
            </summary>
            <param name="center">The center.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBezierPoint(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Int32,System.Double)">
            <summary>
            Gets the Bezier point at the specified value.
            </summary>
            <param name="points">The points.</param>
            <param name="segment">The segment.</param>
            <param name="value">A value in the interval [0,1].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Windows.Rect,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Offsets the specified rect.
            </summary>
            <param name="rect">The rect.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Windows.Point[],Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Offsets the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Offset(System.Collections.ObjectModel.Collection{System.Windows.Point},Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Offsets the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="offsetVector">The offset vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.OffsetPointCollection(System.Collections.ObjectModel.Collection{System.Windows.Point},System.Collections.ObjectModel.Collection{System.Windows.Point},Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Offsets the point collection.
            </summary>
            <param name="points">The points.</param>
            <param name="originalPoints">The original points.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Perpendicular(Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Returns the perpendicular of the specified vector.
            </summary>
            <param name="v">A vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInEllipse(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Returns whether the specified point is inside the ellipse defined by the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInRectangle(System.Windows.Point,System.Windows.Size)">
            <summary>
            Determines whether [is point in rectangle] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.IsPointInRectangle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Determines whether [is point in rectangle] [the specified pt].
            </summary>
            <param name="pt">The pt.</param>
            <param name="rc">The rc.</param>
            <returns>
              <c>true</c> if [is point in rectangle] [the specified pt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.PolarToCartesian(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Polars to cartesian coordinates conversion.
            </summary>
            <param name="coordCenter">The coordinate center.</param>
            <param name="angle">The angle.</param>
            <param name="rho">The polar radius.</param>
            <returns></returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Utils.CartesianToPolar(System.Windows.Point,System.Windows.Point,System.Double@,System.Double@)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ProjectPointOnLine(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Finds the projection (point) of the given point on the line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreIntersecting(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines if rectangle intersects with rect.
            </summary>
            <param name="rectangle"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RotatePoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Rotates the point.
            </summary>
            <param name="point">The point.</param>
            <param name="pivot">The pivot.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RotatePointsAt(System.Windows.Point[],System.Windows.Point,System.Double)">
            <summary>
            Rotates the points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RotateTransform(System.Windows.Point,System.Double)">
            <summary>
            Rotates the transform.
            </summary>
            <param name="center">The center.</param>
            <param name="angle">The angle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToRectanglePoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distances to rectangle point.
            </summary>
            <param name="pt">The pt.</param>
            <param name="rectangle">The rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistToRectSelect(System.Double,System.Double,System.Double)">
            <summary>
            Dists to rect select.
            </summary>
            <param name="pointX">The point X.</param>
            <param name="rectX1">The rect x1.</param>
            <param name="rectX2">The rect x2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.DistanceToRectangle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Distances to rectangle.
            </summary>
            <param name="pt">The pt.</param>
            <param name="rc">The rc.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.SameSide(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Determine whether p1 and p2 are on the same side of a line.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.SegmentIntersect(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point@)">
            <summary>
            Checks whether the segments defined by the specified
            point pairs intersect and returns the intersection point.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Square(System.Double)">
            <summary>
            Squares the specified value.
            </summary>
            <param name="d">Any value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Substract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Substracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Contains(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Determines whether [contains] [the specified rectangle].
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="p">The p.</param>
            <returns>
              <c>true</c> if [contains] [the specified rectangle]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Subtracts the specified p1.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the opposite of point p with respect to specified line.
            </summary>
            <param name="p"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.MirrorPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Mirrors the point with respect to the given center.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToMatrix(System.Windows.Media.Transform)">
            <summary>
            Toes the matrix.
            </summary>
            <param name="transform">The transform.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Transform(System.Windows.Media.GeneralTransform,System.Windows.Rect)">
            <summary>
            Transforms the specified tr.
            </summary>
            <param name="tr">The tr.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Transform(System.Windows.Media.Matrix,System.Windows.Rect)">
            <summary>
            Transforms the specified m.
            </summary>
            <param name="m">The m.</param>
            <param name="r">The r.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.TransformPercentToSize(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Transforms the size of the percent to.
            </summary>
            <param name="rect">The rect.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Union(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Unions the specified a.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Shrink(System.Windows.Rect,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Shrinks the specified outer bounds.
            </summary>
            <param name="outerBounds">The outer bounds.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.UnitVector(System.Double)">
            <summary>
            Returns a unit vector in the direction specified by the angle.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>A unit vector.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Windows.Point)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Windows.Size)">
            <summary>
            Converts the point to a string representation.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Double)">
            <summary>
            Converts the double to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToInvariant(System.Int32)">
            <summary>
            Converts the int to a string representation.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToPoint(System.String)">
            <summary>
            Attempts to convert the given string to a Point.
            </summary>
            <param name="s">The string representation of the point.</param>
            <returns>The Point corresponding to the serialized form.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToSize(System.String)">
            <summary>
            Sizes from string.
            </summary>
            <param name="s">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ToEnum``1(System.Object)">
            <summary>
            Toes the enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetEnumValues``1">
            <summary>
            Gets the enum values.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetPythagorEqualSide(System.Double)">
            <summary>
            Gets the equal sides of a triange from the Pythagor theorem.
            </summary>
            <param name="hypotenuse">The hypotenuse.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetPythagorHypotenuse(System.Double,System.Double)">
            <summary>
            Gets the hypotenuse according to the Pythagor theorem.
            </summary>
            <param name="sideA">The first side.</param>
            <param name="sideB">The second side.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetChildElements(System.Xml.Linq.XElement)">
            <summary>
            Gets the only the child elements.
            </summary>
            <param name="element">The parent element.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.RectanglePointFromPercent(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Calculates the point corresponding to the specified
            percent values relative to the specified rectangle.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.ReplaceZero(System.Double,System.Double)">
            <summary>
            Replaces the zero.
            </summary>
            <param name="suspect">The suspect.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Contains(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether the given rectangle is contained within the current one.
            </summary>
            <param name="r1">The first rectangle.</param>
            <param name="r2">The queried rectangle which potentially intersects.</param>
            <returns>
            	<c>true</c> if the rectangle is contained in the current one; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.Clone(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Clones the specified list.
            </summary>
            <param name="list">The list to clone.</param>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.AreDistanceOrdered(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns whether the given point series are ordered correctly with respect to the their relative distance.
            </summary>
            <param name="p">The first point.</param>
            <param name="p1">The second point.</param>
            <param name="p2">The third point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Utils.GetBezierCoefficients(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the bezier coefficients in the equation  of the specified bezier curve.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Vector">
            <summary>
            A vector structure implementation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Vector"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.Vector"/> struct.
            </summary>
            <param name="p">The <see cref="T:System.Windows.Point"/> from which the coordinates will be used.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_Equality(Telerik.Windows.Diagrams.Core.Vector,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_Inequality(Telerik.Windows.Diagrams.Core.Vector,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_UnaryNegation(Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Implements the substraction operator.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Negate(Telerik.Windows.Diagrams.Core.Vector,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Subtracts the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_Addition(System.Windows.Point,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Implements the addition operator.
            </summary>
            <param name="p">The point which will be augmented with the given vector.</param>
            <param name="v">The vector which will augment the point.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Add(System.Windows.Point,Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Adds the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_Multiply(Telerik.Windows.Diagrams.Core.Vector,System.Double)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="v">The vector which will be multiplied.</param>
            <param name="d">The scaling factor.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Multiply(Telerik.Windows.Diagrams.Core.Vector,System.Double)">
            <summary>
            Multiplies the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.op_Division(Telerik.Windows.Diagrams.Core.Vector,System.Double)">
            <summary>
            Implements the division operation.
            </summary>
            <param name="v">The vector which will be scaled.</param>
            <param name="d">The division/scaling factor.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Divide(Telerik.Windows.Diagrams.Core.Vector,System.Double)">
            <summary>
            Divides the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scalar">The scalar.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
            <remarks>Use the <see cref="M:Telerik.Windows.Diagrams.Core.Vector.ToUnit"/> method if you need the result as a returned vector.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.ToUnit">
            <summary>
            Returns the normalized vector, i.e. the unit vector with the same direction as this vector.
            </summary>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.Vector.Normalize">To normalize this vector without returning it.</seealso>
            <returns>Return the <see cref="P:Telerik.Windows.Diagrams.Core.Vector.Empty"/> vector if the length of this vector is zero and the normalized vector if not.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>True</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Vector.Empty">
            <summary>
            Gets the empty vector.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Vector.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value>The x-coordinate.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Vector.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value>The y-coordinate.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.Vector.Length">
            <summary>
            Gets the length of this vector.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ICloneable`1">
            <summary>
            
            </summary>
            <typeparam name="T">The cloned type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ICloneable`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IClonable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IClonable.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphSource">
            <summary>
            Describes the elements of an MVVM graph source.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource.Links">
            <summary>
            Gets the links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphSource`1">
            <summary>
            Describes the elements of a generic MVVM graph source.
            </summary>
            <typeparam name="T">The type of graph source.</typeparam>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource`1.Links">
            <summary>
            Gets the links.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphSource`1.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILink">
            <summary>
            Represents a link between two shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILink`1">
            <summary>
            Represents a link between two shapes.
            </summary>
            <typeparam name="T">The type of link.</typeparam>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink`1.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILink`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IPropertyChanged">
            <summary>
            Represents an item that supports property changed notifications.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISelectionService`1">
            <summary>
            
            </summary>
            <typeparam name="T">The type of Selection service.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectItem(`0,System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToExistingSelection">If set to <c>true</c> [add to existing selection].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.DeselectItem(`0)">
            <summary>
            Deselects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Selects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.DeselectItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deselects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISelectionService`1.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISelectionService`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportRotation">
            <summary>
            Represents an item that supports rotation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportRotation.ActualBounds">
            <summary>
            Gets the actual bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportRotation.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportMouseOver">
            <summary>
            Interface for mouse over support.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ISupportMouseOver.IsMouseOver">
            <summary>
            Gets or sets a value indicating whether this instance is mouse over.
            </summary>
            <value>
            	<c>True</c> if this instance is mouse over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IUndoRedoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.CanRedo">
            <summary>
            Determines whether this instance can redo.
            </summary>
            <returns>
              <c>true</c> if this instance can redo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.CanUndo">
            <summary>
            Determines whether this instance can undo.
            </summary>
            <returns>
              <c>true</c> if this instance can undo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.ExecuteCommand(Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IUndoRedoService.Clear">
            <summary>
            Clears the undo and redo stacks.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IUndoRedoService.ActionExecuted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.RedoBufferSize">
            <summary>
            Gets or sets the size of the redo buffer.
            </summary>
            <value>
            The size of the redo buffer.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IUndoRedoService.UndoBufferSize">
            <summary>
            Gets or sets the size of the undo buffer.
            </summary>
            <value>
            The size of the undo buffer.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILayoutService">
            <summary>
            Describes the layout service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ILayoutService.Layout(Telerik.Windows.Diagrams.Core.SugiyamaSettings)">
            <summary>
            Organizes the diagram using the Sugiyama layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutBase`2">
            <summary>
            The base class for all layout algorithms.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutBase`2.currentHorizontalOffset">
            <summary>
            The current horizontal offset.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.LayoutBase`2.currentVerticalOffset">
            <summary>
            The current vertical offset.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LayoutBase`2"/> class. 
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.Layout(Telerik.Windows.Diagrams.Core.IGraph,System.Object)">
            <summary>
            Starts a layout pass.
            </summary>
            <param name="diagramControl">
            The diagram control which needs to be laid out.
            </param>
            <param name="settings">The paramtrization of the layout.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.EndLayout(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean)">
            <summary>
            Post-processing after the layout algorithm completed.
            </summary>
            <param name="diagramControl">
            The diagram Control.
            </param>
            <param name="commit">
            The commit.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.BeginLayout(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Sets the stage for the layout.
            </summary>
            <param name="diagramControl">
            The <see cref="T:Telerik.Windows.Diagrams.Core.IGraph"/> on which the layout operates.
            </param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.EndLayout(Telerik.Windows.Diagrams.Core.IGraph,System.Boolean)">The complementary EndLayout method</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.MoveToCurrentOffset(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}},System.Windows.Point,System.Boolean)">
            <summary>
            Moves the diagram to the computed offset.
            </summary>
            <param name="layoutGraph">
            The graph which has been laid out.
            </param>
            <param name="extra">
            An extra offset.
            </param>
            <param name="moveLinks">
            If set to <c>true</c> the links will be moved as well.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.MoveToOffset(Telerik.Windows.Diagrams.Core.GraphBase{Telerik.Windows.Diagrams.Core.Node{`0,`1},Telerik.Windows.Diagrams.Core.Edge{`0,`1}},System.Windows.Size,System.Boolean)">
            <summary>
            Moves the component to the given offset.
            </summary>
            <param name="layoutGraph">The layout graph.</param>
            <param name="offset">The offset.</param>
            <param name="moveLinks">If set to <c>true</c> [move links].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutBase`2.GridLayoutComponents(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.Graph{`0,`1}},System.Double,System.Windows.Size,System.Windows.Size)">
            <summary>
            Organizes the components in a grid.
            </summary>
            <param name="components">The components.</param>
            <param name="maxWidth">The width of the grid.</param>
            <param name="margin">The margin or offset from the top and left of the surface for the collection of components.</param>
            <param name="componentsMargin">The individual components margin.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LayoutBase`2.Margin">
            <summary>
            Gets or sets the margin of the layout.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LayoutService">
            <summary>
            Diagram service managing the layout process.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GraphServiceBase">
            <summary>
            Represents a service for manipulation of manipulation points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GraphServiceBase.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GraphServiceBase"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GraphServiceBase.Graph">
            <summary>
            Gets the graph.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LayoutService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LayoutService.Layout(Telerik.Windows.Diagrams.Core.SugiyamaSettings)">
            <summary>
            Runs a Sugiyama layout pass on the diagram.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaData">
            <summary>
            Keeps the runtime layout data.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SugiyamaData.instanceCounter">
            <summary>
            The instance counter.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaData"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FuturePosition">
            <summary>
            Gets or sets the relative position with respect to the next layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FutureCount">
            <summary>
            Gets or sets how many links are bound to this node from the next layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this instance is virtual.
            </summary>
            <value>
            <c>True</c> if this instance is virtual; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.Position">
            <summary>
            Gets or sets the position of the node on the layer.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.LayerId">
            <summary>
            Gets or sets the layer id.
            </summary>
            <value>
            The layer id.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryPosition">
            <summary>
            Gets or sets the relative position with respect to the previous layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryCount">
            <summary>
            Gets or sets how many links are bound to this node from the previous layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaData.Uid">
            <summary>
            Gets or sets the uid.
            </summary>
            <value>
            The uid.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaLayout">
            <summary>
            The Sugiyama or layered layout implementation. 
            <para></para>
            <para>This algorithm has the following features;</para>
            <list type="bullet">
            <item>
            <description>nodes are placed on layers</description></item>
            <item>
            <description>crossings minimization: edge crossings are
            minimized</description></item>
            <item>
            <description>minimum separation: on each layer, neighboring nodes are separated
            by at least a certain distance</description></item>
            <item>
            <description>balance: parents are placed at the barycenter of their
            children</description></item>
            <item>
            <description>proximity: neighboring nodes in the immediately upper layer are
            placed nearby</description></item></list>
            <para></para>
            <para>For additional material on this algorithm, see:</para>
            <list type="bullet">
            <item>
            <description><b>Wikipedia;
            </b>http://en.wikipedia.org/wiki/Layered_graph_drawing</description></item>
            <item>
            <description>&quot;<b>Graph drawing and applications</b>&quot; <i>by Kozo
            Sugiyama</i>, ISBN 981-02-4879-2. Page 29 to 35 gives a description of the
            algorithm.</description></item></list>
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaLayout.Layout(Telerik.Windows.Diagrams.Core.IGraph,System.Object)">
            <summary>
            Starts a layout pass.
            </summary>
            <param name="diagramControl">The diagram control which needs to be laid out.</param>
            <param name="settings">The paramtrization of the layout.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor">
            <summary>
            Sugiyama layout of a single connected graph.
            <para>The process consists of the following steps:</para>
            <list type="bullet">
            <item>
            <description>layering: the longest path in the component determines the number
            of layers</description></item>
            <item>
            <description>normalization:</description></item>
            <item>
            <description>nodes ordering:</description></item>
            <item>
            <description>positioning: the actual positions (or bounding rectangles) are
            set.</description></item></list>
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.Layout(Telerik.Windows.Diagrams.Core.Graph{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},Telerik.Windows.Diagrams.Core.SugiyamaSettings)">
            <summary>
            Performs a layout pass on a connected component.
            </summary>
            <param name="graph">The graph to rearrange.</param>
            <param name="layoutSettings">The layout settings.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.GetMedianPosition(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object})">
            <summary>
            Returns the position of the node as an average of the future and past positions.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveNodeToTheRight(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object}})">
            <summary>
            Moves the node to the right and returns <c>true</c> if this was possible.
            </summary>
            <param name="node">The node.</param>
            <param name="layer">The layer.</param>
            <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveLeft(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object},System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object}})">
            <summary>
            Moves the node to the left and returns <c>true</c> if this was possible.
            </summary>
            <param name="node">The node.</param>
            <param name="layer">The layer.</param>
            <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.MoveThingsAround">
            <summary>
            Places the nodes in function of the calculated ordinal on the layer and the settings of the layout.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.GetColumns(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            Gets sizes of the columns.
            </summary>
            <param name="gridWidths"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.LayoutLayer(System.Int32,System.Boolean)">
            <summary>
            Layout of a single layer.
            </summary>
            <param name="layerIndex">The layer to organize.</param>
            <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.SwapPairs(System.Int32,System.Int32)">
            <summary>
            Swaps a pair of nodes in a layer.
            </summary>
            <param name="layerIndex">Index of the layer.</param>
            <param name="n">The n-th node in the layer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.HandlePathologies">
            <summary>
            Swaps pairs in a layer to see if it reduces the crossings. This remediates the situations when nodes with identical incidence (local graph structure) 
            are not positioned well by the previous crossing reduction step. The crossing reduction can indeed lead to equal position values (and hence next to another after
            the sorting) but crossings. Hence the swapping of neighbors and this extra step to reduce the crossings, if any.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.AddChildren(Telerik.Windows.Diagrams.Core.Node{Telerik.Windows.Diagrams.Core.SugiyamaData,System.Object})">
            <summary>
            Recursively adds the children across layers.
            </summary>
            <param name="node">
            A node whose children might have to be added (initiall the nodes from the longest path are used).
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.CountLinksCrossingBetweenTwoLayers(System.Int32,System.Int32)">
            <summary>
            Counts the number of links crossing between two layers.
            </summary>
            <param name="layerIndex1">The layer index.</param>
            <param name="layerIndex2">Another layer index.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.InsertDummies">
            <summary>
            Inserts dummy nodes to break long links.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.RemoveDummies">
            <summary>
            Removes the dummy nodes inserted earlier to break long links.
            </summary>
            <remarks>The virutal nodes are effectively turned into intermediate connection points.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings">
            <summary>
            Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.OptimizeCrossings(System.Int32,System.Boolean)">
            <summary>
            Optimizes the crossings.
            </summary>
            <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links
            to an a problem of ordering numbers.</remarks>
            <param name="layerIndex">The layer index.</param>
            <param name="movingDownwards">If set to <c>true</c> we move down in the layer stack.</param>
            <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.UpdateHistoryPositions(System.Int32)">
            <summary>
            Updates the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaData.HistoryPosition"/> of all the nodes in the layer
            by taking an average weight of the linked nodes' position.
            </summary>
            <param name="layerId">The layer id.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.UpdateFuturePositions(System.Int32)">
            <summary>
            Updates the <see cref="P:Telerik.Windows.Diagrams.Core.SugiyamaData.FuturePosition"/> of all the nodes in the layer
            by taking an average weight of the linked nodes' position.
            </summary>
            <param name="layerId">The layer id.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.CheckConnectedNodesOnSameLayer">
            <summary>
            Checks the connected nodes on same layer. If any, we move them to the next layer.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.NodeOrderComparer">
            <summary>
            Compares nodes on the basis of their average order.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor.HistoryPositionComparer">
            <summary>
            Compares nodes on the basis of their relative median position (i.e. the average between the future and history weights).
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings">
            <summary>
            Contains settings for the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaProcessor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SugiyamaSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SugiyamaSettings"/> class. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.Orientation">
            <summary>
            Gets or sets the orientation of the layout.
            </summary>
            <value>
            The orientation in which the layout process should organize the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.HorizontalDistance">
            <summary>
            Gets or sets the distance between nodes within a layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.IgnoreNodeSize">
            <summary>
            Gets a value indicating whether IgnoreNodeSize.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ShapeMargin">
            <summary>
            Gets or sets Margin.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ComponentMargin">
            <summary>
            Gets or sets the component margin.
            </summary>
            <value>
            The component margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.TotalMargin">
            <summary>
            Gets or sets the margin of the whole diagram.
            </summary>
            <value>
            The total margin.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.VerticalDistance">
            <summary>
            Gets or sets the distance between layers.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SugiyamaSettings.ComponentsGridWidth">
            <summary>
            Gets or sets the width of the components grid.
            </summary>
            <value>
            The width of the components grid.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionCollection">
            <summary>
            Collection with <see cref="T:Telerik.Windows.Diagrams.Core.IConnection"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionCollection.#ctor(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramItemCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramItemCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.DiagramItemCollection.CollectionChanged">
            <summary>
            Occurs when [collection changed].
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramMetadata">
            <summary>
            Utility class capturing the metadata of a diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DiagramMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DiagramMetadata"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Title">
            <summary>
            Gets or sets the title of the current diagram.
            </summary>
            <value>
            The title of the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Description">
            <summary>
            Gets or sets the description of the current diagram.
            </summary>
            <value>
            The description of the diagram.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramMetadata.Id">
            <summary>
            Gets or sets the identifier of the diagram.
            </summary>
            <remarks>By default this is a generated Guid.</remarks>
            <value>
            The id.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnection">
            <summary>
            Represents a connection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IDiagramItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDiagramItem.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator,Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes the specified service locator and parent graph.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="graph">The diagram control.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IDiagramItem.SetSelectedInGroup(System.Boolean)">
            <summary>
            Sets the whether this instance is selected in group.
            </summary>
            <param name="isSelectedInGroup">True if this instance is selected if group, otherwise false.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsEnabled">
            <summary>
            Gets or sets whether the diagram entity is enabled.
            </summary>
            <value>
            	<c>True</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsSelected">
            <summary>
            Gets or sets whether the diagram entity is selected.
            </summary>
            <value>
            	<c>True</c> if selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsSelectedInGroup">
            <summary>
            Gets a value indicating whether this instance is selected in group.
            </summary>
            <value>
            	<c>True</c> if this instance is selected in group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Visibility">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<c>True</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.ZIndex">
            <summary>
            Gets or sets the ZIndex of this instance.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Bounds">
            <summary>
            Gets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IDiagramItem.IsInEditMode">
            <summary>
            Gets or sets whether the instance in is edit mode.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.Attach(Telerik.Windows.Diagrams.Core.IShape,System.Nullable{Telerik.Windows.Diagrams.Core.ConnectorPosition},Telerik.Windows.Diagrams.Core.IShape,System.Nullable{Telerik.Windows.Diagrams.Core.ConnectorPosition})">
            <summary>
            Attaches the connection to specific source and target.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceConnectorPosition">The source connector position.</param>
            <param name="target">The target.</param>
            <param name="targetConnectorPosition">The target connector position.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.Update(System.Boolean)">
            <summary>
            Updates this instance.
            </summary>
            <param name="isManipulating">If set to <c>true</c> [is manipulating].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnection.UpdateDeferredGeometry(System.Windows.Point,System.Windows.Point,System.Windows.Point[])">
            <summary>
            Updates the deferred geometry.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="middlePoints">The middle points.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IConnection.ManipulationPointActivated">
            <summary>
            Occurs when a manipulation point is activated.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.StartPoint">
            <summary>
            Gets or sets the source point.
            </summary>
            <value>
            The source point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceConnectorPosition">
            <summary>
            Gets or sets the source connector position.
            </summary>
            <value>
            The source connector position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceConnectorPositionResolved">
            <summary>
            Gets the resolved source connector position.
            </summary>
            <remarks>The position is different than the one in the <see cref="P:Telerik.Windows.Diagrams.Core.IConnection.SourceConnectorPosition"/> if the value is set to <see cref="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.EndPoint">
            <summary>
            Gets or sets the target point.
            </summary>
            <value>
            The target point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetConnectorPosition">
            <summary>
            Gets or sets the target connector position.
            </summary>
            <value>
            The target connector position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetConnectorPositionResolved">
            <summary>
            Gets the resolved target connector position.
            </summary>
            <remarks>The position is different than the one in the <see cref="P:Telerik.Windows.Diagrams.Core.IConnection.TargetConnectorPosition"/> if the value is set to <see cref="F:Telerik.Windows.Diagrams.Core.ConnectorPosition.Auto"/>.</remarks>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceCapType">
            <summary>
            Gets or sets the type of the source cap.
            </summary>
            <value>
            The type of the source cap.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.SourceCapSize">
            <summary>
            Gets or sets the size of the source cap.
            </summary>
            <value>
            The size of the source cap.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetCapType">
            <summary>
            Gets or sets the type of the target cap.
            </summary>
            <value>
            The type of the target cap.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.TargetCapSize">
            <summary>
            Gets or sets the size of the target cap.
            </summary>
            <value>
            The size of the target cap.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionType">
            <summary>
            Gets or sets the type of the connection.
            </summary>
            <value>
            The type of the connection.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ConnectionPoints">
            <summary>
            Gets the connection points.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnection.ManipulationPoints">
            <summary>
            Gets the manipulation points.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IManipulationPoint">
            <summary>
            Represents a manipulation point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IManipulationPoint.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IManipulationPoint.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IManipulationPoint.IsMouseOver">
            <summary>
            Gets a value indicating whether this instance is mouse over.
            </summary>
            <value>
            	<c>True</c> if this instance is mouse over; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint.UpdateDisplayElement">
            <summary>
            Updates the displayed element.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint.IsManipulating">
            <summary>
            Gets or sets a value indicating whether this instance is manipulating.
            </summary>
            <value>
            	<c>True</c> if this instance is manipulating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IConnector">
            <summary>
            Represents a connector point of a shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.ConnectorPosition">
            <summary>
            Gets the connector position.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IConnector.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>True</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraph">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddConnection(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Adds the connection.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Adds a new connection to the diagram.
            </summary>
            <param name="connection">The connection to be added.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.AddShape(Telerik.Windows.Diagrams.Core.IShape,System.Nullable{System.Windows.Point},System.Boolean)">
            <summary>
            Adds a new shape to the diagram.
            </summary>
            <param name="shape">The shape to add.</param>
            <param name="position">The position.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.RemoveShape(Telerik.Windows.Diagrams.Core.IShape,System.Boolean)">
            <summary>
            Removes a shape from the diagram.
            </summary>
            <param name="shape">The shape to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.RemoveConnection(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Removes a connection from the diagram.
            </summary>
            <param name="connection">The connection to be removed.</param>
            <param name="isUndoable">If set to <c>true</c> [is undoable].</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.GetConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.GetIncomingConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the incoming connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.GetOutgoingConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the outgoing connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.BeginBatchTransformation">
            <summary>
            Begins a batch transformation and signals the undoredo stack that a
            batch of transformation should be considered as one, i.e. a composite change.
            </summary>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.IGraph.CommitBatchTransformation"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraph.CommitBatchTransformation">
            <summary>
            Commits the batch transformation and ends the composite undoredo change.
            </summary>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.IGraph.BeginBatchTransformation"/>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Shapes">
            <summary>
            Gets the shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Connections">
            <summary>
            Gets the connections.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Metadata">
            <summary>
            Gets the metadata of the diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>
            The cursor.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IgnoreLinkDirection">
            <summary>
            Gets or sets a value indicating whether the underlying graph structure is a directional graph.
            </summary>
            <value>
            <c>True</c> if link directions are ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsMouseCaptured">
            <summary>
            Gets or sets a value indicating whether this instance is mouse captured.
            </summary>
            <value>
            <c>True</c> if this instance is mouse captured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsRotationEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is rotation enabled.
            </summary>
            <value>
            	<c>True</c> if this instance is rotation enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsResizingEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is resizing enabled.
            </summary>
            <value>
            	<c>True</c> if this instance is resizing enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsManipulationAdornerVisible">
            <summary>
            Gets or sets a value indicating whether the manipulation adorner is visible.
            </summary>
            <value>
              <c>True</c> if the manipulation adorner is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.PositionX">
            <summary>
            Gets or sets X coordinate of the viewport.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.PositionY">
            <summary>
            Gets or sets Y coordinate of the viewport.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Viewport">
            <summary>
            Gets the rect of the viewport.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Zoom">
            <summary>
            Gets or sets the zoom level.
            </summary>
            <value>
            The zoom.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
            <value>
            The selection mode.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsBackgroundSurfaceVisible">
            <summary>
            Gets or sets a value indicating whether the grid is visible.
            </summary>
            <value>
            	<c>True</c> if the grid is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsSnapEnabled">
            <summary>
            Gets or sets a value indicating whether snapping is enabled.
            </summary>
            <value>
            	<c>True</c> if snapping is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.SnapValue">
            <summary>
            Gets or sets the snap value.
            </summary>
            <value>
            The snap value.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsEditable">
            <summary>
            Gets or sets a value indicating whether editting is enabled.
            </summary>
            <value>
              <c>True</c> if editting is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsDraggingEnabled">
            <summary>
            Gets or sets a value indicating whether dragging is enabled.
            </summary>
            <value>
              <c>True</c> if dragging is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.RectSelectionMode">
            <summary>
            Gets or sets the rect selection mode.
            </summary>
            <value>
            The rect selection mode.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether panning is enabled.
            </summary>
            <value>
              <c>True</c> if panning is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether zooming is enabled.
            </summary>
            <value>
              <c>True</c> if zooming is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.IsConnectorsManipulationEnabled">
            <summary>
            Gets or sets a value indicating whether manipulation on the connectors is enabled.
            </summary>
            <value>
              <c>True</c> if manipulation on connectors is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.AllowDelete">
            <summary>
            Gets or sets a value indicating whether deleting is allowed.
            </summary>
            <value>
              <c>True</c> if deleting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.AllowCut">
            <summary>
            Gets or sets a value indicating whether cutting is allowed.
            </summary>
            <value>
              <c>True</c> if cutting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.AllowCopy">
            <summary>
            Gets or sets a value indicating whether copying is allowed.
            </summary>
            <value>
              <c>True</c> if copying is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraph.AllowPaste">
            <summary>
            Gets or sets a value indicating whether pasting is allowed.
            </summary>
            <value>
              <c>True</c> if pasting is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ILayer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILayer.Id">
            <summary>
            The id of the layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ILayer.IsVisible">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>True</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IShape">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IShape.ChangeConnectorsAdornerVisibility(System.Boolean)">
            <summary>
            Changes the visibility of the connectors adorner.
            </summary>
            <param name="isConnectorsAdornerVisible">Specifies if the connectors adorner should be visible.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IShape.ChangeActiveConnectionInside(System.Boolean)">
            <summary>
            Changes the active connection inside.
            </summary>
            <param name="isActiveConnectionInside">If set to <c>true</c> [is active connection inside].</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IShape.ConnectorActivated">
            <summary>
            Occurs when a connector point is activated.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.Width">
            <summary>
            Gets or sets the width of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.Height">
            <summary>
            Gets or sets the height of the shape.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.IncomingLinks">
            <summary>
            Gets the incoming links.
            </summary>
            <value>The incoming links.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.OutgoingLinks">
            <summary>
            Gets the outgoing links.
            </summary>
            <value>The outgoing links.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IShape.ConnectorPoints">
            <summary>
            Gets the connector points.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ShapeCollection">
            <summary>
            Collection with <see cref="T:Telerik.Windows.Diagrams.Core.IShape"/> instances.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ShapeCollection.#ctor(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ShapeCollection"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DijkstraRouter">
            <summary>
            A routing algorithm based on Dijkstra's path finding algorithm.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DijkstraRouter.NeumannDeltas">
            <summary>
            The neumann neighborhood which dictates the directions the route can take.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.DijkstraRouter.diagram">
            <summary>
            The diagram control holding the connections and shapes.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraph)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DijkstraRouter"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.ClockwiseMoveAroundEdgeOfShape(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.ConnectorPosition@)">
            <summary>
            Given a point on the edge of a shape, this returns the middle point of the edge adjacent to it in the clockwise direction.
            </summary>
            <param name="connection">The connection.</param>
            <param name="shape">The shape holding the point.</param>
            <param name="newPosition">The new position.</param>
            <returns></returns>
            <remarks>
            This method is called when the routing algorithm is unable to find a route from the given starting point and an alternative starting point
            at the edge of the shape is necessary.
            </remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.FindMostProbableTuple(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Given the connection, the most probable start and end points are returned together with some additional points
            if necessary.
            </summary>
            <param name="connection">The connection which is being routed.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.FindAlternateTuple(Telerik.Windows.Diagrams.Core.IConnection,System.Tuple{System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point})">
            <summary>
            Finds the alternate tuple of points defining the input for the routing. See the <see cref="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.ClockwiseMoveAroundEdgeOfShape(Telerik.Windows.Diagrams.Core.IConnection,Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.ConnectorPosition@)"/> method for more info.
            </summary>
            <param name="connection">The connection.</param>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.GetRoute(Telerik.Windows.Diagrams.Core.IConnection,System.Tuple{System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point}@)">
            <summary>
            Gets the route of the connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.ShortestPath(System.Windows.Point,System.Windows.Point)">
            <summary>
            This is the actual Dijkstra algorithm with a twist.
            </summary>
            <remarks>From the given point the four neighboring points on the grid are searched and for each neighbor the distance is measured to the endpoint.
            Obviously, the shorter the distance to the endpoint the better the choice. The additional restriction is that the path shouldn't cross a shape.
            If at some point the continuation is blocked in all four directions we give up and try an alternate route which doesn't have the restriction of shape-crossing anymore.
            If this algorithm retuns null then at the higher (calling) level an alternative start and endpoint will be tried. If after this we still don't have a route it means things are really
            pathologic or the diagram is very dense. The result is this case will be that the connection remains the same and no route (list of points) will be given.
            </remarks>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.PointIsInNeighborhoodOfShape(System.Windows.Point)">
            <summary>
            Returns whether the given point is in the neighborhood of a shape.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DijkstraRouter.PointIsInShape(System.Windows.Point)">
            <summary>
            Returns whether the given point resides in one of the shapes in the diagram.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GridRouter">
            <summary>
            Routing based on the A* algorithm.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RoutingBase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RoutingBase.Epsilon">
            <summary>
            The epsilon; a small value to compare floating numbers in the layout.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RoutingBase"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.FindMostProbableTuple(Telerik.Windows.Diagrams.Core.IConnection)">
            <summary>
            Given the connection, the most probable start and end points are returned together with some additional points
            if necessary.
            
            </summary>
            <param name="connection">The connection which is being routed.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.FindCrossings(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Finds the crossings.
            </summary>
            <param name="connection">The connection.</param>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetTuple(System.Windows.Point,System.Windows.Rect,System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets the tuple.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceRect">The source rect.</param>
            <param name="target">The target.</param>
            <param name="targetRect">The target rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetSector(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Gets the sector.
            </summary>
            <param name="p">The p.</param>
            <param name="bounds">The bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.ClockwiseMoveAroundEdgeOfShape(System.Windows.Point,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Given a point on the edge of a shape, this returns the middle point of the edge adjacent to it in the clockwise direction.
            </summary>
            <param name="p">The point on the edge of the shape.</param>
            <param name="shape">The shape holding the point.</param>
            <remarks>This method is called when the routing algorithm is unable to find a route from the given starting point and an alternative starting point 
            at the edge of the shape is necessary.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.GetNearestGridPoints(Telerik.Windows.Diagrams.Core.IConnection,System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Gets the nearest grid points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.PointIsInNeighborhoodOfShape(System.Windows.Point)">
            <summary>
            Returns whether the given point is in the neighborhood of a shape.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingBase.PointIsInShape(System.Windows.Point)">
            <summary>
            Returns whether the given point resides in one of the shapes in the diagram.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GridRouter"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,System.Func{System.Windows.Point,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GridRouter"/> class.
            </summary>
            <param name="diagram">The diagram.</param>
            <param name="locationDelegate">The location delegate.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.GetRoutePoints(Telerik.Windows.Diagrams.Core.IConnection,System.Boolean)">
            <summary>
            Gets the route points.
            </summary>
            <param name="connection">The connection.</param>
            <param name="showLastLine">If set to <c>true</c> [show last line].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GridRouter.Route(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns null, if no path is found. Start- and End-Node are included in returned path. The user context
            is passed to IsWalkable().
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GridRouter.IsValidLocationDelegate">
            <summary>
            
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IPriorityObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IPriorityObject.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.LatticeDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.LatticeDictionary.#ctor(System.Func{System.Windows.Point,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.LatticeDictionary"/> class.
            </summary>
            <param name="locationDelegate">The location delegate.</param>
            <param name="autoCreate">If set to <c>true</c> [auto create].</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.LatticeDictionary.Item(System.Windows.Point)">
            <summary>
            Gets or sets the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> with the specified p.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PathNode">
            <summary>
            Runtime data bucket for the A* algorithm.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.PathNode.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PathNode"/> class.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PathNode.Compare(Telerik.Windows.Diagrams.Core.PathNode,Telerik.Windows.Diagrams.Core.PathNode)">
            <summary>
            Compares the given nodes by comparing their estimated path length, i.e. the <see cref="P:Telerik.Windows.Diagrams.Core.PathNode.F"/> values.
            </summary>
            <param name="x">A node on the lattice.</param>
            <param name="y">Another node on the lattice.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.G">
            <summary>
            Gets the actual lattice distance from the start to the current point in the search.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.H">
            <summary>
            Gets the so-called heuristic distance which is usually the Euclidean distance to the endpoint or goal.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.F">
            <summary>
            Gets the current path length which is an estimate since the remains of the path  to the target is a estimated to be a straight line.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.IsOpen">
            <summary>
            Gets or sets whether this node is part of the open set of unestimated nodes in the search.
            </summary>
            <value>
              <c>true</c> if this instance is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.IsWall">
            <summary>
            Gets or sets whether this node is accessible as part of the path searching.
            </summary>
            <value>
              <c>true</c> if this instance is wall; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PathNode.Position">
            <summary>
            Gets or sets the position in the lattice.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PriorityQueue`1">
            <summary>
            Simplified priority queue, will be improved in Q2.
            </summary>
            <typeparam name="T">The type of priority queue.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PriorityQueue`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>True</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Push(`0)">
            <summary>
            Push an object onto the PQ.
            </summary>
            <param name="item">The new object.</param>
            <returns>The index in the list where the object is _now_. This will change when objects are taken from or put onto the PQ.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Pop">
            <summary>
            Get the smallest object and remove it.
            </summary>
            <returns>The smallest object.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Update(`0)">
            <summary>
            Notify the PQ that the object at position i has changed
            and the PQ needs to restore order.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Peek">
            <summary>
            Get the smallest object without removing it.
            </summary>
            <returns>The smallest object.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PriorityQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.Sector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.BottomLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.TopRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.Sector.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationConstants">
            <summary>
            Constants used in the (de)serialization.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Id">
            <summary>
            The Id constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Diagram">
            <summary>
            The diagram constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Label">
            <summary>
            The Label constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ZIndex">
            <summary>
            The ZIndex constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Position">
            <summary>
            The Position constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Visibility">
            <summary>
            The Visibility constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Metadata">
            <summary>
            The Metadata constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Shapes">
            <summary>
            The Shapes constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Size">
            <summary>
            The Size constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Zoom">
            <summary>
            The Zoom constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Version">
            <summary>
            The Version constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Title">
            <summary>
            The Title constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Description">
            <summary>
            The Description constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.PositionX">
            <summary>
            The PositionX constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.PositionY">
            <summary>
            The PositionY constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Connections">
            <summary>
            The Connections constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Items">
            <summary>
            The Items constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.QualifyingName">
            <summary>
            The QualifyingName constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.QualifyingNames">
            <summary>
            The QualifyingNames constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TypeName">
            <summary>
            The TypeName constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsRotationEnabled">
            <summary>
            The IsRotationEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsResizingEnabled">
            <summary>
            The IsResizingEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Source">
            <summary>
            The Source constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Target">
            <summary>
            The Target constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SelectionMode">
            <summary>
            The SelectionMode constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsSnapEnabled">
            <summary>
            The IsSnapEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsBackgroundSurfaceVisible">
            <summary>
            The IsBackgroundSurfaceVisible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SnapValue">
            <summary>
            The SnapValue constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StartPoint">
            <summary>
            The StartPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.EndPoint">
            <summary>
            The EndPoint constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StrokeThickness">
            <summary>
            The StrokeThickness constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.ConnectionType">
            <summary>
            The ConnectionType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetCapSize">
            <summary>
            The TargetCapSize constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetCapType">
            <summary>
            The TargetCapType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RotationAngle">
            <summary>
            The RotationAngle constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceConnectorPosition">
            <summary>
            The SourceConnectorPosition constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.TargetConnectorPosition">
            <summary>
            The TargetConnectorPosition constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceCapType">
            <summary>
            The SourceCapType constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SourceCapSize">
            <summary>
            The SourceCapSize constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Geometry">
            <summary>
            The Geometry constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Content">
            <summary>
            The Content constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Background">
            <summary>
            The Background constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Foreground">
            <summary>
            The foreground constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontSize">
            <summary>
            The font size constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontWeight">
            <summary>
            The font weight constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.FontFamily">
            <summary>
            The font family constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.BorderBrush">
            <summary>
            The BorderBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Stroke">
            <summary>
            The Stroke constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.StrokeDashArray">
            <summary>
            The StrokeDashArray constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Thickness">
            <summary>
            The Thickness constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Color">
            <summary>
            The Color constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Angle">
            <summary>
            The Angle constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Offset">
            <summary>
            The Offset constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GradientStops">
            <summary>
            The GradientStops constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.GradientStop">
            <summary>
            The GradientStop constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.SolidColorBrush">
            <summary>
            The SolidColorBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.LinearGradientBrush">
            <summary>
            The LinearGradientBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadialGradientBrush">
            <summary>
            The RadialGradientBrush constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Origin">
            <summary>
            The Origin constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadiusX">
            <summary>
            The RadiusX constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.RadiusY">
            <summary>
            The RadiusY constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsEditable">
            <summary>
            The IsEditable constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsDraggingEnabled">
            <summary>
            The IsDraggingEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsPanEnabled">
            <summary>
            The IsPanEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsZoomEnabled">
            <summary>
            The IsZoomEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsManipulationAdornerVisible">
            <summary>
            The IsManipulationAdornerVisible constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.IsConnectorsManipulationEnabled">
            <summary>
            The IsConnectorsManipulationEnabled constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowDelete">
            <summary>
            The AllowDelete constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowCut">
            <summary>
            The AllowCut constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowCopy">
            <summary>
            The AllowCopy constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.AllowPaste">
            <summary>
            The AllowPaste constant.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.SerializationConstants.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationInfo">
            <summary>
            A wrapper for the (de)serialization data.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="ownerType">Type of the owner.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="ownerType">Type of the owner.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> class.
            </summary>
            <param name="nodeName">Label of the node.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.Create(System.String,System.Boolean)">
            <summary>
            Creates the specified serialization info string.
            </summary>
            <param name="serializationInfoValue">The serialization info string.</param>
            <param name="isItemSerialization">If set to <c>true</c> [is item].</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetXml">
            <summary>
            Returns the XML of this serialization information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetString">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.Merge(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Merges the current <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> with the specified instance.
            </summary>
            <param name="serializationInfo"></param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.GetXmlStream">
            <summary>
            Gets the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.OwnerType">
            <summary>
            Gets or sets the type of the owner.
            </summary>
            <value>
            The type of the owner.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.FullName">
            <summary>
            Gets the node namespace.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SerializationInfo.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified property name.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.AlignmentService">
            <summary>
            This class is accountable for calculating alignment related transformatins for position and size.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AlignmentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.AlignmentService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AlignmentService.AlignBounds(System.Collections.Generic.IEnumerable{System.Windows.Rect},Telerik.Windows.Diagrams.Core.Alignment)">
            <summary>
            Calculates the the most left/top/right/bottom position for every bounds in list.
            Position is calculated relative to the edge defined by the union of all bounds in the list.
            </summary>
            <param name="listOfBounds">List of bounds to align.</param>
            <param name="alignment">Determins whether alignment should be calculated towards left/top/right/bottom edge.</param>
            <returns>List of positions of the aligned bounds.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AlignmentService.SnapPoint(System.Windows.Point,System.Boolean)">
            <summary>
            Snaps point if either <see cref="P:Telerik.Windows.Diagrams.Core.AlignmentService.IsSnapEnabled"/> property or forceSnapping parameter is true. 
            </summary>
            <param name="point">The point to snap.</param>
            <param name="forceSnapping">If true the point is snapped ignoring the <see cref="P:Telerik.Windows.Diagrams.Core.AlignmentService.IsSnapEnabled"/> property.
            If false the point will be snapped if <see cref="P:Telerik.Windows.Diagrams.Core.AlignmentService.IsSnapEnabled"/> is true.</param>
            <returns>The snapped point.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.AlignmentService.SnapDouble(System.Double)">
            <summary>
            Snaps the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AlignmentService.IsSnapEnabled">
            <summary>
            Gets or sets a value indicating whether snap to point is enabled.
            </summary>
            <value>
            <c>True</c> if snap is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.AlignmentService.SnapValue">
            <summary>
            Gets or sets the snap value.
            </summary>
            <value>
            The snap value.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingService.CalculateSnappedOffset(Telerik.Windows.Diagrams.Core.Vector)">
            <summary>
            Calculate the correct offset based on the HitItem.
            </summary>
            <param name="offset">The original offset.</param>
            <returns>The corrected offset.</returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.HitTestService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.HitTestService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetTopItemUnderPoint(System.Windows.Point)">
            <summary>
            Gets the topmost item under point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetShapesUnderPoint(System.Windows.Point)">
            <summary>
            Gets the shapes under point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetShapesNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the shapes near point within some delta distance.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetItemsNearPoint(System.Windows.Point,System.Double)">
            <summary>
            Gets the items near point.
            </summary>
            <param name="point">The point.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetShapesUnderRect(System.Windows.Rect)">
            <summary>
            Gets the shapes under rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetItemsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the items under rect.
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.HitTestService.GetConnectionsUnderRect(System.Windows.Rect)">
            <summary>
            Gets the connections intersecting the specific rect.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HitTestService.ShapeUnderMouse">
            <summary>
            Gets the shape under mouse.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.HitTestService.ItemUnderMouse">
            <summary>
            Gets the item under the mouse.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ItemRelationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemRelationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ItemRelationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemRelationService.UpdateItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Updates the specific items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemRelationService.GetConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemRelationService.GetIncomingConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the incoming connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ItemRelationService.GetOutgoingConnectionsForShape(Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Gets the outgoing connections for shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ManipulationPointService">
            <summary>
            Represents a service for manipulation of manipulation points.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationPointService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.BeginManipulation(System.Windows.Point,Telerik.Windows.Diagrams.Core.IConnectionManipulationPoint)">
            <summary>
            Begins the manipulation.
            </summary>
            <param name="startingPoint">The starting point.</param>
            <param name="manipulationPoint">The manipulation point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.UpdateManipulation(System.Windows.Point)">
            <summary>
            Updates the manipulation.
            </summary>
            <param name="newPoint">The new point.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.CompleteManipulation">
            <summary>
            Completes the manipulation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.UndoManipulation">
            <summary>
            Undoes the current manipulation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationPointService.OnManipulationCompleted">
            <summary>
            Called when [manipulation completed].
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.ManipulationPointService.ManipulationCompleted">
            <summary>
            Occurs when [manipulation completed].
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ManipulationPointService.ManipulationPoint">
            <summary>
            Gets the manipulation point.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointService.LineOrientation.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationPointService.LineOrientation.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ResizingService">
            <summary>
            Represents manipulation service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ResizingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ResizingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingService.IsResizing">
            <summary>
            Gets a value indicating whether this instance is resizing.
            </summary>
            <value>
            	<c>True</c> if this instance is resizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingService.InitialResizingPoint">
            <summary>
            Gets the initial resizing point.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingService.SelectedItemsInitialbounds">
            <summary>
            Gets the selected items initialbounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ResizingService.InitialRotatedBound">
            <summary>
            Gets the initial rotated bound.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RotationService">
            <summary>
            Represents a rotation service.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RotationService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.InitiateRotate">
            <summary>
            Initiates the rotate.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.UpdateSelection">
            <summary>
            Updates the selection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.SetSelectionAdornerAround(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Sets the selection rectangle around collection of items.
            </summary>
            <param name="items">List of items to be anclosed with selection rectangle.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.UpdateBoundsPositions(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Updates the bounds positions.
            </summary>
            <param name="deltaPos">The delta pos.</param>
            <param name="deltaWidth">The delta width.</param>
            <param name="deltaHeight">The delta height.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.Rotate(System.Double,System.Double)">
            <summary>
            Rotates the specified old angle.
            </summary>
            <param name="oldAngle">The old angle.</param>
            <param name="newAngle">The new angle.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.TopLeft">
            <summary>
            Tops the left.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.TopRight">
            <summary>
            Tops the right.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.BottomRight">
            <summary>
            Bottoms the right.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.BottomLeft">
            <summary>
            Bottoms the left.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.RotationPoint">
            <summary>
            Rotations the point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RotationService.Center">
            <summary>
            Centers this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotationService.CurrentAngle">
            <summary>
            Gets or sets the current rotation.
            </summary>
            <value>
            The current rotation.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RotationService.IsRotating">
            <summary>
            Gets a value indicating whether this instance is rotating.
            </summary>
            <value>
            	<c>True</c> if this instance is rotating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RoutingService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RoutingService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RoutingService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.GridRouter">
            <summary>
            Gets or sets the grid router.
            </summary>
            <value>
            The grid router.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.RoutingService.FreeRouter">
            <summary>
            Gets or sets the free router.
            </summary>
            <value>
            The free router.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SelectionService">
            <summary>
            Manages the selection of diagram entities.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SelectionService"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.IsSingleSelected(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Determines whether [is single selected] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is single selected] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SyncSelectedItems(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Syncs the selected items.
            </summary>
            <param name="model">The model.</param>
            <returns>True if item is added or removed from selectedItems, otherwise false.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.DeselectItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Deselects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.DeselectItem(Telerik.Windows.Diagrams.Core.IDiagramItem)">
            <summary>
            Deselects the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectItem(Telerik.Windows.Diagrams.Core.IDiagramItem,System.Boolean)">
            <summary>
            Selects the given item.
            </summary>
            <param name="item">The item.</param>
            <param name="addToExistingSelection">If set to <c>true</c> the current selection will be expanded with the given items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Selects the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Selects the given items.
            </summary>
            <param name="items">The items to select.</param>
            <param name="addToExistingSelection">If set to <c>true</c> the current selection will be expanded with the given items.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.GetSelectionBoundingBox(System.Boolean)">
            <summary>
            Recalculates the selection bounding box.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.SelectNextItem(System.Collections.Generic.IList{Telerik.Windows.Diagrams.Core.IDiagramItem},System.Boolean)">
            <summary>
            Selects the next item in an ordered collection based on the current selected items.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.UpdateSelectionBounds(System.Windows.Rect)">
            <summary>
            Updates the selection bounds.
            </summary>
            <param name="newBounds">The new bounds.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SelectionService.UpdateSelectionBounds">
            <summary>
            Updates the selection bounds.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SelectionService.SelectionChanged">
            <summary>
            Occurs when [selection ended].
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SelectionService.PreviewSelectionChanged">
            <summary>
            Occurs when [selection starts].
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.SelectionService.SelectionBoundsChanged">
            <summary>
            Occurs when selection bounds change].
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectionBounds">
            <summary>
            Gets the starting selection bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.InflatedBounds">
            <summary>
            Gets the inflated bounds.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedItems">
            <summary>
            Gets the currently selected diagram entities.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedShapes">
            <summary>
            Gets the currently selected diagram shapes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedConnections">
            <summary>
            Gets the selected connections.
            </summary>
            <value>The selected connections.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectedItemsCount">
            <summary>
            Gets the selected items count.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.SelectionService.SelectionState">
            <summary>
            Gets the state of the selection.
            </summary>
            <value>
            The state of the selection.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.SerializationService">
            <summary>
            Manages the (de)serialization of diagrams and diagram elements.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.SerializationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.Deserialize(Telerik.Windows.Diagrams.Core.SerializationInfo)">
            <summary>
            Loads the specified serialization info.
            </summary>
            <param name="serializationInfo">
            The serialization info.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.Serialize">
            <summary>
            Serializes the diagram.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.DeserializeItems(Telerik.Windows.Diagrams.Core.SerializationInfo,System.Boolean)">
            <summary>
            Deserializes the items.
            </summary>
            <param name="serializationInfo">
            The serialization info.
            </param>
            <param name="makeUnique">
            If set to <c>true</c> [make unique].
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeItems(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Serializes the given items.
            </summary>
            <param name="items">
            The items to serialize.
            </param>
            <returns>
            A <see cref="T:Telerik.Windows.Diagrams.Core.SerializationInfo"/> instance.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeShapes(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IShape})">
            <summary>
            Serializes the shapes.
            </summary>
            <param name="shapes">
            The shapes.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeConnections(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IConnection})">
            <summary>
            Serializes the connections.
            </summary>
            <param name="connections">
            The connections.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.GetAssemblyName(System.String)">
            <summary>
            The get assembly name.
            </summary>
            <param name="typeString">
            The type string.
            </param>
            <returns>
            The get assembly name.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.GetAssemblyNames(System.String)">
            <summary>
            Gets the assembly names.
            </summary>
            <param name="assemblyNamesString">
            The assembly names string.
            </param>
            <returns>
            Returns the assembly names without version, culture and public token.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.SerializeMetadata(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Serializes the metadata of the diagram.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.SerializationService.DeserializeMetadata(System.String)">
            <summary>
            Deserializes the metadata of the diagram.
            </summary>
            <param name="s">The xml serialization of the diagram.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.UndoRedoService">
            <summary>
            Service managing the undore actions.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.CanRedo">
            <summary>
            Determines whether this instance can redo.
            </summary>
            <returns>
              <c>true</c> if this instance can redo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.CanUndo">
            <summary>
            Determines whether this instance can undo.
            </summary>
            <returns>
              <c>true</c> if this instance can undo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.ExecuteCommand(Telerik.Windows.Diagrams.Core.ICommand,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Undo(System.Object)">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.Clear">
            <summary>
            Clears the undo and redo stacks.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.UndoRedoService.OnActionExecuted(Telerik.Windows.Diagrams.Core.CommandEventArgs)">
            <summary>
            Raises the <see cref="E:ActionExecuted"/> event.
            </summary>
            <param name="args">The <see cref="T:Telerik.Windows.Diagrams.Core.CommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.UndoRedoService.ActionExecuted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.RedoBufferSize">
            <summary>
            Gets or sets the size of the redo buffer.
            </summary>
            <value>
            The size of the redo buffer.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.UndoRedoService.UndoBufferSize">
            <summary>
            Gets or sets the size of the undo buffer.
            </summary>
            <value>
            The size of the undo buffer.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.VirtualizationService">
            <summary>
            Simple data virtualization. Assuming containers are generated. Just hiding the items out of the viewport.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.VirtualizationService"/> class.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.ForceRealization">
            <summary>
            Forces the realization of all items.
            </summary>
            <remarks>When implementing a layout algorithm you need to call this method in order to take all the bounds into account.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.Virtualize">
            <summary>
            Virtualizes this instance.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.VirtualizationService.Virtualize(System.Collections.Generic.IEnumerable{Telerik.Windows.Diagrams.Core.IDiagramItem})">
            <summary>
            Virtualizes the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ToolBase">
            <summary>
            Base class for all tools.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ITool">
            <summary>
            The interface for tools.
            </summary>
            <seealso cref="T:Telerik.Windows.Diagrams.Core.ToolBase">The abstract base implementation of this interface.</seealso>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.ActivateTool">
            <summary>
            Activates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.DeactivateTool">
            <summary>
            Deactivates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ITool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Windows.Diagrams.Core.ITool"/> is enabled.
            </summary>
            <value><c>True</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.IsActive">
            <summary>
            Gets or sets a value indicating whether this tool is active. If true the tool is actually performing work via the various mouse or keyboard event handlers.
            If <see cref="P:Telerik.Windows.Diagrams.Core.ITool.IsEnabled"/> is false the tool can never be active. Furthermore, if the tool <see cref="P:Telerik.Windows.Diagrams.Core.ITool.IsSuspended"/> it means another tool has suspended the activity of this tool.
            
            </summary>
            <value><c>True</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.IsSuspended">
            <summary>
            Gets or sets a value indicating whether this instance is suspended. A tool enters in a suspended mode when another tool has been activated and disallows another to continue its normal activity. For example, the <see cref="T:Telerik.Windows.Diagrams.Core.PointerTool"/> and other tools are
            mutually exclusive and similarly for the drawing tools and the selection tool.
            <para>This suspended state is independent of the <see cref="P:Telerik.Windows.Diagrams.Core.ITool.IsActive"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.ITool.IsEnabled"/> states.</para>
            </summary>
            <value>
            	<c>True</c> if this instance is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.Name">
            <summary>
            Gets the name of the tool.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.Graph">
            <summary>
            Gets or sets the diagramming surface.
            </summary>
            <value>The surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ITool.ToolService">
            <summary>
            Gets or sets the tool manager (see <see cref="P:Telerik.Windows.Diagrams.Core.ITool.ToolService"/>).
            </summary>
            <value>The tool manager.</value>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ToolBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.DeactivateTool">
            <summary>
            Deactivates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.ActivateTool">
            <summary>
            Activates the tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolBase.RestoreCursor">
            <summary>
            Restores the cursor.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.ToolService">
            <summary>
            Gets or sets the tool service (see <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.ToolService"/>).
            </summary>
            <value>The tool service.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Graph">
            <summary>
            Gets or sets the graph view (aka surface).
            </summary>
            <value>The surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.IsEnabled">
            <summary>
            Gets or sets the IsEnabled.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.IsSuspended">
            <summary>
            Gets or sets a value indicating whether this instance is suspended. A tool enters in a suspended mode when another tool has been activated and disallows another to continue its normal activity.
            <para>This suspended state is independent of the <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive"/> and the <see cref="P:Telerik.Windows.Diagrams.Core.ToolBase.IsEnabled"/> states.</para>
            </summary>
            <value>
            	<c>True</c> if this instance is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.IsActive">
            <summary>
            Gets or sets a value indicating whether this tool is active.
            </summary>
            <value><c>True</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Name">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.InitialPoint">
            <summary>
            Gets the initial point of the interaction.
            </summary>
            <value>The initial point on the surface.</value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolBase.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>
            The cursor.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IMouseListener">
            <summary>
            Describes the three fundamental method of a mouse handler object.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IMouseListener.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IKeyboardListener">
            <summary>
            Describes the three fundamental method of a keyboard handler object.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IKeyboardListener.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionManipulationTool.ActiveManipulationPoint">
            <summary>
            Gets or sets the active manipulation point.
            </summary>
            <value>
            The active manipulation point.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ConnectionTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PrimaryMouseTool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PrimaryMouseTool"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.SelectionService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.HitTestService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.IsDragging">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.PrimaryMouseTool.HitItem">
            <summary>
            Gets the hit item.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ConnectionTool.ToolName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ConnectionTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Mouses down.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Mouses the move.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Mouses up.
            </summary>
            <param name="e">The e.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ConnectionTool.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.ActiveSource">
            <summary>
            Gets or sets the active source.
            </summary>
            <value>
            The active source.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ConnectionTool.ActiveSourceConnector">
            <summary>
            Gets or sets the active source connector.
            </summary>
            <value>
            The active source connector.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DiagramCursors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Pointer">
            <summary>
            Gets the pointer.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Panning">
            <summary>
            Gets the panning.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Dragging">
            <summary>
            Gets the dragging.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.RectSelection">
            <summary>
            Gets the rect selection.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.SizeNESW">
            <summary>
            Gets the size NESW.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.SizeNWSE">
            <summary>
            Gets the size NWSE.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Rotation">
            <summary>
            Gets the rotation.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.DiagramCursors.Beam">
            <summary>
            Gets the beam.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.DraggingTool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.DraggingTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.DraggingTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IToolService">
            <summary>
            Describes the members of the tool service. This service collects tools like the selection tool or the drawing tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.ActivatePrimaryTool">
            <summary>
            Activates the primary tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.ActivateTool(System.String)">
            <summary>
            Activates the tool.
            </summary>
            <param name="toolName">Layer of the tool.</param>
            <returns>Returns the activated tool.</returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Deactivates the tool.
            </summary>
            <param name="tool">The tool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.SuspendAllTools">
            <summary>
            Suspends all the tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.SuspendOtherTools(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Suspends the other tools than the given one.
            </summary>
            <param name="tool">The tool.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IToolService.UnsuspendAllTools">
            <summary>
            Unsuspends all tools.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.ActiveTool">
            <summary>
            Gets the active tool.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.PrimaryTool">
            <summary>
            Gets or sets the primary tool.
            </summary>
            <value>
            The primary tool.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IToolService.Graph">
            <summary>
            Gets the graph internal.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameNWSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameNESW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameSENW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameSWNE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.ManipulationTool.ToolNameRotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ManipulationTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ManipulationTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.MouseTool">
            <summary>
            Enumerates the default tools.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PointerTool">
            <summary>
            The standard tool which allows you to select items.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.ConnectorTool">
            <summary>
            A tool which allows you to create or change connections.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.MouseTool.PanTool">
            <summary>
            A tool which pans the diagram.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PanningTool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PanningTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PanningTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.PointerTool">
            <summary>
            Pointer tool as well.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.PointerTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.PointerTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseUp event.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.RectangleSelectionTool">
            <summary>
            This base implementation of a tool serves for shape creation on the basis of
            a drawn rubberband on the canvas. Not every shape is created in this way, certain shape have a fixed size
            or are polygonal.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.ToolName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.RectangleSelectionTool"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.Initialize(Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes the specified service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseDown event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseMove event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.RectangleSelectionTool.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the MouseUp event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ToolService">
            <summary>
            The toolbox, this tells the application which tools are available.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.#ctor(Telerik.Windows.Diagrams.Core.IGraphInternal,Telerik.Windows.Diagrams.Core.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.ToolService"/> class.
            </summary>
            <param name="graph">The graph.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivatePrimaryTool">
            <summary>
            Activates the primary tool.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.FindTool(System.String)">
            <summary>
            Returns the tool with the specified name, if it exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseDoubleClick(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse double click event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseDown(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-down event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseMove(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-move event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.MouseUp(Telerik.Windows.Diagrams.Core.PointerArgs)">
            <summary>
            Handles the mouse-up event.
            </summary>
            <param name="e">The <see cref="T:Telerik.Windows.Diagrams.Core.PointerArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.KeyDown(Telerik.Windows.Diagrams.Core.KeyArgs)">
            <summary>
            Handles the key down event.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.SuspendOtherTools(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Suspends the other tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Deactivates the given tool.
            </summary>
            <param name="tool">A registered ITool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivateTool(System.String)">
            <summary>
            Activates the tool.
            </summary>
            <param name="toolName">Label of the tool.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.SuspendAllTools">
            <summary>
            Suspends all tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.UnsuspendAllTools">
            <summary>
            Unsuspends all tools.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.ActivateTool(Telerik.Windows.Diagrams.Core.ITool)">
            <summary>
            Activates the given tool.
            </summary>
            <param name="tool">The tool to activate.</param>
            <returns><c>true</c> if the activation was successful, otherwise <c>false</c>.</returns>
            <seealso cref="M:Telerik.Windows.Diagrams.Core.ToolService.DeactivateTool(Telerik.Windows.Diagrams.Core.ITool)"/>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ToolService.AddDefaultTools">
            <summary>
            Adds the default set of tools.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.ActiveTool">
            <summary>
            Gets the active tool.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.Graph">
            <summary>
            Gets the graph.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.PrimaryTool">
            <summary>
            Gets or sets the primary tool.
            </summary>
            <value>
            The primary tool.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.ToolService.ToolList">
            <summary>
            Gets the tools collection.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GeneratorStatus">
            <summary>
            The status of the generator.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.NotStarted">
            <summary>
            The generator has not tried to generate content.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.GeneratingContainers">
            <summary>
            The generator is generating containers.
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.ContainersGenerated">
            <summary>
            The generator has finished generating containers. 
            </summary>
        </member>
        <member name="F:Telerik.Windows.Diagrams.Core.GeneratorStatus.Error">
            <summary>
            The generator has finished generating containers, but encountered one or more errors.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IGraphInternal">
            <summary>
            The internal diagram control API.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.UpdateAdorners">
            <summary>
            Updates the adorners.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.UpdateRectSelection(System.Windows.Rect)">
            <summary>
            Updates the rect selection.
            </summary>
            <param name="selectionRect">
            The selection rect.
            </param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.GetRotationPartBounds">
            <summary>
            Gets the bounds of the rotation part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IGraphInternal.PublishDiagramEvent(Telerik.Windows.Diagrams.Core.DiagramEvent,System.Object)">
            <summary>
            Publishes a diagram event to the diagram control.
            </summary>
            <param name="diagramEvent">The diagram event.</param>
            <param name="args">The args.</param>
            <returns>Returns true if the event has been handled.</returns>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.Metadata">
            <summary>
            Gets the metadata of this diagram.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IGraphInternal.IsVirtualizing">
            <summary>
            Gets a value indicating whether this instance is virtualizing.
            </summary>
            <value>
            	<c>True</c> if this instance is virtualizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGenerator`1">
            <summary>
            Represents a generic container generator.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGenerator">
            <summary>
            Represents a container generator.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator.ContainerFromItem(System.Object)">
            <summary>
            Returns the container from item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator.ItemFromContainer(System.Object)">
            <summary>
            Returns the item from container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.IContainerGenerator.StatusChanged">
            <summary>
            Occurs when the status changes.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.IContainerGenerator.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator`1.ContainerFromItem(System.Object)">
            <summary>
            Returns the container from item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGenerator`1.ItemFromContainer(`0)">
            <summary>
            Returns the item from container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1">
            <summary>
            
            </summary>
            <typeparam name="T">Type.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.RemoveContainer(`0)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateContainer(System.Object)">
            <summary>
            Generates the container.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal`1.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.RemoveContainer(System.Object)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.RemoveItem(System.Object)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateContainer(System.Object)">
            <summary>
            Generates the container.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.IContainerGeneratorInternal.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1">
            <summary>
            Provides view generator functionality.
            </summary>
            <typeparam name="T">The type of the view.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.CleanContainerForItemOverride(`0,System.Object)">
            <summary>
            Cleans the container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.PrepareConnectionContainerForItemOverride(`0,System.Object)">
            <summary>
            Prepares the connection container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.PrepareShapeContainerForItemOverride(`0,System.Object)">
            <summary>
            Prepares the shape container for item override.
            </summary>
            <param name="container">The container.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.IsItemItsOwnShapeContainerOverride(System.Object)">
            <summary>
            Determines whether [is item its own shape container override] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is item its own shape container override] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetShapeContainerForItemOverride(System.Object)">
            <summary>
            Gets the shape container for item override.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.GetConnectionContainerForItemOverride(System.Object)">
            <summary>
            Gets the connection container for item override.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.ISupportContainerGenerator`1.IsItemItsOwnConnectionContainerOverride(System.Object)">
            <summary>
            Determines whether [is item its own connection container override] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [is item its own connection container override] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.#ctor(Telerik.Windows.Diagrams.Core.ISupportContainerGenerator{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.ItemFromContainer(`0)">
            <summary>
            Returns the item for a specific container.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.ContainerFromItem(System.Object)">
            <summary>
            Returns the container for the given item. 
            </summary>
            <param name="item">The item for which the container should be returned.</param>
            <returns>The container or <c>null</c> if the container hasn't been generated.</returns>
            <remarks>Use the <see cref="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainer(System.Object)"/> method to generate a container for the item.</remarks>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.RemoveContainer(`0)">
            <summary>
            Removes the container.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.RemoveItem(System.Object)">
            <summary>
            Removes the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainers(System.Collections.IEnumerable)">
            <summary>
            Generates the containers.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateContainer(System.Object)">
            <summary>
            Generates the container for the given item.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>If the item is an <see cref="T:Telerik.Windows.Diagrams.Core.IShape">IShape </see>or an <see cref="T:Telerik.Windows.Diagrams.Core.IConnection">IConnection </see>then the item is its own
            container.</description></item>
            <item>
            <description>If the item implements the <see cref="T:Telerik.Windows.Diagrams.Core.ILink">ILink </see>interface
            an IConnection will be returned.</description></item>
            <item>
            <description>A generic object (like a string or a control) will have an IShape
            as container and the item will be put in the
            Content.</description></item></list>
            </remarks>
            <param name="item">The item.</param>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.GenerateConnectionContainer(Telerik.Windows.Diagrams.Core.IShape,Telerik.Windows.Diagrams.Core.IShape)">
            <summary>
            Generates the connection container.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.OnStatusChanged">
            <summary>
            Raises the status changed event.
            </summary>
        </member>
        <member name="E:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.StatusChanged">
            <summary>
            The StatusChanged event is raised by a view generator to inform controls that its status has changed. 
            </summary>
        </member>
        <member name="P:Telerik.Windows.Diagrams.Core.GenericContainerGenerator`1.Status">
            <summary>
            The generation status of the GenericContainerGenerator.
            </summary>
        </member>
    </members>
</doc>
