<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceModel.DomainServices.Server.UnitTesting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">
            <summary>
            <see cref="T:System.Exception"/> thrown by the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1"/>
            when an operation error occurs
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException"/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException"/> with the
            specified message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException"/>
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1">
            <summary>
            Host for invoking <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> operations from a test environment
            </summary>
            <typeparam name="TDomainService">The type of <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to test</typeparam>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1"/> that creates
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instances using the specified function
            </summary>
            <param name="createDomainService">The function to create <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s with</param>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="createDomainService"/> is <c>null</c></exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.#ctor(System.Func{`0},System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1"/> that creates
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instances using the specified function and uses the
            provided <see cref="T:System.Security.Principal.IPrincipal"/> for authorization.
            </summary>
            <param name="createDomainService">The function to create <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s with</param>
            <param name="user">The <see cref="T:System.Security.Principal.IPrincipal"/> to use for authorization</param>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="createDomainService"/> is <c>null</c></exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.#ctor(System.ServiceModel.DomainServices.Server.IDomainServiceFactory,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1"/> with the specified
            factory and service provider
            </summary>
            <param name="factory">The <see cref="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory"/> used to create <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instances</param>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> used in the creation of <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/> instances</param>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="factory"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="serviceProvider"/> is <c>null</c></exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Query``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the results
            </summary>
            <typeparam name="TEntity">The type of entity to return</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <returns>The entities returned from the specified operation</returns>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.QuerySingle``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the result
            </summary>
            <remarks>
            This method should be used for query signatures that do no return a collection
            </remarks>
            <typeparam name="TEntity">The type of entity to return</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <returns>The entity returned from the specified operation</returns>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryQuery``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the results, the validation errors,
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The type of entity in the results</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <param name="results">The entities returned from the specified operation</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryQuerySingle``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the result, the validation errors,
            and whether the operation completed successfully
            </summary>
            <remarks>
            This method should be used for query signatures that do no return a collection
            </remarks>
            <typeparam name="TEntity">The type of entity in the result</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <param name="result">The entity returned from the specified operation</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Insert``1(``0)">
            <summary>
            Invokes the insert operation for the specified entity
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to insert</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryInsert``1(``0,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the insert operation for the specified entity and returns the validation errors
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to insert</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryInsert``1(``0,System.ServiceModel.DomainServices.Server.ChangeSet@)">
            <summary>
            Invokes the insert operation for the specified entity and returns the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to insert</param>
            <param name="changeSet">The operation <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/></param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Update``1(``0,``0)">
            <summary>
            Invokes the update operation for the specified entity
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to update</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Update``1(System.Linq.Expressions.Expression{System.Action{`0}},``0)">
            <summary>
            Invokes the update operation for the specified entity
            </summary>
            <remarks>
            This method can be used for custom-named Update operations
            </remarks>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="updateOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the update operation to invoke</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryUpdate``1(``0,``0,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the update operation for the specified entity and returns the validation errors
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to update</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryUpdate``1(``0,``0,System.ServiceModel.DomainServices.Server.ChangeSet@)">
            <summary>
            Invokes the update operation for the specified entity and returns the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to update</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="changeSet">The operation <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/></param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryUpdate``1(System.Linq.Expressions.Expression{System.Action{`0}},``0,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the update operation for the specified entity and returns the validation errors
            and whether the operation completed successfully
            </summary>
            <remarks>
            This method should be used for custom-named Update operations
            </remarks>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="updateOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the update operation to invoke</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryUpdate``1(System.Linq.Expressions.Expression{System.Action{`0}},``0,System.ServiceModel.DomainServices.Server.ChangeSet@)">
            <summary>
            Invokes the update operation for the specified entity and returns the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>
            and whether the operation completed successfully
            </summary>
            <remarks>
            This method should be used for custom-named Update operations
            </remarks>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="updateOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the update operation to invoke</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="changeSet">The operation <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/></param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Delete``1(``0,``0)">
            <summary>
            Invokes the delete operation for the specified entity
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to delete</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryDelete``1(``0,``0,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the delete operation for the specified entity and returns the validation errors
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to delete</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryDelete``1(``0,``0,System.ServiceModel.DomainServices.Server.ChangeSet@)">
            <summary>
            Invokes the delete operation for the specified entity and returns the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="entity">The entity to delete</param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="changeSet">The operation <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/></param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Invoke(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/>
            </summary>
            <remarks>
            This method should not be used to invoke query, insert, update, or delete operations
            </remarks>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Invoke``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/> and returns the result
            </summary>
            <remarks>
            This method should not be used to invoke query, insert, update, or delete operations
            </remarks>
            <typeparam name="TResult">The result type</typeparam>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryInvoke(System.Linq.Expressions.Expression{System.Action{`0}},System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/> and returns validation errors
            and whether the operation completed successfully
            </summary>
            <remarks>
            This method should not be used to invoke query, insert, update, or delete operations
            </remarks>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryInvoke``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/> and returns the result, the validation errors,
            and whether the operation completed successfully
            </summary>
            <remarks>
            This method should not be used to invoke query, insert, update, or delete operations
            </remarks>
            <typeparam name="TResult">The result type</typeparam>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <param name="result">The result of the operation</param>
            <param name="validationErrors">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.QueryCore``1(System.Linq.Expressions.Expression)">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the results
            </summary>
            <typeparam name="TEntity">The type of entity to return</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <returns>The entities returned from the specified operation</returns>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryQueryCore``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{``0}@,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="queryOperation"/> and returns the results, the validation errors,
            and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The type of entity in the results</typeparam>
            <param name="queryOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the query operation to invoke</param>
            <param name="results">The entities returned from the specified operation</param>
            <param name="validationResults">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.SubmitCore``1(System.ServiceModel.DomainServices.Server.DomainOperation,System.Linq.Expressions.Expression,``0,``0)">
            <summary>
            Invokes an operation according to the specified <paramref name="operationType"/> and entity
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="operationType">The type of operation to invoke</param>
            <param name="submitOperation">
            The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke. This parameter can be <c>null</c>
            as long as <paramref name="entity"/> is not.
            </param>
            <param name="entity">
            The entity to pass to the operation. This parameter can be <c>null</c> as long as
            <paramref name="submitOperation"/> is not.
            </param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TrySubmitCore``1(System.ServiceModel.DomainServices.Server.DomainOperation,System.Linq.Expressions.Expression,``0,``0,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@,System.ServiceModel.DomainServices.Server.ChangeSet@)">
            <summary>
            Invokes an operation according to the specified <paramref name="operationType"/> and entity and returns
            the validation errors, the change set, and whether the operation completed successfully
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="operationType">The type of operation to invoke</param>
            <param name="submitOperation">
            The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke. This parameter can be <c>null</c>
            as long as <paramref name="entity"/> is not.
            </param>
            <param name="entity">
            The entity to pass to the operation. This parameter can be <c>null</c> as long as
            <paramref name="submitOperation"/> is not.
            </param>
            <param name="original">The original version of the entity. This parameter can be <c>null</c>.</param>
            <param name="validationResults">The validation errors that occurred</param>
            <param name="changeSet">The change set</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.InvokeCore``1(System.Linq.Expressions.Expression)">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/> and returns the result
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.TryInvokeCore``1(System.Linq.Expressions.Expression,``0@,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified <paramref name="invokeOperation"/> and returns the result, the validation errors,
            and whether the operation completed successfully
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="invokeOperation">The <see cref="T:System.Linq.Expressions.Expression"/> identifying the operation to invoke</param>
            <param name="result">The result of the operation</param>
            <param name="validationResults">The validation errors that occurred</param>
            <returns>Whether the operation completed without error</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.CreateOperationContext(System.ServiceModel.DomainServices.Server.DomainOperationType)">
            <summary>
            Creates an <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext"/> for the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationType"/>
            </summary>
            <param name="operationType">The type of operation context to create</param>
            <returns>An operation context for the specified type</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.GetValidationResults(System.ServiceModel.DomainServices.Server.ChangeSet)">
            <summary>
            Returns a list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s extracted from the specified <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>
            </summary>
            <param name="changeSet">The <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> to get the results from</param>
            <returns>A list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/>s or <c>null</c></returns>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.Factory">
            <summary>
            Gets or sets the <see cref="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory"/> used to create a new <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            instance for each operation
            </summary>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.ServiceProvider">
            <summary>
            Gets or sets the <see cref="T:System.IServiceProvider"/> used in the creation of a new <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/>
            instance for each operation
            </summary>
            <remarks>
            The value returned from <see cref="M:System.IServiceProvider.GetService(System.Type)"/> when type is an <see cref="T:System.Security.Principal.IPrincipal"/>
            will be used to authorize <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> operations
            </remarks>
            <exception cref="T:System.ArgumentNullException">is thrown when <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHost`1.DomainServiceFactory">
            <summary>
            Implementation of the <see cref="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory"/> interface that creates
            a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> using a function
            </summary>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.ErrorUtility">
            <summary>
            Utility to for identifying and reporting error conditions
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.ErrorUtility.AssertNoValidationErrors(Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Throws an exception if there are any validation errors
            </summary>
            <param name="context">The <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext"/> of the validation errors</param>
            <param name="validationErrors">The validation errors</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any validation errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.ErrorUtility.AssertNoChangeSetErrors(Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext,System.ServiceModel.DomainServices.Server.ChangeSet)">
            <summary>
            Throws an exception if there are any change set errors
            </summary>
            <param name="context">The <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext"/> of the change set</param>
            <param name="changeSet">The change set</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown if there are any change set errors</exception>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.ErrorUtility.ReportErrors(Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Throws an exception containing information about the context and error
            </summary>
            <param name="context">The <see cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.OperationContext"/> where the exception occurred</param>
            <param name="errorMessages">The error messages to include</param>
            <exception cref="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.DomainServiceTestHostException">is thrown</exception>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.NoCustomUpdateOperation">
            <summary>
              Looks up a localized string similar to Unable to find an Custom Update operation named &apos;{0}&apos; for the DomainService of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.NoInvokeOperation">
            <summary>
              Looks up a localized string similar to Unable to find an Invoke operation named &apos;{0}&apos; for the DomainService of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.NoOperationName">
            <summary>
              Looks up a localized string similar to Unable to determine an operation name based on the input expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.NoParameterValues">
            <summary>
              Looks up a localized string similar to Unable to determine operation parameter values based on the input expression &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.NoQueryOperation">
            <summary>
              Looks up a localized string similar to Unable to find a Query operation named &apos;{0}&apos; for the DomainService of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Server.UnitTesting.Resources.OperationNotSupported">
            <summary>
              Looks up a localized string similar to Operations of type &apos;{0}&apos; are not supported for entities of type &apos;{1}&apos; on the DomainService of type &apos;{2}&apos;..
            </summary>
        </member>
    </members>
</doc>
