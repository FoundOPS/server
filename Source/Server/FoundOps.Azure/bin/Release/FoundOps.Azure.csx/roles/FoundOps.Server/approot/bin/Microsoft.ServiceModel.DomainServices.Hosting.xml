<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceModel.DomainServices.Hosting</name>
    </assembly>
    <members>
        <member name="T:System.ServiceModel.DomainServices.Hosting.MessageUtility">
            <summary>
            Utility class containing utility methods to read and/or modify messages.
            It is mainly used to insert(read) query options to(from) the URL or message body of the outgoing(incoming) messages.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.MessageUtility.GetServiceQuery(System.ServiceModel.Channels.Message@)">
            <summary>
            Extracts the service query and original message body from <paramref name="message"/> .
            May create a new message with the original body contents.
            </summary>
            <param name="message">The message to use for deserialization.</param>
            <returns>The extracted service query.</returns>
            <remarks>The message passed in will not be disposed. This message belongs to the
            caller.</remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.MessageUtility.ReadServiceQuery(System.Xml.XmlReader)">
            <summary>
            Reads the query options from the given reader and returns the resulting service query.
            It assumes that the reader is positioned on a stream containing the query options.
            </summary>
            <param name="reader">Reader to the stream containing the query options.</param>
            <returns>Extracted service query.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceQuery">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQuery.QueryParts">
            <summary>
            Gets or sets a list of query parts.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQuery.IncludeTotalCount">
            <summary>
            Gets or sets a value indicating whether the total entity count 
            property is required in the result.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart">
            <summary>
            Represents a single query operator to be applied to a query
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="queryOperator">The query operator</param>
            <param name="expression">The query expression</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.ToString">
            <summary>
            Returns a string representation of this <see cref="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart"/>
            </summary>
            <returns>The string representation of this <see cref="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart"/></returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.QueryOperator">
            <summary>
            Gets or sets the query operator. Must be one of the supported operators : "where", "orderby", "skip", or "take".
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.Expression">
            <summary>
            Gets or sets the query expression.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.IsTypeBinary(System.Type)">
            <summary>
            Returns whether the <paramref name="type"/> <c>is System.Data.Linq.Binary</c>.
            </summary>
            <remarks>
            We test Binary by Type Name so our client framework assembly can avoid taking an
            assembly reference to <c>System.Data.Linq</c>. If a type is determined to be
            binary, that type will be used to check reference equality for all subsequent
            invocations.
            </remarks>
            <param name="type">The type to check</param>
            <returns>Whether the <paramref name="type"/> is binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetByteArrayFromBinary(System.Object)">
            <summary>
            Returns the <paramref name="binary"/> converted to a <c>byte[]</c>.
            </summary>
            <param name="binary">The binary to convert</param>
            <returns>The byte[] form of the binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetBinaryFromByteArray(System.Byte[])">
            <summary>
            Returns the <paramref name="bytes"/> converted to a <c>System.Data.Linq.Binary</c>.
            </summary>
            <param name="bytes">The bytes to convert</param>
            <returns>The binary form of the bytes</returns>
        </member>
        <member name="F:System.ServiceModel.DomainServices.TypeUtility.systemAssemblyPublicKeyTokens">
            <summary>
            List of public key tokens used for System assemblies
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedCollectionType(System.Type)">
            <summary>
            Returns <c>true</c> if specified type is a supported collection Type. This method only checks the collection
            Type itself, not whether the element Type is supported.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a suppored collection Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexType(System.Type)">
            <summary>
            This method determines if the specified Type should be treated as a
            complex type by the framework.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a complex type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexTypeCollection(System.Type)">
            <summary>
            Determines whether the specified type is one of the supported collection types
            with a complex element type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a supported complex collection type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedComplexType(System.Type)">
            <summary>
            Determines whether the specified type is a complex type or a collection of
            complex types.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the specified type is a complex type or a collection of
            complex types, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Performs a check against an assembly to determine if it's a known
            System assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Performs a check against an <see cref="T:System.Reflection.AssemblyName"/> to determine if it's a known
            System assembly.
            </summary>
            <param name="assemblyName">The assembly name to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.String)">
            <summary>
            Performs a check against an assembly's full name to determine if it's a known
            System assembly.
            </summary>
            <remarks>
            We can't use Assembly.GetName().GetPublicKeyToken() since that requires FileIOPermissions.
            </remarks>
            <param name="assemblyFullName">The <see cref="P:System.Reflection.AssemblyName.FullName"/> to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.ExceptionHandlingUtility.IsFatal(System.Exception)">
            <summary>
            Determines if an <see cref="T:System.Exception"/> is fatal and therefore should not be handled.
            </summary>
            <example>
            try
            {
                // Code that may throw
            }
            catch (Exception ex)
            {
                if (ex.IsFatal())
                {
                    throw;
                }
                
                // Handle exception
            }
            </example>
            <param name="exception">The exception to check</param>
            <returns><c>true</c> if the exception is fatal, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.DefaultQueryResolver">
            <summary>
            Default query resolver
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.QueryResolver">
            <summary>
            Defines a set of methods that can participate in query deserialization.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.QueryResolver.ResolveMember(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Called to attempt to resolve unresolved member references during query deserialization.
            </summary>
            <param name="type">The Type the member is expected on.</param>
            <param name="member">The member name.</param>
            <param name="instance">The instance to form the MemberExpression on.</param>
            <returns>A MemberExpression if the member can be resolved, null otherwise.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DefaultQueryResolver.ResolveMember(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Called to attempt to resolve unresolved member references during query deserialization.
            </summary>
            <param name="type">The Type the member is expected on.</param>
            <param name="member">The member name.</param>
            <param name="instance">The instance to form the MemberExpression on.</param>
            <returns>A MemberExpression if the member can be resolved, null otherwise.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.ExpressionParser.ConvertEnumExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            We perform comparisons against enums using the underlying type
            because a more complete set of comparisons can be performed.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.QueryDeserializer">
            <summary>
            Used to deserialize a set of string based query operations into expressions and
            compose them over a specified query.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.QueryDeserializer.PostProcessor">
            <summary>
            Any expression tree transformations required after query parsing and composition
            are performed externally to the actual query parser.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior">
            <summary>
            A REST endpoint behavior which injects a message inspector that parses query headers.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetQueryStringConverter(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Gets the query string converter.
            </summary>
            <param name="operationDescription">The service operation.</param>
            <returns>A <see cref="T:System.ServiceModel.Dispatcher.QueryStringConverter"/> instance.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.AddServerErrorHandlers(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Adds server-side error handlers.
            </summary>
            <param name="endpoint">The endpoint for which error handlers are added.</param>
            <param name="endpointDispatcher">The dispatcher to which error handlers are added.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetRequestDispatchFormatter(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Modifies the request dispatch formatter to read query paramters from the message body.
            </summary>
            <param name="operationDescription">The specified operation description.</param>
            <param name="endpoint">The specified endpoint.</param>
            <returns>The request dispatch formatter for the specified operation description and endpoint.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetServiceQuery(System.String,System.String)">
            <summary>
            This method returns a ServiceQuery for the specified URL and query string.
            <remarks>
            This method must ensure that the original ordering of the query parts is maintained
            in the results. We want to do this without doing any custom URL parsing. The approach
            taken is to use HttpUtility to parse the query string, and from those results we search
            in the full URL for the relative positioning of those elements.
            </remarks>
            </summary>
            <param name="queryString">The query string portion of the URL</param>
            <param name="fullRequestUrl">The full request URL</param>
            <returns>The corresponding ServiceQuery</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.WebHttpQueryDispatchMessageFormatter">
            <summary>
            A formatter for deserializing query requests which may have query parameters present in
            the To uri or message body.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.WebHttpQueryDispatchMessageFormatter.System#ServiceModel#Dispatcher#IDispatchMessageFormatter#DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
            <summary>
            Deserializes the message into requests parameters. Also parses query parameters
            from the request and stores the results in the original message.
            </summary>
            <param name="message">The incoming message to deserialize.</param>
            <param name="parameters">The parameters that are passed to the query operation.
            </param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.IQueryOperationSettings">
            <summary>
            Encapsulates the settings the user specified for the query method.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.IQueryOperationSettings.HasSideEffects">
            <summary>
            Gets a value indicating whether the query method has side-effects.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.ClearOutputCachingPolicy">
            <summary>
            Clears the output cache policy.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SetOutputCachingPolicy(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Sets the output cache policy for the specified domain operation entry.
            </summary>
            <param name="domainOperationEntry">The domain operation entry we need to define the cache policy for.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetCacheLocation(System.Web.UI.OutputCacheLocation)">
            <summary>
            Converts the specified <see cref="T:System.Web.UI.OutputCacheLocation"/> enum value to a <see cref="N:System.ServiceModel.DomainServices.Server"/> enum value.
            </summary>
            <param name="outputCacheLocation">The <see cref="T:System.Web.UI.OutputCacheLocation"/>.</param>
            <returns>The equivalent <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/> value.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetCacheability(System.ServiceModel.DomainServices.Server.OutputCacheLocation)">
            <summary>
            Converts the specified <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/> enum value to a <see cref="T:System.Web.HttpCacheability"/> enum value.
            </summary>
            <param name="outputCacheLocation">The <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/>.</param>
            <returns>The equivalent <see cref="T:System.Web.HttpCacheability"/> value.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetOutputCacheInformation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Gets cache information for the specified domain operation entry.
            </summary>
            <param name="method">The domain operation entry to get cache information for.</param>
            <returns>Cache information.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SupportsCaching(System.Web.HttpContext,System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Determines whether caching is supported for the current request to the specified domain operation entry.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="domainOperationEntry">The requested domain operation entry, if any.</param>
            <returns>True if caching is supported.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SlidingExpirationValidator">
            <summary>
            Used to check whether a cache entry with sliding expiration has been expired.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor">
            <summary>
            Class used to process a changeset.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.Process(System.ServiceModel.DomainServices.Server.DomainService,System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Process the specified change set operations and return the results.
            </summary>
            <param name="domainService">The domain service that will process the changeset.</param>
            <param name="changeSetEntries">The change set entries to be processed.</param>
            <returns>Collection of results from the submit operation.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.GetSubmitResults(System.ServiceModel.DomainServices.Server.ChangeSet)">
            <summary>
            Examine the list of operations after the service has finished, and determine what needs to
            be sent back to the client.
            </summary>
            <param name="changeSet">The change set processed.</param>
            <returns>The results list.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.SetAssociationMember(System.Object,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds the specified associated entities to the specified association member for the specified entity.
            </summary>
            <param name="entity">The entity</param>
            <param name="associationProperty">The association member (singleton or collection)</param>
            <param name="associatedEntities">Collection of associated entities</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.CreateChangeSet(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Create and initialize a ChangeSet from the specified entries.
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
            <returns>The changeset.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.SetEntityAssociations(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Reestablish associations based on Id lists by adding the referenced entities
            to their association members
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DataContractSurrogateGenerator">
            <summary>
            Takes care of generating CLR types based on the virtual shape of an exposed type. E.g. we may be dealing with 
            projection properties that don't physically exist on the CLR type. Because WCF doesn't know about TypeDescriptor, 
            it won't see these virtual properties. This is why we generate CLR types that contain first-class properties.
            At serialization/deserialization time, the surrogate type will delegate to both the physical and virtual 
            properties on the real exposed object.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DataContractSurrogateGenerator.GetSurrogateType(System.Collections.Generic.HashSet{System.Type},System.Type)">
            <summary>
            Emits a surrogate type for the specified type.
            </summary>
            <param name="knownExposedTypes">The known set of exposed types.</param>
            <param name="type">The original type.</param>
            <returns>The surrogate type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceSerializationSurrogate.#ctor(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Collections.Generic.Dictionary{System.Type,System.Tuple{System.Type,System.Func{System.Object,System.Object}}},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Default constructor.
            </summary>
            <param name="description">A description of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> this type creates surrogates for.</param>
            <param name="exposedTypeToSurrogateMap">
            The map of known exposed types to surrogate types. This object is passed in externally for efficiency reasons. Its 
            contents won't change; the set is owned by this type.
            </param>
            <param name="surrogateTypes">
            The set of known surrogate types. This object is passed in externally for efficiency reasons. Its contents 
            won't change; the set is owned by this type.
            </param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryProcessor">
            <summary>
            Class encapsulating query deserialization and operation execution, including
            result flattening and other processing. Basically this is the bridge between
            the service layer and the domain layer.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.FlattenGraph``1(System.Collections.IEnumerable,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Object},System.Collections.Generic.HashSet{System.Object},System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Traverse the result object graph, flattening into a single list. Note that this
            flattening must maintain relative ordering for the top level elements, since the client might 
            have passed an order expression.
            </summary>
            <typeparam name="TEntity">The root entity Type of the query.</typeparam>
            <param name="list">The list of entities to add to the results.</param>
            <param name="rootResults">The root entities. The value can be <value>null</value> if the list of root results is already known.</param>
            <param name="includedResults">The included entities.</param>
            <param name="visited">Map used for the lifetime of the flattening to ensure that each entity
            is added to the results only once.</param>
            <param name="domainServiceDescription">description for the DomainService.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.RequiresFlattening(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Type)">
            <summary>
            Determines whether a query result of the given type requires flattening.
            </summary>
            <remarks>
            This method exists to support a performance optimization to skip graph flattening
            of a query result when we discover the entity has no included associations.  It takes
            inheritance into account by checking for included associations on the given type as well
            as all types derived from it.
            
            This method evaluates only once per type and caches the result.
            </remarks>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> to use to examine the entity hierarchy.</param>
            <param name="entityType">The entity type to analyze</param>
            <returns><c>true</c> if a query result of the given <paramref name="entityType"/> requires flattening.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.GetEntityDerivedTypes(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Type)">
            <summary>
            Returns the collection of all entity types derived from <paramref name="entityType"/>
            </summary>
            <remarks>
            When entities are shared, because all DomainServices exposing entityType must expose the same least derived entity,
            and  DomainServiceDescription always caches all KnownTypes, the DomainServiceDescription.EntityTypes property
            exposes the same set of derived types regardless of which DomainServiceDescription we examine.
            </remarks>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>.</param>
            <param name="entityType">The entity type whose derived types are needed.</param>
            <returns>The collection of derived types.  It may be empty.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientType(System.Type)">
            <summary>
            Gets the type that should be used on the client for the specified type.
            </summary>
            <param name="t">The type to get the client type for.</param>
            <returns>The client type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the client.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToClientConversion.
            </remarks>
            <param name="targetType">The type used by the client.</param>
            <param name="value">The value on the server.</param>
            <returns>A value that can be used by the client.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetServerValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the server.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToServerConversion.
            </remarks>
            <param name="targetType">The type used by the server.</param>
            <param name="value">The value from the client.</param>
            <returns>A value that can be used by the server.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.IsSerializableDataMember(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the specified property is a data member that should be serialized
            </summary>
            <param name="propertyDescriptor">The property to inspect</param>
            <returns>true if the specified property is a data member that should be serialized</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.SetReaderQuotas(System.Xml.XmlDictionaryReaderQuotas)">
            <summary>
            Sets the default reader quotas.
            </summary>
            <param name="readerQuotas">The quotas object that needs to be updated.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CreateFaultException(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Based on custom error settings, restrict the level of information
            returned in each error.
            </summary>
            <remarks>
            This method will also trace the exception if tracing is enabled.
            </remarks>
            <param name="validationErrors">The collection of errors to process.</param>
            <returns>An exception representing the validation errors.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CreateFaultException(System.Exception)">
            <summary>
            Transforms the specified exception as appropriate into a fault message that can be sent
            back to the client.
            </summary>
            <remarks>
            This method will also trace the exception if tracing is enabled.
            </remarks>
            <param name="e">The exception that was caught.</param>
            <returns>The exception to return.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.FormatExceptionMessage(System.Exception)">
            <summary>
            For the specified exception, return the error message concatenating
            the message of any inner exception to one level deep.
            </summary>
            <param name="e">The exception</param>
            <returns>The formatted exception message.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceUtility.AuthenticationScheme">
            <summary>
            Gets the default authentication scheme supported by the server
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CredentialType">
            <summary>
            Gets the default credential type supported by the server
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceUtility.WebServiceHostInspector">
            <summary>
            Uses the WCF <see cref="T:System.ServiceModel.Web.WebServiceHost"/> to get the default authentication scheme
            and credential type for services on the current server.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetFactoryMethod(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            Gets a factory method for a late-bound type.
            </summary>
            <remarks>
            This method will return a delegate to a factory method that looks like this:
            <code>
            public object FactoryMethod([object[, object]*]) {
                return &lt;Constructor&gt;([object[, object]*]);
            }
            </code>
            </remarks>
            <param name="ctor">The constructor to invoke.</param>
            <param name="delegateType">The type of delegate to return.</param>
            <returns>A factory method delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetDelegateForMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets an early-bound delegate for an instance method.
            </summary>
            <remarks>
            This method will return a delegate to a proxy method that looks like this:
            <code>
            public object &lt;MethodName&gt;(DomainService target, object[] parameters) {
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;();
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;((&lt;ParameterType&gt;)parameters[0]);
            }
            </code>
            </remarks>
            <param name="method">The method that the delegate should invoke.</param>
            <returns>A delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitToObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion to type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="sourceType">The type of value on the stack.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitFromObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion from type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="targetType">The type to which the value on the stack needs to be converted.</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaType">
            <summary>
            Class providing additional "meta" information for a Type.
            <remarks>
            Consider adding any commonly accessed or computed information about a Type
            to this class, to improve performance and code factoring.
            </remarks>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.GetMetaType(System.Type)">
            <summary>
            Returns the MetaType for the specified Type.
            <remarks>The MetaType should only be accessed AFTER all TypeDescriptors have
            been registered (i.e. after all DomainServiceDescriptions for services exposing
            the Type have been initialized).</remarks>
            </summary>
            <param name="type">The Type to provide the MetaType for.</param>
            <returns>The constructed MetaType.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.CalculateAttributesRecursive(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            This recursive function visits every property in the type tree. For each property,
            we inspect the attributes and set meta attributes as needed.
            </summary>
            <param name="type">The root type to calculate attributes for.</param>
            <param name="visited">Visited set for recursion.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Members">
            <summary>
            Gets the collection of members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.DataMembers">
            <summary>
            Gets the collection of data members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Type">
            <summary>
            Gets the underlying CLR type for this MetaType
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IncludedAssociations">
            <summary>
            Gets the collection of association members that have an IncludeAttribute applied
            to them.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ProjectionMemberMap">
            <summary>
            Gets a map of all projection includes for each property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IsComplex">
            <summary>
            Gets a value indicating whether this is a ComplexType.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.RequiresValidation">
            <summary>
            Gets a value indicating whether the Type has any Type or member level
            validation attributes applied. The check is recursive through any complex
            type members.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.HasComposition">
            <summary>
            Gets a value indicating whether the Type has any members marked with
            CompositionAttribute.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ValidationAttributes">
            <summary>
            Gets the Type level validation errors for the underlying Type.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaMember">
            <summary>
            This class caches all the interesting attributes of an property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.IsCollection">
            <summary>
            Gets or sets a value indicating whether this member is a supported collection type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.RequiresValidation">
            <summary>
            Returns <c>true</c> if the member has a property validator.
            </summary>
            <remarks>The return value does not take into account whether or not the member requires
            type validation.</remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions">
            <summary>
            Extension methods for TypeDescriptors
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ExplicitAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Extension method to extract only the explicitly specified attributes from a <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a property's type.  This method
            exists to suppress those inherited attributes.
            </remarks>
            <param name="propertyDescriptor">The property descriptor whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any attributes from the property's type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.Attributes(System.Type)">
            <summary>
            Extension method to extract attributes from a type taking into account the inheritance type of attributes
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a type's base type, regardless of their 
            inheritance type.
            </remarks>
            <param name="type">The type whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any incorrectly inherited attributes from the type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ContainsAttributeType``1(System.ComponentModel.AttributeCollection)">
            <summary>
            Checks to see if an attribute collection contains any attributes of the provided type.
            </summary>
            <typeparam name="TAttribute">The attribute type to check for</typeparam>
            <param name="attributes">The attribute collection to inspect</param>
            <returns><c>True</c> if an attribute of the provided type is contained in the attribute collection.</returns>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener">
            <summary>
            An implementation of <see cref="T:System.Diagnostics.TraceListener"/> that collects WCF traces in memory. The class is intended to be used in 
            conjunction with <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory"/> to expose WCF RIA trace messages as an ATOM feed, an XML document or an HTML document. 
            This class is not intended to be used directly from code. It can be referenced from the system.diagnostics section of the configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener.#ctor">
            <summary>
            This method is not intended for use from application code.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener.#ctor(System.String)">
            <summary>
            This method is not intended for use from application code.
            </summary>
            <param name="name">TraceListener name</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener.Write(System.String)">
            <summary>
            This method is not intended for use from application code.
            </summary>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener.WriteLine(System.String)">
            <summary>
            This method is not intended for use from application code.
            </summary>
            <param name="message">Message to trace.</param>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory">
            <summary>
            Represents a tracing endpoint factory for a <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost"/>. Adding
            this endpoint factory to the domain service host results in exposing traces of all WCF services running in the application domain over 
            a WCF REST endpoint in the ATOM, XML, or HTML format. In order to enable this functionality, in addition to adding this endpoint factory to the 
            <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost"/>, one must register the <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener"/> for the 
            System.ServiceModel traces through the system.diagnostics section in the configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory.#ctor">
            <summary>
            Creates an instance of the class. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory.CreateEndpoints(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ServiceModel.DomainServices.Hosting.DomainServiceHost)">
            <summary>
            Creates a set of WCF REST service endpoints in the <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost"/> which 
            expose traces of WCF services in the ATOM, XML, or HTML format. One WCF REST endpoint is added for each HTTP or HTTPS base address from the specified serviceHost.
            The address of the endpoint is obtained by appending the name of the TracingDomainServiceEndpointFactory as specified in the domainServices section of the configuration file
            to the base address. Furthermore, the UriTemplate of each of the endpoints is specified by the <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.WcfTraceService"/> service contract and allows for selection of the 
            response contract between ATOM, XML, or HTML. 
            </summary>
            <param name="description">WCF RIA service description.</param>
            <param name="serviceHost">Service host to which endpoints will be added.</param>
            <returns>The collection of endpoints.</returns>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.WcfTraceService">
            <summary>
            A class implementing a WCF REST service that exposes WCF traces collected by <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.InMemoryTraceListener"/> as 
            an ATOM feed or an XML document. This class is not intended for direct use by application code. In order to enable the functionality
            for a WCF RIA service, please use <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.WcfTraceService.GetTrace(System.String)">
            <summary>
            A WCF REST service operation that returns WCF RIA service traces in the requested format. This method is not intended
            for direct use from application code. See <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.TracingDomainServiceEndpointFactory"/> to enable the functionality.
            </summary>
            <param name="format">Requested response format. Allowed values are: 'atom' (default), 'xml', and 'html'.</param>
            <returns>WCF traces from all services running in the application domain in the requested format (ATOM, XML, or HTML).</returns>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory">
            <summary>
            Represents a JSON endpoint factory for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory.CreateEndpoints(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ServiceModel.DomainServices.Hosting.DomainServiceHost)">
            <summary>
            Creates endpoints based on the specified description.
            </summary>
            <param name="description">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create the endpoints for.</param>
            <param name="serviceHost">The service host for which the endpoints will be created.</param>
            <returns>The endpoints that were created.</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory.CreateEndpointForAddress(System.ServiceModel.Description.ContractDescription,System.Uri)">
            <summary>
            Creates an endpoint based on the specified address.
            </summary>
            <param name="contract">The endpoint's contract.</param>
            <param name="address">The endpoint's base address.</param>
            <returns>An endpoint.</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.JsonEndpointFactory.CreateContract(System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Creates a contract from the specified description.
            </summary>
            <param name="description">The description to create a contract from.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ContractDescription"/>.</returns>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.InvalidTraceFormat">
            <summary>
              Looks up a localized string similar to WCF RIA service traces can only be obtained in ATOM (default), XML or HTML format. Use URI &quot;.../traces?format=xml&quot; to request XML, or &quot;.../traces?format=html&quot; to request HTML.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.MaxEntriesAttributeMustBeAPositiveInteger">
            <summary>
              Looks up a localized string similar to The &apos;maxEntries&apos; attribute must be a positive integer.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.MaxEntriesMustBePositiveInteger">
            <summary>
              Looks up a localized string similar to MaxEntries must be a positive integer.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.NoDefaultAuthScheme">
            <summary>
              Looks up a localized string similar to Unable to determine the authentication scheme to use with the default endpoint bindings..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceModel.DomainServices.Hosting.Resource.WCFTraceFeedTitle">
            <summary>
              Looks up a localized string similar to WCF RIA Service Traces.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.SoapQueryBehavior">
            <summary>
            A SOAP endpoint behavior which injects a message inspector that parses query headers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapQueryBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapQueryBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapQueryBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapQueryBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="T:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory">
            <summary>
            Represents a SOAP w/ XML encoding endpoint factory for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory.CreateEndpoints(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ServiceModel.DomainServices.Hosting.DomainServiceHost)">
            <summary>
            Creates endpoints based on the specified description.
            </summary>
            <param name="description">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create the endpoints for.</param>
            <param name="serviceHost">The service host for which the endpoints will be created.</param>
            <returns>The endpoints that were created.</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory.CreateEndpointForAddress(System.ServiceModel.Description.ContractDescription,System.Uri)">
            <summary>
            Creates an endpoint based on the specified address.
            </summary>
            <param name="contract">The endpoint's contract.</param>
            <param name="address">The endpoint's base address.</param>
            <returns>An endpoint.</returns>
        </member>
        <member name="M:Microsoft.ServiceModel.DomainServices.Hosting.SoapXmlEndpointFactory.CreateContract(System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Creates a contract from the specified description.
            </summary>
            <param name="description">The description to create a contract from.</param>
            <returns>A <see cref="T:System.ServiceModel.Description.ContractDescription"/>.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousConstructorInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of &apos;{0}&apos; constructor.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousIndexerInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of indexer in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousMethodInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of method &apos;{0}&apos; in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.BothTypesConvertToOther">
            <summary>
              Looks up a localized string similar to Both of the types &apos;{0}&apos; and &apos;{1}&apos; convert to the other.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CannotConvertValue">
            <summary>
              Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CannotIndexMultiDimArray">
            <summary>
              Looks up a localized string similar to Indexing of multi-dimensional arrays is not supported.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseBracketOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;]&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseParenOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseParenOrOperatorExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or operator expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ColonExpected">
            <summary>
              Looks up a localized string similar to &apos;:&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DigitExpected">
            <summary>
              Looks up a localized string similar to Digit expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DotOrOpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;.&apos; or &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DuplicateIdentifier">
            <summary>
              Looks up a localized string similar to The identifier &apos;{0}&apos; was defined more than once.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expression expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ExpressionTypeMismatch">
            <summary>
              Looks up a localized string similar to Expression of type &apos;{0}&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.FirstExprMustBeBool">
            <summary>
              Looks up a localized string similar to The first expression must be of type &apos;Boolean&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IdentifierExpected">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IifRequiresThreeArgs">
            <summary>
              Looks up a localized string similar to The &apos;iif&apos; function requires three arguments.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IncompatibleOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidCharacter">
            <summary>
              Looks up a localized string similar to Syntax error &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidCharacterLiteral">
            <summary>
              Looks up a localized string similar to Character literal must contain exactly one character.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidIndex">
            <summary>
              Looks up a localized string similar to Array index must be an integer expression.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidIntegerLiteral">
            <summary>
              Looks up a localized string similar to Invalid integer literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidRealLiteral">
            <summary>
              Looks up a localized string similar to Invalid real literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.MethodIsVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; in type &apos;{1}&apos; does not return a value.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.MethodsAreInaccessible">
            <summary>
              Looks up a localized string similar to Methods on type &apos;{0}&apos; are not accessible.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NeitherTypeConvertsToOther">
            <summary>
              Looks up a localized string similar to Neither type &apos;{0}&apos; or &apos;{1}&apos; converts to the other.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableAggregate">
            <summary>
              Looks up a localized string similar to No applicable aggregate method &apos;{0}&apos; exists.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableIndexer">
            <summary>
              Looks up a localized string similar to No applicable indexer exists in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableMethod">
            <summary>
              Looks up a localized string similar to No applicable method &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoItInScope">
            <summary>
              Looks up a localized string similar to No &apos;it&apos; is in scope.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoMatchingConstructor">
            <summary>
              Looks up a localized string similar to No matching constructor in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.OpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ParseExceptionFormat">
            <summary>
              Looks up a localized string similar to {0} (at index {1}).
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.TypeHasNoNullableForm">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; has no nullable form.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnknownIdentifier">
            <summary>
              Looks up a localized string similar to Unknown identifier &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnknownPropertyOrField">
            <summary>
              Looks up a localized string similar to No property or field &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnterminatedStringLiteral">
            <summary>
              Looks up a localized string similar to Unterminated string literal.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_AssociationCollectionPropertyIsNull">
            <summary>
              Looks up a localized string similar to One or more associated objects were passed for collection property &apos;{1}&apos; on type &apos;{0}&apos;, but the target collection is null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_InvalidCollectionMember">
            <summary>
              Looks up a localized string similar to Association collection member &apos;{0}&apos; does not implement IList and does not have an Add method..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_InvalidSqlDependencyFormat">
            <summary>
              Looks up a localized string similar to Incorrect SQL cache dependency syntax. The correct syntax is: &lt;databaseEntry&gt;:&lt;tableName&gt;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_ResourceNotFound">
            <summary>
              Looks up a localized string similar to The specified resource was not found.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainServiceHost_DuplicateContractName">
            <summary>
              Looks up a localized string similar to A contract with the name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainServiceVirtualPathProvider_DuplicateDomainServiceName">
            <summary>
              Looks up a localized string similar to DomainServices &apos;{0}&apos; and &apos;{1}&apos; have the same Type name and cannot be exposed from the same application..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.FaultException_InnerExceptionDetails">
            <summary>
              Looks up a localized string similar to {0} InnerException message: {1}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.NoDefaultAuthScheme">
            <summary>
              Looks up a localized string similar to Unable to determine the authentication scheme to use with the default endpoint bindings..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_InvalidContentType">
            <summary>
              Looks up a localized string similar to The PoxBinaryMessageEncoder only supports content type {0}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_InvalidMessageVersion">
            <summary>
              Looks up a localized string similar to The message has MessageVersion {0} but the encoder is configured for MessageVersion {1}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_MessageVersionNotSupported">
            <summary>
              Looks up a localized string similar to The PoxBinaryMessageEncoder only supports MessageVersion.None..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.Query_InvalidOperator">
            <summary>
              Looks up a localized string similar to Invalid query operator &apos;{0}&apos;..
            </summary>
        </member>
    </members>
</doc>
